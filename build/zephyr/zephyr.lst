
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	98 db 00 20 bd 15 01 00 c7 6a 01 00 75 15 01 00     ... .....j..u...
   10010:	75 15 01 00 75 15 01 00 75 15 01 00 75 15 01 00     u...u...u...u...
	...
   1002c:	8d 11 01 00 75 15 01 00 00 00 00 00 29 11 01 00     ....u.......)...
   1003c:	75 15 01 00                                         u...

00010040 <_irq_vector_table>:
   10040:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10050:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10060:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10070:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10080:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10090:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100a0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100b0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100c0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100d0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100e0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   100f0:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10100:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10110:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10120:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10130:	25 12 01 00 25 12 01 00 25 12 01 00 25 12 01 00     %...%...%...%...
   10140:	25 12 01 00                                         %...

Disassembly of section text:

00010144 <__aeabi_uldivmod>:
   10144:	b953      	cbnz	r3, 1015c <__aeabi_uldivmod+0x18>
   10146:	b94a      	cbnz	r2, 1015c <__aeabi_uldivmod+0x18>
   10148:	2900      	cmp	r1, #0
   1014a:	bf08      	it	eq
   1014c:	2800      	cmpeq	r0, #0
   1014e:	bf1c      	itt	ne
   10150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10158:	f000 b80c 	b.w	10174 <__aeabi_idiv0>
   1015c:	f1ad 0c08 	sub.w	ip, sp, #8
   10160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10164:	f000 f808 	bl	10178 <__udivmoddi4>
   10168:	f8dd e004 	ldr.w	lr, [sp, #4]
   1016c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10170:	b004      	add	sp, #16
   10172:	4770      	bx	lr

00010174 <__aeabi_idiv0>:
   10174:	4770      	bx	lr
   10176:	bf00      	nop

00010178 <__udivmoddi4>:
   10178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1017c:	4686      	mov	lr, r0
   1017e:	468c      	mov	ip, r1
   10180:	4608      	mov	r0, r1
   10182:	9e08      	ldr	r6, [sp, #32]
   10184:	4615      	mov	r5, r2
   10186:	4674      	mov	r4, lr
   10188:	4619      	mov	r1, r3
   1018a:	2b00      	cmp	r3, #0
   1018c:	f040 80c1 	bne.w	10312 <__udivmoddi4+0x19a>
   10190:	4285      	cmp	r5, r0
   10192:	fab2 f282 	clz	r2, r2
   10196:	d945      	bls.n	10224 <__udivmoddi4+0xac>
   10198:	b14a      	cbz	r2, 101ae <__udivmoddi4+0x36>
   1019a:	f1c2 0320 	rsb	r3, r2, #32
   1019e:	fa00 fc02 	lsl.w	ip, r0, r2
   101a2:	4095      	lsls	r5, r2
   101a4:	4094      	lsls	r4, r2
   101a6:	fa2e f303 	lsr.w	r3, lr, r3
   101aa:	ea43 0c0c 	orr.w	ip, r3, ip
   101ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   101b2:	b2a8      	uxth	r0, r5
   101b4:	0c23      	lsrs	r3, r4, #16
   101b6:	fbbc f8fe 	udiv	r8, ip, lr
   101ba:	fb0e cc18 	mls	ip, lr, r8, ip
   101be:	fb08 f900 	mul.w	r9, r8, r0
   101c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   101c6:	4599      	cmp	r9, r3
   101c8:	d928      	bls.n	1021c <__udivmoddi4+0xa4>
   101ca:	18eb      	adds	r3, r5, r3
   101cc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   101d0:	d204      	bcs.n	101dc <__udivmoddi4+0x64>
   101d2:	4599      	cmp	r9, r3
   101d4:	d902      	bls.n	101dc <__udivmoddi4+0x64>
   101d6:	f1a8 0702 	sub.w	r7, r8, #2
   101da:	442b      	add	r3, r5
   101dc:	eba3 0309 	sub.w	r3, r3, r9
   101e0:	b2a4      	uxth	r4, r4
   101e2:	fbb3 fcfe 	udiv	ip, r3, lr
   101e6:	fb0e 331c 	mls	r3, lr, ip, r3
   101ea:	fb0c f000 	mul.w	r0, ip, r0
   101ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   101f2:	42a0      	cmp	r0, r4
   101f4:	d914      	bls.n	10220 <__udivmoddi4+0xa8>
   101f6:	192c      	adds	r4, r5, r4
   101f8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   101fc:	d204      	bcs.n	10208 <__udivmoddi4+0x90>
   101fe:	42a0      	cmp	r0, r4
   10200:	d902      	bls.n	10208 <__udivmoddi4+0x90>
   10202:	f1ac 0302 	sub.w	r3, ip, #2
   10206:	442c      	add	r4, r5
   10208:	1a24      	subs	r4, r4, r0
   1020a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1020e:	b11e      	cbz	r6, 10218 <__udivmoddi4+0xa0>
   10210:	40d4      	lsrs	r4, r2
   10212:	2300      	movs	r3, #0
   10214:	6034      	str	r4, [r6, #0]
   10216:	6073      	str	r3, [r6, #4]
   10218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1021c:	4647      	mov	r7, r8
   1021e:	e7dd      	b.n	101dc <__udivmoddi4+0x64>
   10220:	4663      	mov	r3, ip
   10222:	e7f1      	b.n	10208 <__udivmoddi4+0x90>
   10224:	bb92      	cbnz	r2, 1028c <__udivmoddi4+0x114>
   10226:	1b43      	subs	r3, r0, r5
   10228:	2101      	movs	r1, #1
   1022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1022e:	b2af      	uxth	r7, r5
   10230:	0c20      	lsrs	r0, r4, #16
   10232:	fbb3 fcfe 	udiv	ip, r3, lr
   10236:	fb0e 331c 	mls	r3, lr, ip, r3
   1023a:	fb0c f807 	mul.w	r8, ip, r7
   1023e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10242:	4598      	cmp	r8, r3
   10244:	d961      	bls.n	1030a <__udivmoddi4+0x192>
   10246:	18eb      	adds	r3, r5, r3
   10248:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1024c:	d204      	bcs.n	10258 <__udivmoddi4+0xe0>
   1024e:	4598      	cmp	r8, r3
   10250:	d902      	bls.n	10258 <__udivmoddi4+0xe0>
   10252:	f1ac 0002 	sub.w	r0, ip, #2
   10256:	442b      	add	r3, r5
   10258:	eba3 0308 	sub.w	r3, r3, r8
   1025c:	b2a4      	uxth	r4, r4
   1025e:	fbb3 fcfe 	udiv	ip, r3, lr
   10262:	fb0e 331c 	mls	r3, lr, ip, r3
   10266:	fb0c f707 	mul.w	r7, ip, r7
   1026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1026e:	42a7      	cmp	r7, r4
   10270:	d94d      	bls.n	1030e <__udivmoddi4+0x196>
   10272:	192c      	adds	r4, r5, r4
   10274:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   10278:	d204      	bcs.n	10284 <__udivmoddi4+0x10c>
   1027a:	42a7      	cmp	r7, r4
   1027c:	d902      	bls.n	10284 <__udivmoddi4+0x10c>
   1027e:	f1ac 0302 	sub.w	r3, ip, #2
   10282:	442c      	add	r4, r5
   10284:	1be4      	subs	r4, r4, r7
   10286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1028a:	e7c0      	b.n	1020e <__udivmoddi4+0x96>
   1028c:	f1c2 0320 	rsb	r3, r2, #32
   10290:	4095      	lsls	r5, r2
   10292:	4094      	lsls	r4, r2
   10294:	fa20 f103 	lsr.w	r1, r0, r3
   10298:	fa2e f303 	lsr.w	r3, lr, r3
   1029c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   102a0:	4090      	lsls	r0, r2
   102a2:	b2af      	uxth	r7, r5
   102a4:	4303      	orrs	r3, r0
   102a6:	fbb1 fcfe 	udiv	ip, r1, lr
   102aa:	fb0e 101c 	mls	r0, lr, ip, r1
   102ae:	0c19      	lsrs	r1, r3, #16
   102b0:	fb0c f807 	mul.w	r8, ip, r7
   102b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   102b8:	4588      	cmp	r8, r1
   102ba:	d922      	bls.n	10302 <__udivmoddi4+0x18a>
   102bc:	1869      	adds	r1, r5, r1
   102be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   102c2:	d204      	bcs.n	102ce <__udivmoddi4+0x156>
   102c4:	4588      	cmp	r8, r1
   102c6:	d902      	bls.n	102ce <__udivmoddi4+0x156>
   102c8:	f1ac 0002 	sub.w	r0, ip, #2
   102cc:	4429      	add	r1, r5
   102ce:	eba1 0108 	sub.w	r1, r1, r8
   102d2:	b29b      	uxth	r3, r3
   102d4:	fbb1 fcfe 	udiv	ip, r1, lr
   102d8:	fb0e 111c 	mls	r1, lr, ip, r1
   102dc:	fb0c f707 	mul.w	r7, ip, r7
   102e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102e4:	429f      	cmp	r7, r3
   102e6:	d90e      	bls.n	10306 <__udivmoddi4+0x18e>
   102e8:	18eb      	adds	r3, r5, r3
   102ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   102ee:	d204      	bcs.n	102fa <__udivmoddi4+0x182>
   102f0:	429f      	cmp	r7, r3
   102f2:	d902      	bls.n	102fa <__udivmoddi4+0x182>
   102f4:	f1ac 0102 	sub.w	r1, ip, #2
   102f8:	442b      	add	r3, r5
   102fa:	1bdb      	subs	r3, r3, r7
   102fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10300:	e793      	b.n	1022a <__udivmoddi4+0xb2>
   10302:	4660      	mov	r0, ip
   10304:	e7e3      	b.n	102ce <__udivmoddi4+0x156>
   10306:	4661      	mov	r1, ip
   10308:	e7f7      	b.n	102fa <__udivmoddi4+0x182>
   1030a:	4660      	mov	r0, ip
   1030c:	e7a4      	b.n	10258 <__udivmoddi4+0xe0>
   1030e:	4663      	mov	r3, ip
   10310:	e7b8      	b.n	10284 <__udivmoddi4+0x10c>
   10312:	4283      	cmp	r3, r0
   10314:	d906      	bls.n	10324 <__udivmoddi4+0x1ac>
   10316:	b916      	cbnz	r6, 1031e <__udivmoddi4+0x1a6>
   10318:	2100      	movs	r1, #0
   1031a:	4608      	mov	r0, r1
   1031c:	e77c      	b.n	10218 <__udivmoddi4+0xa0>
   1031e:	e9c6 e000 	strd	lr, r0, [r6]
   10322:	e7f9      	b.n	10318 <__udivmoddi4+0x1a0>
   10324:	fab3 f783 	clz	r7, r3
   10328:	b98f      	cbnz	r7, 1034e <__udivmoddi4+0x1d6>
   1032a:	4283      	cmp	r3, r0
   1032c:	d301      	bcc.n	10332 <__udivmoddi4+0x1ba>
   1032e:	4572      	cmp	r2, lr
   10330:	d808      	bhi.n	10344 <__udivmoddi4+0x1cc>
   10332:	ebbe 0402 	subs.w	r4, lr, r2
   10336:	eb60 0303 	sbc.w	r3, r0, r3
   1033a:	2001      	movs	r0, #1
   1033c:	469c      	mov	ip, r3
   1033e:	b91e      	cbnz	r6, 10348 <__udivmoddi4+0x1d0>
   10340:	2100      	movs	r1, #0
   10342:	e769      	b.n	10218 <__udivmoddi4+0xa0>
   10344:	4638      	mov	r0, r7
   10346:	e7fa      	b.n	1033e <__udivmoddi4+0x1c6>
   10348:	e9c6 4c00 	strd	r4, ip, [r6]
   1034c:	e7f8      	b.n	10340 <__udivmoddi4+0x1c8>
   1034e:	f1c7 0c20 	rsb	ip, r7, #32
   10352:	40bb      	lsls	r3, r7
   10354:	fa0e f507 	lsl.w	r5, lr, r7
   10358:	fa22 f40c 	lsr.w	r4, r2, ip
   1035c:	fa2e f10c 	lsr.w	r1, lr, ip
   10360:	40ba      	lsls	r2, r7
   10362:	431c      	orrs	r4, r3
   10364:	fa20 f30c 	lsr.w	r3, r0, ip
   10368:	40b8      	lsls	r0, r7
   1036a:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1036e:	4301      	orrs	r1, r0
   10370:	fa1f fe84 	uxth.w	lr, r4
   10374:	fbb3 f8f9 	udiv	r8, r3, r9
   10378:	fb09 3018 	mls	r0, r9, r8, r3
   1037c:	0c0b      	lsrs	r3, r1, #16
   1037e:	fb08 fa0e 	mul.w	sl, r8, lr
   10382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   10386:	459a      	cmp	sl, r3
   10388:	d940      	bls.n	1040c <__udivmoddi4+0x294>
   1038a:	18e3      	adds	r3, r4, r3
   1038c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   10390:	d204      	bcs.n	1039c <__udivmoddi4+0x224>
   10392:	459a      	cmp	sl, r3
   10394:	d902      	bls.n	1039c <__udivmoddi4+0x224>
   10396:	f1a8 0002 	sub.w	r0, r8, #2
   1039a:	4423      	add	r3, r4
   1039c:	eba3 030a 	sub.w	r3, r3, sl
   103a0:	b289      	uxth	r1, r1
   103a2:	fbb3 f8f9 	udiv	r8, r3, r9
   103a6:	fb09 3318 	mls	r3, r9, r8, r3
   103aa:	fb08 fe0e 	mul.w	lr, r8, lr
   103ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   103b2:	458e      	cmp	lr, r1
   103b4:	d92c      	bls.n	10410 <__udivmoddi4+0x298>
   103b6:	1861      	adds	r1, r4, r1
   103b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   103bc:	d204      	bcs.n	103c8 <__udivmoddi4+0x250>
   103be:	458e      	cmp	lr, r1
   103c0:	d902      	bls.n	103c8 <__udivmoddi4+0x250>
   103c2:	f1a8 0302 	sub.w	r3, r8, #2
   103c6:	4421      	add	r1, r4
   103c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   103cc:	eba1 010e 	sub.w	r1, r1, lr
   103d0:	fba0 9802 	umull	r9, r8, r0, r2
   103d4:	4541      	cmp	r1, r8
   103d6:	46ce      	mov	lr, r9
   103d8:	4643      	mov	r3, r8
   103da:	d302      	bcc.n	103e2 <__udivmoddi4+0x26a>
   103dc:	d106      	bne.n	103ec <__udivmoddi4+0x274>
   103de:	454d      	cmp	r5, r9
   103e0:	d204      	bcs.n	103ec <__udivmoddi4+0x274>
   103e2:	3801      	subs	r0, #1
   103e4:	ebb9 0e02 	subs.w	lr, r9, r2
   103e8:	eb68 0304 	sbc.w	r3, r8, r4
   103ec:	2e00      	cmp	r6, #0
   103ee:	d0a7      	beq.n	10340 <__udivmoddi4+0x1c8>
   103f0:	ebb5 020e 	subs.w	r2, r5, lr
   103f4:	eb61 0103 	sbc.w	r1, r1, r3
   103f8:	fa01 fc0c 	lsl.w	ip, r1, ip
   103fc:	fa22 f307 	lsr.w	r3, r2, r7
   10400:	40f9      	lsrs	r1, r7
   10402:	ea4c 0303 	orr.w	r3, ip, r3
   10406:	e9c6 3100 	strd	r3, r1, [r6]
   1040a:	e799      	b.n	10340 <__udivmoddi4+0x1c8>
   1040c:	4640      	mov	r0, r8
   1040e:	e7c5      	b.n	1039c <__udivmoddi4+0x224>
   10410:	4643      	mov	r3, r8
   10412:	e7d9      	b.n	103c8 <__udivmoddi4+0x250>

00010414 <strlen>:
   10414:	4603      	mov	r3, r0
   10416:	f813 2b01 	ldrb.w	r2, [r3], #1
   1041a:	2a00      	cmp	r2, #0
   1041c:	d1fb      	bne.n	10416 <strlen+0x2>
   1041e:	1a18      	subs	r0, r3, r0
   10420:	3801      	subs	r0, #1
   10422:	4770      	bx	lr

00010424 <main>:
#define LED0_NODE DT_ALIAS(led0)
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);


void main(void)
{
   10424:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10426:	4814      	ldr	r0, [pc, #80]	; (10478 <main+0x54>)
   10428:	f007 fbb2 	bl	17b90 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
   1042c:	b900      	cbnz	r0, 10430 <main+0xc>
        bool val = gpio_pin_get_dt(&button);
		/* STEP 6.2 - Update the LED to the status of the button */
        gpio_pin_set_dt(&led,val);
		k_msleep(SLEEP_TIME_MS); // Put the main thread to sleep for 100ms for power optimization
	}
   1042e:	bd10      	pop	{r4, pc}
   10430:	4811      	ldr	r0, [pc, #68]	; (10478 <main+0x54>)
   10432:	f007 fbad 	bl	17b90 <z_device_is_ready>
    if (!device_is_ready(button.port))
   10436:	2800      	cmp	r0, #0
   10438:	d0f9      	beq.n	1042e <main+0xa>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
   1043a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   1043e:	480f      	ldr	r0, [pc, #60]	; (1047c <main+0x58>)
   10440:	f005 fd22 	bl	15e88 <gpio_pin_configure_dt>
	if (ret < 0) {
   10444:	2800      	cmp	r0, #0
   10446:	dbf2      	blt.n	1042e <main+0xa>
    ret=gpio_pin_configure_dt(&button,GPIO_INPUT);
   10448:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1044c:	480c      	ldr	r0, [pc, #48]	; (10480 <main+0x5c>)
   1044e:	f005 fd1b 	bl	15e88 <gpio_pin_configure_dt>
	if (ret <0)
   10452:	2800      	cmp	r0, #0
   10454:	dbeb      	blt.n	1042e <main+0xa>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   10456:	4c08      	ldr	r4, [pc, #32]	; (10478 <main+0x54>)
   10458:	2106      	movs	r1, #6
   1045a:	4620      	mov	r0, r4
   1045c:	f005 fd2b 	bl	15eb6 <gpio_pin_get>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   10460:	1e02      	subs	r2, r0, #0
   10462:	bf18      	it	ne
   10464:	2201      	movne	r2, #1
   10466:	2102      	movs	r1, #2
   10468:	4620      	mov	r0, r4
   1046a:	f005 fd44 	bl	15ef6 <gpio_pin_set>
		k_msleep(SLEEP_TIME_MS); // Put the main thread to sleep for 100ms for power optimization
   1046e:	2064      	movs	r0, #100	; 0x64
   10470:	f005 fd4e 	bl	15f10 <k_msleep>
	while (1) {
   10474:	e7ef      	b.n	10456 <main+0x32>
   10476:	bf00      	nop
   10478:	000184ec 	.word	0x000184ec
   1047c:	00018818 	.word	0x00018818
   10480:	00018820 	.word	0x00018820

00010484 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   10484:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   10486:	4b02      	ldr	r3, [pc, #8]	; (10490 <char_out+0xc>)
   10488:	681b      	ldr	r3, [r3, #0]
   1048a:	4798      	blx	r3
}
   1048c:	bd08      	pop	{r3, pc}
   1048e:	bf00      	nop
   10490:	2000c580 	.word	0x2000c580

00010494 <__printk_hook_install>:
	_char_out = fn;
   10494:	4b01      	ldr	r3, [pc, #4]	; (1049c <__printk_hook_install+0x8>)
   10496:	6018      	str	r0, [r3, #0]
}
   10498:	4770      	bx	lr
   1049a:	bf00      	nop
   1049c:	2000c580 	.word	0x2000c580

000104a0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   104a0:	b500      	push	{lr}
   104a2:	b083      	sub	sp, #12
   104a4:	4602      	mov	r2, r0
   104a6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   104a8:	2100      	movs	r1, #0
   104aa:	9100      	str	r1, [sp, #0]
   104ac:	4802      	ldr	r0, [pc, #8]	; (104b8 <vprintk+0x18>)
   104ae:	f000 f989 	bl	107c4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   104b2:	b003      	add	sp, #12
   104b4:	f85d fb04 	ldr.w	pc, [sp], #4
   104b8:	00010485 	.word	0x00010485

000104bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   104bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   104c0:	b083      	sub	sp, #12
   104c2:	4604      	mov	r4, r0
   104c4:	4608      	mov	r0, r1
   104c6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   104c8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   104ca:	f013 0f08 	tst.w	r3, #8
   104ce:	d105      	bne.n	104dc <process_event+0x20>
   104d0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   104d4:	2300      	movs	r3, #0
   104d6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   104d8:	9301      	str	r3, [sp, #4]
}
   104da:	e055      	b.n	10588 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   104dc:	2901      	cmp	r1, #1
   104de:	d009      	beq.n	104f4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   104e0:	f043 0320 	orr.w	r3, r3, #32
   104e4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   104e6:	f385 8811 	msr	BASEPRI, r5
   104ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   104ee:	b003      	add	sp, #12
   104f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   104f4:	f043 0310 	orr.w	r3, r3, #16
   104f8:	8323      	strh	r3, [r4, #24]
   104fa:	e7f4      	b.n	104e6 <process_event+0x2a>
			evt = process_recheck(mgr);
   104fc:	4620      	mov	r0, r4
   104fe:	f005 ff66 	bl	163ce <process_recheck>
   10502:	e043      	b.n	1058c <process_event+0xd0>
			res = mgr->last_res;
   10504:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10508:	464a      	mov	r2, r9
   1050a:	4669      	mov	r1, sp
   1050c:	4620      	mov	r0, r4
   1050e:	f005 ff77 	bl	16400 <process_complete>
		onoff_transition_fn transit = NULL;
   10512:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10516:	8b23      	ldrh	r3, [r4, #24]
   10518:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1051c:	42b7      	cmp	r7, r6
   1051e:	d069      	beq.n	105f4 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10520:	68a2      	ldr	r2, [r4, #8]
   10522:	2a00      	cmp	r2, #0
   10524:	d066      	beq.n	105f4 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10526:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10528:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1052c:	8323      	strh	r3, [r4, #24]
   1052e:	f385 8811 	msr	BASEPRI, r5
   10532:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10536:	2a00      	cmp	r2, #0
   10538:	d164      	bne.n	10604 <process_event+0x148>
   1053a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1053c:	b12b      	cbz	r3, 1054a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1053e:	464b      	mov	r3, r9
   10540:	463a      	mov	r2, r7
   10542:	4669      	mov	r1, sp
   10544:	4620      	mov	r0, r4
   10546:	f005 ffd4 	bl	164f2 <notify_all>
			if (transit != NULL) {
   1054a:	f1b8 0f00 	cmp.w	r8, #0
   1054e:	d002      	beq.n	10556 <process_event+0x9a>
				transit(mgr, transition_complete);
   10550:	4934      	ldr	r1, [pc, #208]	; (10624 <process_event+0x168>)
   10552:	4620      	mov	r0, r4
   10554:	47c0      	blx	r8
	__asm__ volatile(
   10556:	f04f 0320 	mov.w	r3, #32
   1055a:	f3ef 8511 	mrs	r5, BASEPRI
   1055e:	f383 8812 	msr	BASEPRI_MAX, r3
   10562:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10566:	8b23      	ldrh	r3, [r4, #24]
   10568:	f023 0308 	bic.w	r3, r3, #8
   1056c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1056e:	8b23      	ldrh	r3, [r4, #24]
   10570:	f013 0f10 	tst.w	r3, #16
   10574:	d04c      	beq.n	10610 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10576:	f023 0310 	bic.w	r3, r3, #16
   1057a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1057c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1057e:	8b26      	ldrh	r6, [r4, #24]
   10580:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10584:	2800      	cmp	r0, #0
   10586:	d0ae      	beq.n	104e6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10588:	2802      	cmp	r0, #2
   1058a:	d0b7      	beq.n	104fc <process_event+0x40>
		if (evt == EVT_NOP) {
   1058c:	2800      	cmp	r0, #0
   1058e:	d0aa      	beq.n	104e6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10590:	3801      	subs	r0, #1
   10592:	2804      	cmp	r0, #4
   10594:	d82a      	bhi.n	105ec <process_event+0x130>
   10596:	a301      	add	r3, pc, #4	; (adr r3, 1059c <process_event+0xe0>)
   10598:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1059c:	00010505 	.word	0x00010505
   105a0:	000105ed 	.word	0x000105ed
   105a4:	000105b1 	.word	0x000105b1
   105a8:	000105c5 	.word	0x000105c5
   105ac:	000105d9 	.word	0x000105d9
			transit = mgr->transitions->start;
   105b0:	6923      	ldr	r3, [r4, #16]
   105b2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   105b6:	2106      	movs	r1, #6
   105b8:	4620      	mov	r0, r4
   105ba:	f005 fede 	bl	1637a <set_state>
		res = 0;
   105be:	f04f 0900 	mov.w	r9, #0
   105c2:	e7a8      	b.n	10516 <process_event+0x5a>
			transit = mgr->transitions->stop;
   105c4:	6923      	ldr	r3, [r4, #16]
   105c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   105ca:	2104      	movs	r1, #4
   105cc:	4620      	mov	r0, r4
   105ce:	f005 fed4 	bl	1637a <set_state>
		res = 0;
   105d2:	f04f 0900 	mov.w	r9, #0
   105d6:	e79e      	b.n	10516 <process_event+0x5a>
			transit = mgr->transitions->reset;
   105d8:	6923      	ldr	r3, [r4, #16]
   105da:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   105de:	2105      	movs	r1, #5
   105e0:	4620      	mov	r0, r4
   105e2:	f005 feca 	bl	1637a <set_state>
		res = 0;
   105e6:	f04f 0900 	mov.w	r9, #0
   105ea:	e794      	b.n	10516 <process_event+0x5a>
		if (evt == EVT_NOP) {
   105ec:	f04f 0800 	mov.w	r8, #0
   105f0:	46c1      	mov	r9, r8
   105f2:	e790      	b.n	10516 <process_event+0x5a>
   105f4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   105f6:	b10a      	cbz	r2, 105fc <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   105f8:	2200      	movs	r2, #0
   105fa:	e795      	b.n	10528 <process_event+0x6c>
		    || (transit != NULL)) {
   105fc:	f1b8 0f00 	cmp.w	r8, #0
   10600:	d192      	bne.n	10528 <process_event+0x6c>
   10602:	e7b4      	b.n	1056e <process_event+0xb2>
				notify_monitors(mgr, state, res);
   10604:	464a      	mov	r2, r9
   10606:	4639      	mov	r1, r7
   10608:	4620      	mov	r0, r4
   1060a:	f005 febe 	bl	1638a <notify_monitors>
   1060e:	e794      	b.n	1053a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10610:	f013 0f20 	tst.w	r3, #32
   10614:	d004      	beq.n	10620 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10616:	f023 0320 	bic.w	r3, r3, #32
   1061a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   1061c:	2002      	movs	r0, #2
   1061e:	e7ae      	b.n	1057e <process_event+0xc2>
		evt = EVT_NOP;
   10620:	2000      	movs	r0, #0
   10622:	e7ac      	b.n	1057e <process_event+0xc2>
   10624:	00016521 	.word	0x00016521

00010628 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10628:	4684      	mov	ip, r0
	const char *sp = *str;
   1062a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1062c:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp) != 0) {
   1062e:	e006      	b.n	1063e <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   10630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10634:	3201      	adds	r2, #1
   10636:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1063a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1063e:	7813      	ldrb	r3, [r2, #0]
   10640:	4903      	ldr	r1, [pc, #12]	; (10650 <extract_decimal+0x28>)
   10642:	5cc9      	ldrb	r1, [r1, r3]
   10644:	f011 0f04 	tst.w	r1, #4
   10648:	d1f2      	bne.n	10630 <extract_decimal+0x8>
	}
	*str = sp;
   1064a:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   1064e:	4770      	bx	lr
   10650:	00018cf2 	.word	0x00018cf2

00010654 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   10654:	4684      	mov	ip, r0
   10656:	4608      	mov	r0, r1
	bool loop = true;
   10658:	2201      	movs	r2, #1
   1065a:	e026      	b.n	106aa <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   1065c:	f89c 3000 	ldrb.w	r3, [ip]
   10660:	f043 0304 	orr.w	r3, r3, #4
   10664:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   10668:	b1f2      	cbz	r2, 106a8 <extract_flags+0x54>
			++sp;
   1066a:	3001      	adds	r0, #1
   1066c:	e01c      	b.n	106a8 <extract_flags+0x54>
			conv->flag_plus = true;
   1066e:	f89c 3000 	ldrb.w	r3, [ip]
   10672:	f043 0308 	orr.w	r3, r3, #8
   10676:	f88c 3000 	strb.w	r3, [ip]
			break;
   1067a:	e7f5      	b.n	10668 <extract_flags+0x14>
			conv->flag_space = true;
   1067c:	f89c 3000 	ldrb.w	r3, [ip]
   10680:	f043 0310 	orr.w	r3, r3, #16
   10684:	f88c 3000 	strb.w	r3, [ip]
			break;
   10688:	e7ee      	b.n	10668 <extract_flags+0x14>
			conv->flag_hash = true;
   1068a:	f89c 3000 	ldrb.w	r3, [ip]
   1068e:	f043 0320 	orr.w	r3, r3, #32
   10692:	f88c 3000 	strb.w	r3, [ip]
			break;
   10696:	e7e7      	b.n	10668 <extract_flags+0x14>
			conv->flag_zero = true;
   10698:	f89c 3000 	ldrb.w	r3, [ip]
   1069c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106a0:	f88c 3000 	strb.w	r3, [ip]
			break;
   106a4:	e7e0      	b.n	10668 <extract_flags+0x14>
		switch (*sp) {
   106a6:	2200      	movs	r2, #0
		}
	} while (loop);
   106a8:	b342      	cbz	r2, 106fc <extract_flags+0xa8>
		switch (*sp) {
   106aa:	7803      	ldrb	r3, [r0, #0]
   106ac:	3b20      	subs	r3, #32
   106ae:	2b10      	cmp	r3, #16
   106b0:	d8f9      	bhi.n	106a6 <extract_flags+0x52>
   106b2:	a101      	add	r1, pc, #4	; (adr r1, 106b8 <extract_flags+0x64>)
   106b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   106b8:	0001067d 	.word	0x0001067d
   106bc:	000106a7 	.word	0x000106a7
   106c0:	000106a7 	.word	0x000106a7
   106c4:	0001068b 	.word	0x0001068b
   106c8:	000106a7 	.word	0x000106a7
   106cc:	000106a7 	.word	0x000106a7
   106d0:	000106a7 	.word	0x000106a7
   106d4:	000106a7 	.word	0x000106a7
   106d8:	000106a7 	.word	0x000106a7
   106dc:	000106a7 	.word	0x000106a7
   106e0:	000106a7 	.word	0x000106a7
   106e4:	0001066f 	.word	0x0001066f
   106e8:	000106a7 	.word	0x000106a7
   106ec:	0001065d 	.word	0x0001065d
   106f0:	000106a7 	.word	0x000106a7
   106f4:	000106a7 	.word	0x000106a7
   106f8:	00010699 	.word	0x00010699

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   106fc:	f89c 3000 	ldrb.w	r3, [ip]
   10700:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10704:	2b44      	cmp	r3, #68	; 0x44
   10706:	d000      	beq.n	1070a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   10708:	4770      	bx	lr
		conv->flag_zero = false;
   1070a:	f89c 3000 	ldrb.w	r3, [ip]
   1070e:	f36f 1386 	bfc	r3, #6, #1
   10712:	f88c 3000 	strb.w	r3, [ip]
   10716:	e7f7      	b.n	10708 <extract_flags+0xb4>

00010718 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1071c:	4605      	mov	r5, r0
   1071e:	460c      	mov	r4, r1
   10720:	4693      	mov	fp, r2
   10722:	4699      	mov	r9, r3
   10724:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   10726:	78d0      	ldrb	r0, [r2, #3]
   10728:	4b25      	ldr	r3, [pc, #148]	; (107c0 <encode_uint+0xa8>)
   1072a:	f813 a000 	ldrb.w	sl, [r3, r0]
   1072e:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
   10732:	f006 f920 	bl	16976 <conversion_radix>
   10736:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   10738:	e015      	b.n	10766 <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1073a:	f1ba 0f01 	cmp.w	sl, #1
   1073e:	d020      	beq.n	10782 <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10740:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10742:	3257      	adds	r2, #87	; 0x57
   10744:	b2d2      	uxtb	r2, r2
   10746:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   1074a:	4632      	mov	r2, r6
   1074c:	4643      	mov	r3, r8
   1074e:	4628      	mov	r0, r5
   10750:	4621      	mov	r1, r4
   10752:	f7ff fcf7 	bl	10144 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10756:	42b5      	cmp	r5, r6
   10758:	f174 0400 	sbcs.w	r4, r4, #0
   1075c:	d315      	bcc.n	1078a <encode_uint+0x72>
   1075e:	454f      	cmp	r7, r9
   10760:	d913      	bls.n	1078a <encode_uint+0x72>
		value /= radix;
   10762:	4605      	mov	r5, r0
   10764:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10766:	f04f 0800 	mov.w	r8, #0
   1076a:	4632      	mov	r2, r6
   1076c:	4643      	mov	r3, r8
   1076e:	4628      	mov	r0, r5
   10770:	4621      	mov	r1, r4
   10772:	f7ff fce7 	bl	10144 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10776:	2a09      	cmp	r2, #9
   10778:	d8df      	bhi.n	1073a <encode_uint+0x22>
   1077a:	b2d2      	uxtb	r2, r2
   1077c:	3230      	adds	r2, #48	; 0x30
   1077e:	b2d2      	uxtb	r2, r2
   10780:	e7e1      	b.n	10746 <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10782:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10784:	3237      	adds	r2, #55	; 0x37
   10786:	b2d2      	uxtb	r2, r2
   10788:	e7dd      	b.n	10746 <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1078a:	f89b 3000 	ldrb.w	r3, [fp]
   1078e:	f013 0f20 	tst.w	r3, #32
   10792:	d003      	beq.n	1079c <encode_uint+0x84>
		if (radix == 8) {
   10794:	2e08      	cmp	r6, #8
   10796:	d004      	beq.n	107a2 <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
   10798:	2e10      	cmp	r6, #16
   1079a:	d009      	beq.n	107b0 <encode_uint+0x98>
			;
		}
	}

	return bp;
}
   1079c:	4638      	mov	r0, r7
   1079e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   107a2:	f89b 3002 	ldrb.w	r3, [fp, #2]
   107a6:	f043 0308 	orr.w	r3, r3, #8
   107aa:	f88b 3002 	strb.w	r3, [fp, #2]
   107ae:	e7f5      	b.n	1079c <encode_uint+0x84>
			conv->altform_0c = true;
   107b0:	f89b 3002 	ldrb.w	r3, [fp, #2]
   107b4:	f043 0310 	orr.w	r3, r3, #16
   107b8:	f88b 3002 	strb.w	r3, [fp, #2]
   107bc:	e7ee      	b.n	1079c <encode_uint+0x84>
   107be:	bf00      	nop
   107c0:	00018cf2 	.word	0x00018cf2

000107c4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   107c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107c8:	b091      	sub	sp, #68	; 0x44
   107ca:	4606      	mov	r6, r0
   107cc:	460d      	mov	r5, r1
   107ce:	4691      	mov	r9, r2
   107d0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   107d2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   107d4:	f899 0000 	ldrb.w	r0, [r9]
   107d8:	2800      	cmp	r0, #0
   107da:	f000 82b9 	beq.w	10d50 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   107de:	2825      	cmp	r0, #37	; 0x25
   107e0:	d008      	beq.n	107f4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   107e2:	f109 0901 	add.w	r9, r9, #1
   107e6:	4629      	mov	r1, r5
   107e8:	47b0      	blx	r6
   107ea:	2800      	cmp	r0, #0
   107ec:	f2c0 82b1 	blt.w	10d52 <z_cbvprintf_impl+0x58e>
   107f0:	3401      	adds	r4, #1
			continue;
   107f2:	e7ef      	b.n	107d4 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   107f4:	2300      	movs	r3, #0
   107f6:	9304      	str	r3, [sp, #16]
   107f8:	9305      	str	r3, [sp, #20]
   107fa:	9306      	str	r3, [sp, #24]
   107fc:	9307      	str	r3, [sp, #28]
   107fe:	9308      	str	r3, [sp, #32]
   10800:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   10802:	4649      	mov	r1, r9
   10804:	a806      	add	r0, sp, #24
   10806:	f006 f894 	bl	16932 <extract_conversion>
   1080a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   1080c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10810:	f013 0f01 	tst.w	r3, #1
   10814:	f000 8097 	beq.w	10946 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   10818:	9b03      	ldr	r3, [sp, #12]
   1081a:	1d1a      	adds	r2, r3, #4
   1081c:	9203      	str	r2, [sp, #12]
   1081e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   10820:	2f00      	cmp	r7, #0
   10822:	f2c0 8088 	blt.w	10936 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10826:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1082a:	f013 0f04 	tst.w	r3, #4
   1082e:	f000 809c 	beq.w	1096a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   10832:	9b03      	ldr	r3, [sp, #12]
   10834:	1d1a      	adds	r2, r3, #4
   10836:	9203      	str	r2, [sp, #12]
   10838:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   1083c:	f1ba 0f00 	cmp.w	sl, #0
   10840:	f2c0 808a 	blt.w	10958 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   10844:	2300      	movs	r3, #0
   10846:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   10848:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1084a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1084e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   10852:	f89d 1019 	ldrb.w	r1, [sp, #25]
   10856:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1085a:	2b01      	cmp	r3, #1
   1085c:	f000 808e 	beq.w	1097c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   10860:	2b02      	cmp	r3, #2
   10862:	f000 80d3 	beq.w	10a0c <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   10866:	2b04      	cmp	r3, #4
   10868:	f000 8124 	beq.w	10ab4 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   1086c:	2b03      	cmp	r3, #3
   1086e:	f000 813b 	beq.w	10ae8 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   10872:	f89d 8018 	ldrb.w	r8, [sp, #24]
   10876:	f018 0b03 	ands.w	fp, r8, #3
   1087a:	f040 813b 	bne.w	10af4 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   1087e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10882:	3b25      	subs	r3, #37	; 0x25
   10884:	2b53      	cmp	r3, #83	; 0x53
   10886:	f200 81ca 	bhi.w	10c1e <z_cbvprintf_impl+0x45a>
   1088a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1088e:	0140      	.short	0x0140
   10890:	01c801c8 	.word	0x01c801c8
   10894:	01c801c8 	.word	0x01c801c8
   10898:	01c801c8 	.word	0x01c801c8
   1089c:	01c801c8 	.word	0x01c801c8
   108a0:	01c801c8 	.word	0x01c801c8
   108a4:	01c801c8 	.word	0x01c801c8
   108a8:	01c801c8 	.word	0x01c801c8
   108ac:	01c801c8 	.word	0x01c801c8
   108b0:	01c801c8 	.word	0x01c801c8
   108b4:	01c801c8 	.word	0x01c801c8
   108b8:	01c801c8 	.word	0x01c801c8
   108bc:	01c801c8 	.word	0x01c801c8
   108c0:	01c801c8 	.word	0x01c801c8
   108c4:	01c801c8 	.word	0x01c801c8
   108c8:	01c801c8 	.word	0x01c801c8
   108cc:	01c801c8 	.word	0x01c801c8
   108d0:	01c801c8 	.word	0x01c801c8
   108d4:	01c801c8 	.word	0x01c801c8
   108d8:	01c801c8 	.word	0x01c801c8
   108dc:	01c801c8 	.word	0x01c801c8
   108e0:	01c801c8 	.word	0x01c801c8
   108e4:	01c801c8 	.word	0x01c801c8
   108e8:	01c801c8 	.word	0x01c801c8
   108ec:	01c801c8 	.word	0x01c801c8
   108f0:	01c801c8 	.word	0x01c801c8
   108f4:	01c80181 	.word	0x01c80181
   108f8:	01c801c8 	.word	0x01c801c8
   108fc:	01c801c8 	.word	0x01c801c8
   10900:	01c801c8 	.word	0x01c801c8
   10904:	01c801c8 	.word	0x01c801c8
   10908:	015e01c8 	.word	0x015e01c8
   1090c:	01c80167 	.word	0x01c80167
   10910:	01c801c8 	.word	0x01c801c8
   10914:	016701c8 	.word	0x016701c8
   10918:	01c801c8 	.word	0x01c801c8
   1091c:	01c801c8 	.word	0x01c801c8
   10920:	018101bd 	.word	0x018101bd
   10924:	01c801a1 	.word	0x01c801a1
   10928:	014d01c8 	.word	0x014d01c8
   1092c:	018101c8 	.word	0x018101c8
   10930:	01c801c8 	.word	0x01c801c8
   10934:	0181      	.short	0x0181
				conv->flag_dash = true;
   10936:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1093a:	f043 0304 	orr.w	r3, r3, #4
   1093e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   10942:	427f      	negs	r7, r7
   10944:	e76f      	b.n	10826 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   10946:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1094a:	2b00      	cmp	r3, #0
   1094c:	db02      	blt.n	10954 <z_cbvprintf_impl+0x190>
		int width = -1;
   1094e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10952:	e768      	b.n	10826 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   10954:	9f07      	ldr	r7, [sp, #28]
   10956:	e766      	b.n	10826 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   10958:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1095c:	f36f 0341 	bfc	r3, #1, #1
   10960:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   10964:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   10968:	e76c      	b.n	10844 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   1096a:	f013 0f02 	tst.w	r3, #2
   1096e:	d002      	beq.n	10976 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   10970:	f8dd a020 	ldr.w	sl, [sp, #32]
   10974:	e766      	b.n	10844 <z_cbvprintf_impl+0x80>
		int precision = -1;
   10976:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1097a:	e763      	b.n	10844 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   1097c:	1ecb      	subs	r3, r1, #3
   1097e:	2b04      	cmp	r3, #4
   10980:	d804      	bhi.n	1098c <z_cbvprintf_impl+0x1c8>
   10982:	e8df f003 	tbb	[pc, r3]
   10986:	1d0b      	.short	0x1d0b
   10988:	3529      	.short	0x3529
   1098a:	35          	.byte	0x35
   1098b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1098c:	9b03      	ldr	r3, [sp, #12]
   1098e:	1d1a      	adds	r2, r3, #4
   10990:	9203      	str	r2, [sp, #12]
   10992:	681b      	ldr	r3, [r3, #0]
   10994:	17da      	asrs	r2, r3, #31
   10996:	9304      	str	r3, [sp, #16]
   10998:	9205      	str	r2, [sp, #20]
				break;
   1099a:	e006      	b.n	109aa <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   1099c:	9b03      	ldr	r3, [sp, #12]
   1099e:	1d1a      	adds	r2, r3, #4
   109a0:	9203      	str	r2, [sp, #12]
   109a2:	681b      	ldr	r3, [r3, #0]
   109a4:	17da      	asrs	r2, r3, #31
   109a6:	9304      	str	r3, [sp, #16]
   109a8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   109aa:	2901      	cmp	r1, #1
   109ac:	d028      	beq.n	10a00 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   109ae:	2902      	cmp	r1, #2
   109b0:	f47f af5f 	bne.w	10872 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   109b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   109b8:	17da      	asrs	r2, r3, #31
   109ba:	9304      	str	r3, [sp, #16]
   109bc:	9205      	str	r2, [sp, #20]
   109be:	e758      	b.n	10872 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   109c0:	9b03      	ldr	r3, [sp, #12]
   109c2:	3307      	adds	r3, #7
   109c4:	f023 0307 	bic.w	r3, r3, #7
   109c8:	f103 0208 	add.w	r2, r3, #8
   109cc:	9203      	str	r2, [sp, #12]
   109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   109d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   109d6:	e7e8      	b.n	109aa <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   109d8:	9b03      	ldr	r3, [sp, #12]
   109da:	3307      	adds	r3, #7
   109dc:	f023 0307 	bic.w	r3, r3, #7
   109e0:	f103 0208 	add.w	r2, r3, #8
   109e4:	9203      	str	r2, [sp, #12]
   109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   109ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   109ee:	e7dc      	b.n	109aa <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   109f0:	9b03      	ldr	r3, [sp, #12]
   109f2:	1d1a      	adds	r2, r3, #4
   109f4:	9203      	str	r2, [sp, #12]
   109f6:	681b      	ldr	r3, [r3, #0]
   109f8:	17da      	asrs	r2, r3, #31
				value->sint =
   109fa:	9304      	str	r3, [sp, #16]
   109fc:	9205      	str	r2, [sp, #20]
				break;
   109fe:	e7d4      	b.n	109aa <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   10a00:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   10a04:	17da      	asrs	r2, r3, #31
   10a06:	9304      	str	r3, [sp, #16]
   10a08:	9205      	str	r2, [sp, #20]
   10a0a:	e732      	b.n	10872 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   10a0c:	1ecb      	subs	r3, r1, #3
   10a0e:	2b04      	cmp	r3, #4
   10a10:	d804      	bhi.n	10a1c <z_cbvprintf_impl+0x258>
   10a12:	e8df f003 	tbb	[pc, r3]
   10a16:	1f0b      	.short	0x1f0b
   10a18:	4135      	.short	0x4135
   10a1a:	41          	.byte	0x41
   10a1b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   10a1c:	9b03      	ldr	r3, [sp, #12]
   10a1e:	1d1a      	adds	r2, r3, #4
   10a20:	9203      	str	r2, [sp, #12]
   10a22:	681b      	ldr	r3, [r3, #0]
   10a24:	9304      	str	r3, [sp, #16]
   10a26:	2300      	movs	r3, #0
   10a28:	9305      	str	r3, [sp, #20]
				break;
   10a2a:	e01e      	b.n	10a6a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   10a2c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   10a30:	2b63      	cmp	r3, #99	; 0x63
   10a32:	d007      	beq.n	10a44 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   10a34:	9b03      	ldr	r3, [sp, #12]
   10a36:	1d1a      	adds	r2, r3, #4
   10a38:	9203      	str	r2, [sp, #12]
   10a3a:	681b      	ldr	r3, [r3, #0]
   10a3c:	9304      	str	r3, [sp, #16]
   10a3e:	2300      	movs	r3, #0
   10a40:	9305      	str	r3, [sp, #20]
   10a42:	e012      	b.n	10a6a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   10a44:	9b03      	ldr	r3, [sp, #12]
   10a46:	1d1a      	adds	r2, r3, #4
   10a48:	9203      	str	r2, [sp, #12]
   10a4a:	681b      	ldr	r3, [r3, #0]
   10a4c:	9304      	str	r3, [sp, #16]
   10a4e:	2300      	movs	r3, #0
   10a50:	9305      	str	r3, [sp, #20]
   10a52:	e00a      	b.n	10a6a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   10a54:	9b03      	ldr	r3, [sp, #12]
   10a56:	3307      	adds	r3, #7
   10a58:	f023 0307 	bic.w	r3, r3, #7
   10a5c:	f103 0208 	add.w	r2, r3, #8
   10a60:	9203      	str	r2, [sp, #12]
   10a62:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10a66:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   10a6a:	2901      	cmp	r1, #1
   10a6c:	d01c      	beq.n	10aa8 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   10a6e:	2902      	cmp	r1, #2
   10a70:	f47f aeff 	bne.w	10872 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   10a74:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10a78:	9304      	str	r3, [sp, #16]
   10a7a:	2300      	movs	r3, #0
   10a7c:	9305      	str	r3, [sp, #20]
   10a7e:	e6f8      	b.n	10872 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   10a80:	9b03      	ldr	r3, [sp, #12]
   10a82:	3307      	adds	r3, #7
   10a84:	f023 0307 	bic.w	r3, r3, #7
   10a88:	f103 0208 	add.w	r2, r3, #8
   10a8c:	9203      	str	r2, [sp, #12]
   10a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   10a96:	e7e8      	b.n	10a6a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   10a98:	9b03      	ldr	r3, [sp, #12]
   10a9a:	1d1a      	adds	r2, r3, #4
   10a9c:	9203      	str	r2, [sp, #12]
   10a9e:	681b      	ldr	r3, [r3, #0]
				value->uint =
   10aa0:	9304      	str	r3, [sp, #16]
   10aa2:	2300      	movs	r3, #0
   10aa4:	9305      	str	r3, [sp, #20]
				break;
   10aa6:	e7e0      	b.n	10a6a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   10aa8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   10aac:	9304      	str	r3, [sp, #16]
   10aae:	2300      	movs	r3, #0
   10ab0:	9305      	str	r3, [sp, #20]
   10ab2:	e6de      	b.n	10872 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   10ab4:	2908      	cmp	r1, #8
   10ab6:	d00b      	beq.n	10ad0 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   10ab8:	9b03      	ldr	r3, [sp, #12]
   10aba:	3307      	adds	r3, #7
   10abc:	f023 0307 	bic.w	r3, r3, #7
   10ac0:	f103 0208 	add.w	r2, r3, #8
   10ac4:	9203      	str	r2, [sp, #12]
   10ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10ace:	e6d0      	b.n	10872 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   10ad0:	9b03      	ldr	r3, [sp, #12]
   10ad2:	3307      	adds	r3, #7
   10ad4:	f023 0307 	bic.w	r3, r3, #7
   10ad8:	f103 0208 	add.w	r2, r3, #8
   10adc:	9203      	str	r2, [sp, #12]
   10ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10ae6:	e6c4      	b.n	10872 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   10ae8:	9b03      	ldr	r3, [sp, #12]
   10aea:	1d1a      	adds	r2, r3, #4
   10aec:	9203      	str	r2, [sp, #12]
   10aee:	681b      	ldr	r3, [r3, #0]
   10af0:	9304      	str	r3, [sp, #16]
   10af2:	e6be      	b.n	10872 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   10af4:	9f02      	ldr	r7, [sp, #8]
   10af6:	463b      	mov	r3, r7
   10af8:	464a      	mov	r2, r9
   10afa:	4629      	mov	r1, r5
   10afc:	4630      	mov	r0, r6
   10afe:	f005 ff6e 	bl	169de <outs>
   10b02:	2800      	cmp	r0, #0
   10b04:	f2c0 8125 	blt.w	10d52 <z_cbvprintf_impl+0x58e>
   10b08:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   10b0a:	46b9      	mov	r9, r7
			continue;
   10b0c:	e662      	b.n	107d4 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   10b0e:	4629      	mov	r1, r5
   10b10:	2025      	movs	r0, #37	; 0x25
   10b12:	47b0      	blx	r6
   10b14:	2800      	cmp	r0, #0
   10b16:	f2c0 811c 	blt.w	10d52 <z_cbvprintf_impl+0x58e>
   10b1a:	3401      	adds	r4, #1
		char sign = 0;
   10b1c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   10b1e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   10b22:	f04f 0900 	mov.w	r9, #0
			break;
   10b26:	e07f      	b.n	10c28 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   10b28:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   10b2c:	f1ba 0f00 	cmp.w	sl, #0
   10b30:	da06      	bge.n	10b40 <z_cbvprintf_impl+0x37c>
				len = strnlen(bps, precision);
			} else {
				len = strlen(bps);
   10b32:	4648      	mov	r0, r9
   10b34:	f7ff fc6e 	bl	10414 <strlen>
			}

			bpe = bps + len;
   10b38:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   10b3c:	46d8      	mov	r8, fp
			precision = -1;

			break;
   10b3e:	e073      	b.n	10c28 <z_cbvprintf_impl+0x464>
				len = strnlen(bps, precision);
   10b40:	4651      	mov	r1, sl
   10b42:	4648      	mov	r0, r9
   10b44:	f007 fb26 	bl	18194 <strnlen>
   10b48:	e7f6      	b.n	10b38 <z_cbvprintf_impl+0x374>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10b4a:	9b04      	ldr	r3, [sp, #16]
   10b4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   10b50:	46d8      	mov	r8, fp
			bpe = buf + 1;
   10b52:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   10b56:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   10b5a:	e065      	b.n	10c28 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   10b5c:	f018 0f08 	tst.w	r8, #8
   10b60:	d105      	bne.n	10b6e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   10b62:	f018 0810 	ands.w	r8, r8, #16
   10b66:	d004      	beq.n	10b72 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   10b68:	f04f 0820 	mov.w	r8, #32
   10b6c:	e001      	b.n	10b72 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   10b6e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   10b72:	9a04      	ldr	r2, [sp, #16]
   10b74:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   10b76:	2b00      	cmp	r3, #0
   10b78:	db02      	blt.n	10b80 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   10b7a:	9204      	str	r2, [sp, #16]
   10b7c:	9305      	str	r3, [sp, #20]
   10b7e:	e008      	b.n	10b92 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   10b80:	4252      	negs	r2, r2
   10b82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10b86:	9204      	str	r2, [sp, #16]
   10b88:	9305      	str	r3, [sp, #20]
				sign = '-';
   10b8a:	f04f 082d 	mov.w	r8, #45	; 0x2d
   10b8e:	e000      	b.n	10b92 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   10b90:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   10b92:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10b96:	9300      	str	r3, [sp, #0]
   10b98:	ab0a      	add	r3, sp, #40	; 0x28
   10b9a:	aa06      	add	r2, sp, #24
   10b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10ba0:	f7ff fdba 	bl	10718 <encode_uint>
   10ba4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   10ba6:	f1ba 0f00 	cmp.w	sl, #0
   10baa:	db6c      	blt.n	10c86 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   10bac:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10bb0:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   10bb4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   10bb8:	f36f 1286 	bfc	r2, #6, #1
   10bbc:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   10bc0:	459a      	cmp	sl, r3
   10bc2:	d963      	bls.n	10c8c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   10bc4:	ebaa 0303 	sub.w	r3, sl, r3
   10bc8:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   10bca:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10bce:	e02b      	b.n	10c28 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   10bd0:	9804      	ldr	r0, [sp, #16]
   10bd2:	b928      	cbnz	r0, 10be0 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   10bd4:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   10bd6:	f8df a180 	ldr.w	sl, [pc, #384]	; 10d58 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   10bda:	f1aa 0905 	sub.w	r9, sl, #5
   10bde:	e023      	b.n	10c28 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10be0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10be4:	9300      	str	r3, [sp, #0]
   10be6:	ab0a      	add	r3, sp, #40	; 0x28
   10be8:	aa06      	add	r2, sp, #24
   10bea:	2100      	movs	r1, #0
   10bec:	f7ff fd94 	bl	10718 <encode_uint>
   10bf0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   10bf2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10bf6:	f043 0310 	orr.w	r3, r3, #16
   10bfa:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   10bfe:	2378      	movs	r3, #120	; 0x78
   10c00:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   10c04:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   10c06:	e7ce      	b.n	10ba6 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   10c08:	4622      	mov	r2, r4
   10c0a:	9904      	ldr	r1, [sp, #16]
   10c0c:	a806      	add	r0, sp, #24
   10c0e:	f005 fec7 	bl	169a0 <store_count>
		char sign = 0;
   10c12:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   10c14:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   10c18:	f04f 0900 	mov.w	r9, #0
			}

			break;
   10c1c:	e004      	b.n	10c28 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   10c1e:	46d8      	mov	r8, fp
   10c20:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10c24:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   10c28:	f1b9 0f00 	cmp.w	r9, #0
   10c2c:	f000 808d 	beq.w	10d4a <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   10c30:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   10c34:	f1b8 0f00 	cmp.w	r8, #0
   10c38:	d000      	beq.n	10c3c <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   10c3a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   10c3c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   10c40:	f011 0f10 	tst.w	r1, #16
   10c44:	d025      	beq.n	10c92 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   10c46:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   10c48:	9b07      	ldr	r3, [sp, #28]
   10c4a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   10c4c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10c50:	d001      	beq.n	10c56 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   10c52:	9a08      	ldr	r2, [sp, #32]
   10c54:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   10c56:	2f00      	cmp	r7, #0
   10c58:	dd31      	ble.n	10cbe <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   10c5a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   10c5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10c60:	f013 0f04 	tst.w	r3, #4
   10c64:	d12b      	bne.n	10cbe <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   10c66:	f013 0f40 	tst.w	r3, #64	; 0x40
   10c6a:	d017      	beq.n	10c9c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   10c6c:	f1b8 0f00 	cmp.w	r8, #0
   10c70:	d017      	beq.n	10ca2 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   10c72:	4629      	mov	r1, r5
   10c74:	4640      	mov	r0, r8
   10c76:	47b0      	blx	r6
   10c78:	2800      	cmp	r0, #0
   10c7a:	db6a      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10c7c:	3401      	adds	r4, #1
						sign = 0;
   10c7e:	46d8      	mov	r8, fp
					}
					pad = '0';
   10c80:	f04f 0b30 	mov.w	fp, #48	; 0x30
   10c84:	e00f      	b.n	10ca6 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   10c86:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10c8a:	e7cd      	b.n	10c28 <z_cbvprintf_impl+0x464>
   10c8c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10c90:	e7ca      	b.n	10c28 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   10c92:	f011 0f08 	tst.w	r1, #8
   10c96:	d0d7      	beq.n	10c48 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   10c98:	3201      	adds	r2, #1
   10c9a:	e7d5      	b.n	10c48 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   10c9c:	f04f 0b20 	mov.w	fp, #32
   10ca0:	e001      	b.n	10ca6 <z_cbvprintf_impl+0x4e2>
					pad = '0';
   10ca2:	f04f 0b30 	mov.w	fp, #48	; 0x30
   10ca6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   10ca8:	1e5f      	subs	r7, r3, #1
   10caa:	2b00      	cmp	r3, #0
   10cac:	dd07      	ble.n	10cbe <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   10cae:	4629      	mov	r1, r5
   10cb0:	4658      	mov	r0, fp
   10cb2:	47b0      	blx	r6
   10cb4:	2800      	cmp	r0, #0
   10cb6:	db4c      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10cb8:	3401      	adds	r4, #1
				while (width-- > 0) {
   10cba:	463b      	mov	r3, r7
   10cbc:	e7f4      	b.n	10ca8 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   10cbe:	f1b8 0f00 	cmp.w	r8, #0
   10cc2:	d005      	beq.n	10cd0 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   10cc4:	4629      	mov	r1, r5
   10cc6:	4640      	mov	r0, r8
   10cc8:	47b0      	blx	r6
   10cca:	2800      	cmp	r0, #0
   10ccc:	db41      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10cce:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   10cd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10cd4:	f3c3 1200 	ubfx	r2, r3, #4, #1
   10cd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10cdc:	431a      	orrs	r2, r3
   10cde:	d005      	beq.n	10cec <z_cbvprintf_impl+0x528>
				OUTC('0');
   10ce0:	4629      	mov	r1, r5
   10ce2:	2030      	movs	r0, #48	; 0x30
   10ce4:	47b0      	blx	r6
   10ce6:	2800      	cmp	r0, #0
   10ce8:	db33      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10cea:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   10cec:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10cf0:	f013 0f10 	tst.w	r3, #16
   10cf4:	d006      	beq.n	10d04 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   10cf6:	4629      	mov	r1, r5
   10cf8:	f89d 001b 	ldrb.w	r0, [sp, #27]
   10cfc:	47b0      	blx	r6
   10cfe:	2800      	cmp	r0, #0
   10d00:	db27      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10d02:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   10d04:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   10d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   10d0a:	2b00      	cmp	r3, #0
   10d0c:	dd07      	ble.n	10d1e <z_cbvprintf_impl+0x55a>
				OUTC('0');
   10d0e:	4629      	mov	r1, r5
   10d10:	2030      	movs	r0, #48	; 0x30
   10d12:	47b0      	blx	r6
   10d14:	2800      	cmp	r0, #0
   10d16:	db1c      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10d18:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   10d1a:	4643      	mov	r3, r8
   10d1c:	e7f3      	b.n	10d06 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   10d1e:	4653      	mov	r3, sl
   10d20:	464a      	mov	r2, r9
   10d22:	4629      	mov	r1, r5
   10d24:	4630      	mov	r0, r6
   10d26:	f005 fe5a 	bl	169de <outs>
   10d2a:	2800      	cmp	r0, #0
   10d2c:	db11      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10d2e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   10d30:	2f00      	cmp	r7, #0
   10d32:	dd07      	ble.n	10d44 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   10d34:	4629      	mov	r1, r5
   10d36:	2020      	movs	r0, #32
   10d38:	47b0      	blx	r6
   10d3a:	2800      	cmp	r0, #0
   10d3c:	db09      	blt.n	10d52 <z_cbvprintf_impl+0x58e>
   10d3e:	3401      	adds	r4, #1
			--width;
   10d40:	3f01      	subs	r7, #1
   10d42:	e7f5      	b.n	10d30 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   10d44:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10d48:	e544      	b.n	107d4 <z_cbvprintf_impl+0x10>
   10d4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10d4e:	e541      	b.n	107d4 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   10d50:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   10d52:	b011      	add	sp, #68	; 0x44
   10d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d58:	00018841 	.word	0x00018841

00010d5c <nordicsemi_nrf91_init>:
   10d5c:	f04f 0220 	mov.w	r2, #32
   10d60:	f3ef 8311 	mrs	r3, BASEPRI
   10d64:	f382 8812 	msr	BASEPRI_MAX, r2
   10d68:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10d6c:	4a04      	ldr	r2, [pc, #16]	; (10d80 <nordicsemi_nrf91_init+0x24>)
   10d6e:	2101      	movs	r1, #1
   10d70:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   10d74:	f383 8811 	msr	BASEPRI, r3
   10d78:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10d7c:	2000      	movs	r0, #0
   10d7e:	4770      	bx	lr
   10d80:	40039000 	.word	0x40039000

00010d84 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   10d84:	b130      	cbz	r0, 10d94 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   10d86:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   10d88:	4b03      	ldr	r3, [pc, #12]	; (10d98 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   10d8a:	0180      	lsls	r0, r0, #6
   10d8c:	f043 0301 	orr.w	r3, r3, #1
   10d90:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   10d92:	bd08      	pop	{r3, pc}
   10d94:	4770      	bx	lr
   10d96:	bf00      	nop
   10d98:	00018810 	.word	0x00018810

00010d9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10d9c:	f006 bcab 	b.w	176f6 <SystemInit>

00010da0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10da0:	b570      	push	{r4, r5, r6, lr}
   10da2:	4605      	mov	r5, r0
	__asm__ volatile(
   10da4:	f04f 0320 	mov.w	r3, #32
   10da8:	f3ef 8611 	mrs	r6, BASEPRI
   10dac:	f383 8812 	msr	BASEPRI_MAX, r3
   10db0:	f3bf 8f6f 	isb	sy
   10db4:	4b0e      	ldr	r3, [pc, #56]	; (10df0 <pm_state_notify+0x50>)
   10db6:	681c      	ldr	r4, [r3, #0]
   10db8:	e00d      	b.n	10dd6 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   10dba:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   10dbc:	b13a      	cbz	r2, 10dce <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10dbe:	4b0d      	ldr	r3, [pc, #52]	; (10df4 <pm_state_notify+0x54>)
   10dc0:	7c1b      	ldrb	r3, [r3, #16]
   10dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10dc6:	490c      	ldr	r1, [pc, #48]	; (10df8 <pm_state_notify+0x58>)
   10dc8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   10dcc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10dce:	4623      	mov	r3, r4
	return node->next;
   10dd0:	6824      	ldr	r4, [r4, #0]
   10dd2:	b104      	cbz	r4, 10dd6 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   10dd4:	b123      	cbz	r3, 10de0 <pm_state_notify+0x40>
   10dd6:	b12c      	cbz	r4, 10de4 <pm_state_notify+0x44>
		if (entering_state) {
   10dd8:	2d00      	cmp	r5, #0
   10dda:	d0ee      	beq.n	10dba <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   10ddc:	6862      	ldr	r2, [r4, #4]
   10dde:	e7ed      	b.n	10dbc <pm_state_notify+0x1c>
   10de0:	461c      	mov	r4, r3
   10de2:	e7f8      	b.n	10dd6 <pm_state_notify+0x36>
	__asm__ volatile(
   10de4:	f386 8811 	msr	BASEPRI, r6
   10de8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10dec:	bd70      	pop	{r4, r5, r6, pc}
   10dee:	bf00      	nop
   10df0:	2000c8b0 	.word	0x2000c8b0
   10df4:	2000cdf4 	.word	0x2000cdf4
   10df8:	2000c8a4 	.word	0x2000c8a4

00010dfc <pm_exit_pos_ops>:
{
   10dfc:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   10dfe:	4b06      	ldr	r3, [pc, #24]	; (10e18 <pm_exit_pos_ops+0x1c>)
   10e00:	b123      	cbz	r3, 10e0c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10e02:	7841      	ldrb	r1, [r0, #1]
   10e04:	7800      	ldrb	r0, [r0, #0]
   10e06:	f005 fe14 	bl	16a32 <pm_state_exit_post_ops>
}
   10e0a:	bd08      	pop	{r3, pc}
   10e0c:	2300      	movs	r3, #0
   10e0e:	f383 8811 	msr	BASEPRI, r3
   10e12:	f3bf 8f6f 	isb	sy
   10e16:	e7f8      	b.n	10e0a <pm_exit_pos_ops+0xe>
   10e18:	00016a33 	.word	0x00016a33

00010e1c <pm_system_resume>:

void pm_system_resume(void)
{
   10e1c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10e1e:	4b0e      	ldr	r3, [pc, #56]	; (10e58 <pm_system_resume+0x3c>)
   10e20:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10e22:	4621      	mov	r1, r4
   10e24:	480d      	ldr	r0, [pc, #52]	; (10e5c <pm_system_resume+0x40>)
   10e26:	f005 fe0a 	bl	16a3e <atomic_test_and_clear_bit>
   10e2a:	b900      	cbnz	r0, 10e2e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   10e2c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   10e2e:	0065      	lsls	r5, r4, #1
   10e30:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   10e34:	4e0a      	ldr	r6, [pc, #40]	; (10e60 <pm_system_resume+0x44>)
   10e36:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   10e3a:	f7ff ffdf 	bl	10dfc <pm_exit_pos_ops>
		pm_state_notify(false);
   10e3e:	2000      	movs	r0, #0
   10e40:	f7ff ffae 	bl	10da0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10e44:	192b      	adds	r3, r5, r4
   10e46:	0099      	lsls	r1, r3, #2
   10e48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   10e4c:	2200      	movs	r2, #0
   10e4e:	5072      	str	r2, [r6, r1]
   10e50:	605a      	str	r2, [r3, #4]
   10e52:	609a      	str	r2, [r3, #8]
}
   10e54:	e7ea      	b.n	10e2c <pm_system_resume+0x10>
   10e56:	bf00      	nop
   10e58:	2000cdf4 	.word	0x2000cdf4
   10e5c:	2000c8b8 	.word	0x2000c8b8
   10e60:	2000c8a4 	.word	0x2000c8a4

00010e64 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e66:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   10e68:	4b38      	ldr	r3, [pc, #224]	; (10f4c <pm_system_suspend+0xe8>)
   10e6a:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
   10e6c:	f04f 0320 	mov.w	r3, #32
   10e70:	f3ef 8611 	mrs	r6, BASEPRI
   10e74:	f383 8812 	msr	BASEPRI_MAX, r3
   10e78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10e7c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10e80:	4b33      	ldr	r3, [pc, #204]	; (10f50 <pm_system_suspend+0xec>)
   10e82:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   10e86:	2b00      	cmp	r3, #0
   10e88:	d039      	beq.n	10efe <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10e8a:	4b32      	ldr	r3, [pc, #200]	; (10f54 <pm_system_suspend+0xf0>)
   10e8c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   10e90:	4f2f      	ldr	r7, [pc, #188]	; (10f50 <pm_system_suspend+0xec>)
   10e92:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   10e96:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   10e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10e9e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10ea2:	2300      	movs	r3, #0
   10ea4:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   10ea8:	f386 8811 	msr	BASEPRI, r6
   10eac:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10eb0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   10eb4:	4a27      	ldr	r2, [pc, #156]	; (10f54 <pm_system_suspend+0xf0>)
   10eb6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d044      	beq.n	10f48 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10ebe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   10ec2:	d12b      	bne.n	10f1c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10ec4:	f003 ffaa 	bl	14e1c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10ec8:	2001      	movs	r0, #1
   10eca:	f7ff ff69 	bl	10da0 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   10ece:	4621      	mov	r1, r4
   10ed0:	4821      	ldr	r0, [pc, #132]	; (10f58 <pm_system_suspend+0xf4>)
   10ed2:	f005 fdcc 	bl	16a6e <atomic_set_bit>
	if (pm_state_set != NULL) {
   10ed6:	4b21      	ldr	r3, [pc, #132]	; (10f5c <pm_system_suspend+0xf8>)
   10ed8:	b15b      	cbz	r3, 10ef2 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   10eda:	4a1e      	ldr	r2, [pc, #120]	; (10f54 <pm_system_suspend+0xf0>)
   10edc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   10ee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10ee4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10ee8:	7859      	ldrb	r1, [r3, #1]
   10eea:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   10eee:	f005 fd98 	bl	16a22 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10ef2:	f7ff ff93 	bl	10e1c <pm_system_resume>
	k_sched_unlock();
   10ef6:	f004 f97d 	bl	151f4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10efa:	2001      	movs	r0, #1
}
   10efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   10efe:	4601      	mov	r1, r0
   10f00:	4620      	mov	r0, r4
   10f02:	f000 f831 	bl	10f68 <pm_policy_next_state>
		if (info != NULL) {
   10f06:	2800      	cmp	r0, #0
   10f08:	d0ce      	beq.n	10ea8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   10f0a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   10f0e:	4b11      	ldr	r3, [pc, #68]	; (10f54 <pm_system_suspend+0xf0>)
   10f10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10f14:	c807      	ldmia	r0, {r0, r1, r2}
   10f16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   10f1a:	e7c5      	b.n	10ea8 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   10f1c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10f20:	4b0c      	ldr	r3, [pc, #48]	; (10f54 <pm_system_suspend+0xf0>)
   10f22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10f26:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10f28:	0c41      	lsrs	r1, r0, #17
   10f2a:	03c0      	lsls	r0, r0, #15
   10f2c:	4b0c      	ldr	r3, [pc, #48]	; (10f60 <pm_system_suspend+0xfc>)
   10f2e:	18c0      	adds	r0, r0, r3
   10f30:	4a0c      	ldr	r2, [pc, #48]	; (10f64 <pm_system_suspend+0x100>)
   10f32:	f04f 0300 	mov.w	r3, #0
   10f36:	f141 0100 	adc.w	r1, r1, #0
   10f3a:	f7ff f903 	bl	10144 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
   10f3e:	2101      	movs	r1, #1
   10f40:	1a28      	subs	r0, r5, r0
   10f42:	f001 fc4d 	bl	127e0 <sys_clock_set_timeout>
   10f46:	e7bd      	b.n	10ec4 <pm_system_suspend+0x60>
		return false;
   10f48:	2000      	movs	r0, #0
   10f4a:	e7d7      	b.n	10efc <pm_system_suspend+0x98>
   10f4c:	2000cdf4 	.word	0x2000cdf4
   10f50:	2000c898 	.word	0x2000c898
   10f54:	2000c8a4 	.word	0x2000c8a4
   10f58:	2000c8b8 	.word	0x2000c8b8
   10f5c:	00016a23 	.word	0x00016a23
   10f60:	000f423f 	.word	0x000f423f
   10f64:	000f4240 	.word	0x000f4240

00010f68 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f6c:	b082      	sub	sp, #8
   10f6e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10f70:	a901      	add	r1, sp, #4
   10f72:	f000 f845 	bl	11000 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f76:	1e44      	subs	r4, r0, #1
   10f78:	b224      	sxth	r4, r4
   10f7a:	e007      	b.n	10f8c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   10f7c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   10f80:	d033      	beq.n	10fea <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   10f82:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   10f84:	45b0      	cmp	r8, r6
   10f86:	d930      	bls.n	10fea <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f88:	3c01      	subs	r4, #1
   10f8a:	b224      	sxth	r4, r4
   10f8c:	2c00      	cmp	r4, #0
   10f8e:	db2b      	blt.n	10fe8 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   10f90:	9b01      	ldr	r3, [sp, #4]
   10f92:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10f96:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   10f9a:	7869      	ldrb	r1, [r5, #1]
   10f9c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   10fa0:	f005 fd74 	bl	16a8c <pm_policy_state_lock_is_active>
   10fa4:	2800      	cmp	r0, #0
   10fa6:	d1ef      	bne.n	10f88 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   10fa8:	6868      	ldr	r0, [r5, #4]
   10faa:	0c41      	lsrs	r1, r0, #17
   10fac:	03c0      	lsls	r0, r0, #15
   10fae:	4f11      	ldr	r7, [pc, #68]	; (10ff4 <pm_policy_next_state+0x8c>)
   10fb0:	19c0      	adds	r0, r0, r7
   10fb2:	4a11      	ldr	r2, [pc, #68]	; (10ff8 <pm_policy_next_state+0x90>)
   10fb4:	f04f 0300 	mov.w	r3, #0
   10fb8:	f141 0100 	adc.w	r1, r1, #0
   10fbc:	f7ff f8c2 	bl	10144 <__aeabi_uldivmod>
   10fc0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   10fc2:	68ab      	ldr	r3, [r5, #8]
   10fc4:	0c59      	lsrs	r1, r3, #17
   10fc6:	03db      	lsls	r3, r3, #15
   10fc8:	19d8      	adds	r0, r3, r7
   10fca:	4a0b      	ldr	r2, [pc, #44]	; (10ff8 <pm_policy_next_state+0x90>)
   10fcc:	f04f 0300 	mov.w	r3, #0
   10fd0:	f141 0100 	adc.w	r1, r1, #0
   10fd4:	f7ff f8b6 	bl	10144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10fd8:	4b08      	ldr	r3, [pc, #32]	; (10ffc <pm_policy_next_state+0x94>)
   10fda:	681b      	ldr	r3, [r3, #0]
   10fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10fe0:	d0cc      	beq.n	10f7c <pm_policy_next_state+0x14>
   10fe2:	4283      	cmp	r3, r0
   10fe4:	d8ca      	bhi.n	10f7c <pm_policy_next_state+0x14>
   10fe6:	e7cf      	b.n	10f88 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   10fe8:	2500      	movs	r5, #0
}
   10fea:	4628      	mov	r0, r5
   10fec:	b002      	add	sp, #8
   10fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ff2:	bf00      	nop
   10ff4:	000f423f 	.word	0x000f423f
   10ff8:	000f4240 	.word	0x000f4240
   10ffc:	2000c584 	.word	0x2000c584

00011000 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   11000:	b908      	cbnz	r0, 11006 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   11002:	4b02      	ldr	r3, [pc, #8]	; (1100c <pm_state_cpu_get_all+0xc>)
   11004:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   11006:	2000      	movs	r0, #0
   11008:	4770      	bx	lr
   1100a:	bf00      	nop
   1100c:	0001884c 	.word	0x0001884c

00011010 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11010:	4901      	ldr	r1, [pc, #4]	; (11018 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11012:	2210      	movs	r2, #16
	str	r2, [r1]
   11014:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11016:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11018:	e000ed10 	.word	0xe000ed10

0001101c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1101c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1101e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11020:	f380 8811 	msr	BASEPRI, r0
	isb
   11024:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   11028:	f3bf 8f4f 	dsb	sy
   1102c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1102e:	b662      	cpsie	i
	isb
   11030:	f3bf 8f6f 	isb	sy

	bx	lr
   11034:	4770      	bx	lr
   11036:	bf00      	nop

00011038 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11038:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1103a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1103c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   11040:	f3bf 8f4f 	dsb	sy
   11044:	bf20      	wfe

	msr	BASEPRI, r0
   11046:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1104a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1104c:	4770      	bx	lr
   1104e:	bf00      	nop

00011050 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11050:	2800      	cmp	r0, #0
   11052:	db07      	blt.n	11064 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11054:	f000 021f 	and.w	r2, r0, #31
   11058:	0940      	lsrs	r0, r0, #5
   1105a:	2301      	movs	r3, #1
   1105c:	4093      	lsls	r3, r2
   1105e:	4a02      	ldr	r2, [pc, #8]	; (11068 <__NVIC_EnableIRQ+0x18>)
   11060:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   11064:	4770      	bx	lr
   11066:	bf00      	nop
   11068:	e000e100 	.word	0xe000e100

0001106c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1106c:	2800      	cmp	r0, #0
   1106e:	db08      	blt.n	11082 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11070:	0149      	lsls	r1, r1, #5
   11072:	b2c9      	uxtb	r1, r1
   11074:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   11078:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   1107c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   11080:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11082:	f000 000f 	and.w	r0, r0, #15
   11086:	0149      	lsls	r1, r1, #5
   11088:	b2c9      	uxtb	r1, r1
   1108a:	4b01      	ldr	r3, [pc, #4]	; (11090 <__NVIC_SetPriority+0x24>)
   1108c:	5419      	strb	r1, [r3, r0]
  }
}
   1108e:	4770      	bx	lr
   11090:	e000ed14 	.word	0xe000ed14

00011094 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11094:	0942      	lsrs	r2, r0, #5
   11096:	4b05      	ldr	r3, [pc, #20]	; (110ac <arch_irq_is_enabled+0x18>)
   11098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1109c:	f000 001f 	and.w	r0, r0, #31
   110a0:	2301      	movs	r3, #1
   110a2:	fa03 f000 	lsl.w	r0, r3, r0
}
   110a6:	4010      	ands	r0, r2
   110a8:	4770      	bx	lr
   110aa:	bf00      	nop
   110ac:	e000e100 	.word	0xe000e100

000110b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   110b0:	bf30      	wfi
    b z_SysNmiOnReset
   110b2:	f7ff bffd 	b.w	110b0 <z_SysNmiOnReset>
   110b6:	bf00      	nop

000110b8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   110b8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   110ba:	4b0b      	ldr	r3, [pc, #44]	; (110e8 <z_arm_prep_c+0x30>)
   110bc:	4a0b      	ldr	r2, [pc, #44]	; (110ec <z_arm_prep_c+0x34>)
   110be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   110c2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   110c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   110c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   110cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   110d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   110d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   110d8:	f003 fb5e 	bl	14798 <z_bss_zero>
	z_data_copy();
   110dc:	f004 f9de 	bl	1549c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   110e0:	f000 fa52 	bl	11588 <z_arm_interrupt_init>
	z_cstart();
   110e4:	f003 fbb4 	bl	14850 <z_cstart>
   110e8:	e000ed00 	.word	0xe000ed00
   110ec:	00010000 	.word	0x00010000

000110f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   110f0:	4a0a      	ldr	r2, [pc, #40]	; (1111c <arch_swap+0x2c>)
   110f2:	6893      	ldr	r3, [r2, #8]
   110f4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
   110f8:	4909      	ldr	r1, [pc, #36]	; (11120 <arch_swap+0x30>)
   110fa:	6809      	ldr	r1, [r1, #0]
   110fc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11100:	4908      	ldr	r1, [pc, #32]	; (11124 <arch_swap+0x34>)
   11102:	684b      	ldr	r3, [r1, #4]
   11104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11108:	604b      	str	r3, [r1, #4]
   1110a:	2300      	movs	r3, #0
   1110c:	f383 8811 	msr	BASEPRI, r3
   11110:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11114:	6893      	ldr	r3, [r2, #8]
}
   11116:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
   1111a:	4770      	bx	lr
   1111c:	2000cdf4 	.word	0x2000cdf4
   11120:	00018c0c 	.word	0x00018c0c
   11124:	e000ed00 	.word	0xe000ed00

00011128 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11128:	4916      	ldr	r1, [pc, #88]	; (11184 <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1112a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1112c:	f882 e0b1 	strb.w	lr, [r2, #177]	; 0xb1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11130:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11134:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11136:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1113a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1113e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11140:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11144:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11148:	4f0f      	ldr	r7, [pc, #60]	; (11188 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1114a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1114e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   11150:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11152:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   11154:	f992 e0b1 	ldrsb.w	lr, [r2, #177]	; 0xb1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11158:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
   1115c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1115e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11162:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11166:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1116a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1116e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   11172:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11176:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11178:	f005 fcab 	bl	16ad2 <configure_builtin_stack_guard>
    pop {r2, lr}
   1117c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11180:	4770      	bx	lr
   11182:	0000      	.short	0x0000
    ldr r1, =_kernel
   11184:	2000cdf4 	.word	0x2000cdf4
    ldr v4, =_SCS_ICSR
   11188:	e000ed04 	.word	0xe000ed04

0001118c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1118c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11190:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11192:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11196:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1119a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1119c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   111a0:	2902      	cmp	r1, #2
    beq _oops
   111a2:	d0ff      	beq.n	111a4 <_oops>

000111a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   111a4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   111a6:	f005 fc77 	bl	16a98 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   111aa:	bd01      	pop	{r0, pc}

000111ac <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   111ac:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   111ae:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   111b2:	4910      	ldr	r1, [pc, #64]	; (111f4 <arch_new_thread+0x48>)
   111b4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   111b8:	f021 0101 	bic.w	r1, r1, #1
   111bc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   111c0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   111c4:	9b01      	ldr	r3, [sp, #4]
   111c6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   111ca:	9b02      	ldr	r3, [sp, #8]
   111cc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   111d0:	9b03      	ldr	r3, [sp, #12]
   111d2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   111d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   111da:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   111de:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   111e0:	2300      	movs	r3, #0
   111e2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   111e6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   111ea:	23bc      	movs	r3, #188	; 0xbc
   111ec:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   111f0:	bc10      	pop	{r4}
   111f2:	4770      	bx	lr
   111f4:	00015f5d 	.word	0x00015f5d

000111f8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   111f8:	4b09      	ldr	r3, [pc, #36]	; (11220 <arch_switch_to_main_thread+0x28>)
   111fa:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   111fc:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   11200:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11204:	4610      	mov	r0, r2
   11206:	f381 8809 	msr	PSP, r1
   1120a:	2100      	movs	r1, #0
   1120c:	b663      	cpsie	if
   1120e:	f381 8811 	msr	BASEPRI, r1
   11212:	f3bf 8f6f 	isb	sy
   11216:	2200      	movs	r2, #0
   11218:	2300      	movs	r3, #0
   1121a:	f004 fe9f 	bl	15f5c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1121e:	bf00      	nop
   11220:	2000cdf4 	.word	0x2000cdf4

00011224 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11224:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11226:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11228:	4a0b      	ldr	r2, [pc, #44]	; (11258 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1122a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   1122c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1122e:	bf1e      	ittt	ne
	movne	r1, #0
   11230:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11232:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   11234:	f006 fd85 	blne	17d42 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11238:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1123a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1123e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11242:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11246:	4905      	ldr	r1, [pc, #20]	; (1125c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11248:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1124a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1124c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1124e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11252:	4903      	ldr	r1, [pc, #12]	; (11260 <_isr_wrapper+0x3c>)
	bx r1
   11254:	4708      	bx	r1
   11256:	0000      	.short	0x0000
	ldr r2, =_kernel
   11258:	2000cdf4 	.word	0x2000cdf4
	ldr r1, =_sw_isr_table
   1125c:	00018534 	.word	0x00018534
	ldr r1, =z_arm_int_exit
   11260:	00011265 	.word	0x00011265

00011264 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11264:	4b04      	ldr	r3, [pc, #16]	; (11278 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11266:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11268:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1126a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1126c:	d003      	beq.n	11276 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1126e:	4903      	ldr	r1, [pc, #12]	; (1127c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11274:	600a      	str	r2, [r1, #0]

00011276 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11276:	4770      	bx	lr
	ldr r3, =_kernel
   11278:	2000cdf4 	.word	0x2000cdf4
	ldr r1, =_SCS_ICSR
   1127c:	e000ed04 	.word	0xe000ed04

00011280 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   11280:	b538      	push	{r3, r4, r5, lr}
   11282:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11284:	4b26      	ldr	r3, [pc, #152]	; (11320 <mem_manage_fault+0xa0>)
   11286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11288:	f013 0f10 	tst.w	r3, #16
   1128c:	d11a      	bne.n	112c4 <mem_manage_fault+0x44>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   1128e:	2510      	movs	r5, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11290:	4b23      	ldr	r3, [pc, #140]	; (11320 <mem_manage_fault+0xa0>)
   11292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11294:	f013 0f08 	tst.w	r3, #8
   11298:	d000      	beq.n	1129c <mem_manage_fault+0x1c>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1129a:	2512      	movs	r5, #18
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1129c:	4b20      	ldr	r3, [pc, #128]	; (11320 <mem_manage_fault+0xa0>)
   1129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112a0:	f013 0f02 	tst.w	r3, #2
   112a4:	d011      	beq.n	112ca <mem_manage_fault+0x4a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   112a6:	4b1e      	ldr	r3, [pc, #120]	; (11320 <mem_manage_fault+0xa0>)
   112a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   112aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112ac:	f013 0f80 	tst.w	r3, #128	; 0x80
   112b0:	d00a      	beq.n	112c8 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   112b2:	2900      	cmp	r1, #0
   112b4:	d030      	beq.n	11318 <mem_manage_fault+0x98>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   112b6:	4a1a      	ldr	r2, [pc, #104]	; (11320 <mem_manage_fault+0xa0>)
   112b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   112ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   112be:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   112c0:	2513      	movs	r5, #19
   112c2:	e002      	b.n	112ca <mem_manage_fault+0x4a>
		reason = K_ERR_ARM_MEM_STACKING;
   112c4:	2511      	movs	r5, #17
   112c6:	e7e3      	b.n	11290 <mem_manage_fault+0x10>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   112c8:	2513      	movs	r5, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   112ca:	4b15      	ldr	r3, [pc, #84]	; (11320 <mem_manage_fault+0xa0>)
   112cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112ce:	f013 0f01 	tst.w	r3, #1
   112d2:	d000      	beq.n	112d6 <mem_manage_fault+0x56>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   112d4:	2514      	movs	r5, #20
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   112d6:	4b12      	ldr	r3, [pc, #72]	; (11320 <mem_manage_fault+0xa0>)
   112d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112da:	f013 0f20 	tst.w	r3, #32
   112de:	d11d      	bne.n	1131c <mem_manage_fault+0x9c>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   112e0:	4b0f      	ldr	r3, [pc, #60]	; (11320 <mem_manage_fault+0xa0>)
   112e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112e4:	f013 0f10 	tst.w	r3, #16
   112e8:	d101      	bne.n	112ee <mem_manage_fault+0x6e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   112ea:	4b0d      	ldr	r3, [pc, #52]	; (11320 <mem_manage_fault+0xa0>)
   112ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   112ee:	4b0c      	ldr	r3, [pc, #48]	; (11320 <mem_manage_fault+0xa0>)
   112f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112f2:	f013 0f20 	tst.w	r3, #32
   112f6:	d004      	beq.n	11302 <mem_manage_fault+0x82>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   112f8:	4a09      	ldr	r2, [pc, #36]	; (11320 <mem_manage_fault+0xa0>)
   112fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
   112fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11300:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11302:	4a07      	ldr	r2, [pc, #28]	; (11320 <mem_manage_fault+0xa0>)
   11304:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11306:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1130a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1130c:	2101      	movs	r1, #1
   1130e:	f005 fbe5 	bl	16adc <memory_fault_recoverable>
   11312:	7020      	strb	r0, [r4, #0]

	return reason;
}
   11314:	4628      	mov	r0, r5
   11316:	bd38      	pop	{r3, r4, r5, pc}
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   11318:	2513      	movs	r5, #19
   1131a:	e7d6      	b.n	112ca <mem_manage_fault+0x4a>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1131c:	2515      	movs	r5, #21
   1131e:	e7df      	b.n	112e0 <mem_manage_fault+0x60>
   11320:	e000ed00 	.word	0xe000ed00

00011324 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   11324:	b538      	push	{r3, r4, r5, lr}
   11326:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11328:	4b20      	ldr	r3, [pc, #128]	; (113ac <bus_fault+0x88>)
   1132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1132c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11330:	d119      	bne.n	11366 <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   11332:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11334:	4b1d      	ldr	r3, [pc, #116]	; (113ac <bus_fault+0x88>)
   11336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11338:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1133c:	d000      	beq.n	11340 <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   1133e:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11340:	4b1a      	ldr	r3, [pc, #104]	; (113ac <bus_fault+0x88>)
   11342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11344:	f413 7f00 	tst.w	r3, #512	; 0x200
   11348:	d010      	beq.n	1136c <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1134a:	4b18      	ldr	r3, [pc, #96]	; (113ac <bus_fault+0x88>)
   1134c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11350:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   11354:	d009      	beq.n	1136a <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11356:	b1d9      	cbz	r1, 11390 <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11358:	4a14      	ldr	r2, [pc, #80]	; (113ac <bus_fault+0x88>)
   1135a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1135c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11360:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   11362:	2419      	movs	r4, #25
   11364:	e002      	b.n	1136c <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
   11366:	2417      	movs	r4, #23
   11368:	e7e4      	b.n	11334 <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   1136a:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1136c:	4b0f      	ldr	r3, [pc, #60]	; (113ac <bus_fault+0x88>)
   1136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11370:	f413 6f80 	tst.w	r3, #1024	; 0x400
   11374:	d000      	beq.n	11378 <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   11376:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11378:	4b0c      	ldr	r3, [pc, #48]	; (113ac <bus_fault+0x88>)
   1137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1137c:	f413 7f80 	tst.w	r3, #256	; 0x100
   11380:	d108      	bne.n	11394 <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11382:	4b0a      	ldr	r3, [pc, #40]	; (113ac <bus_fault+0x88>)
   11384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11386:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1138a:	d004      	beq.n	11396 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1138c:	241c      	movs	r4, #28
   1138e:	e002      	b.n	11396 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   11390:	2419      	movs	r4, #25
   11392:	e7eb      	b.n	1136c <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   11394:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11396:	4a05      	ldr	r2, [pc, #20]	; (113ac <bus_fault+0x88>)
   11398:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1139a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1139e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   113a0:	2101      	movs	r1, #1
   113a2:	f005 fb9b 	bl	16adc <memory_fault_recoverable>
   113a6:	7028      	strb	r0, [r5, #0]

	return reason;
}
   113a8:	4620      	mov	r0, r4
   113aa:	bd38      	pop	{r3, r4, r5, pc}
   113ac:	e000ed00 	.word	0xe000ed00

000113b0 <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   113b0:	4b1a      	ldr	r3, [pc, #104]	; (1141c <usage_fault+0x6c>)
   113b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   113b8:	d12b      	bne.n	11412 <usage_fault+0x62>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   113ba:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   113bc:	4b17      	ldr	r3, [pc, #92]	; (1141c <usage_fault+0x6c>)
   113be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   113c4:	d000      	beq.n	113c8 <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   113c6:	201f      	movs	r0, #31
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   113c8:	4b14      	ldr	r3, [pc, #80]	; (1141c <usage_fault+0x6c>)
   113ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   113d0:	d000      	beq.n	113d4 <usage_fault+0x24>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   113d2:	2002      	movs	r0, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   113d4:	4b11      	ldr	r3, [pc, #68]	; (1141c <usage_fault+0x6c>)
   113d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113d8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   113dc:	d000      	beq.n	113e0 <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   113de:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   113e0:	4b0e      	ldr	r3, [pc, #56]	; (1141c <usage_fault+0x6c>)
   113e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   113e8:	d000      	beq.n	113ec <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   113ea:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   113ec:	4b0b      	ldr	r3, [pc, #44]	; (1141c <usage_fault+0x6c>)
   113ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   113f4:	d000      	beq.n	113f8 <usage_fault+0x48>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   113f6:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   113f8:	4b08      	ldr	r3, [pc, #32]	; (1141c <usage_fault+0x6c>)
   113fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11400:	d109      	bne.n	11416 <usage_fault+0x66>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11402:	4a06      	ldr	r2, [pc, #24]	; (1141c <usage_fault+0x6c>)
   11404:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11406:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1140a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1140e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   11410:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
   11412:	201e      	movs	r0, #30
   11414:	e7d2      	b.n	113bc <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   11416:	2024      	movs	r0, #36	; 0x24
   11418:	e7f3      	b.n	11402 <usage_fault+0x52>
   1141a:	bf00      	nop
   1141c:	e000ed00 	.word	0xe000ed00

00011420 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11420:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11422:	4b0d      	ldr	r3, [pc, #52]	; (11458 <z_arm_is_synchronous_svc+0x38>)
   11424:	695a      	ldr	r2, [r3, #20]
   11426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1142a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1142c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11430:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   11434:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11438:	695a      	ldr	r2, [r3, #20]
   1143a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1143e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11444:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11448:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1144c:	4299      	cmp	r1, r3
   1144e:	d001      	beq.n	11454 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   11450:	2000      	movs	r0, #0
   11452:	4770      	bx	lr
		return true;
   11454:	2001      	movs	r0, #1
}
   11456:	4770      	bx	lr
   11458:	e000ed00 	.word	0xe000ed00

0001145c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   1145c:	b538      	push	{r3, r4, r5, lr}
   1145e:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   11460:	2300      	movs	r3, #0
   11462:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11464:	4b1a      	ldr	r3, [pc, #104]	; (114d0 <hard_fault+0x74>)
   11466:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   11468:	f010 0002 	ands.w	r0, r0, #2
   1146c:	d12d      	bne.n	114ca <hard_fault+0x6e>
   1146e:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11472:	2b00      	cmp	r3, #0
   11474:	db2a      	blt.n	114cc <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11476:	4b16      	ldr	r3, [pc, #88]	; (114d0 <hard_fault+0x74>)
   11478:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1147a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   1147e:	d025      	beq.n	114cc <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
   11480:	4628      	mov	r0, r5
   11482:	f7ff ffcd 	bl	11420 <z_arm_is_synchronous_svc>
   11486:	b108      	cbz	r0, 1148c <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
   11488:	6828      	ldr	r0, [r5, #0]
   1148a:	e01f      	b.n	114cc <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1148c:	4b10      	ldr	r3, [pc, #64]	; (114d0 <hard_fault+0x74>)
   1148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11490:	f013 0fff 	tst.w	r3, #255	; 0xff
   11494:	d10d      	bne.n	114b2 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11496:	4b0e      	ldr	r3, [pc, #56]	; (114d0 <hard_fault+0x74>)
   11498:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1149a:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
   1149e:	d10e      	bne.n	114be <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   114a0:	4b0b      	ldr	r3, [pc, #44]	; (114d0 <hard_fault+0x74>)
   114a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   114a8:	d310      	bcc.n	114cc <hard_fault+0x70>
			reason = usage_fault(esf);
   114aa:	4628      	mov	r0, r5
   114ac:	f7ff ff80 	bl	113b0 <usage_fault>
   114b0:	e00c      	b.n	114cc <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   114b2:	4622      	mov	r2, r4
   114b4:	2101      	movs	r1, #1
   114b6:	4628      	mov	r0, r5
   114b8:	f7ff fee2 	bl	11280 <mem_manage_fault>
   114bc:	e006      	b.n	114cc <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   114be:	4622      	mov	r2, r4
   114c0:	2101      	movs	r1, #1
   114c2:	4628      	mov	r0, r5
   114c4:	f7ff ff2e 	bl	11324 <bus_fault>
   114c8:	e000      	b.n	114cc <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   114ca:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   114cc:	bd38      	pop	{r3, r4, r5, pc}
   114ce:	bf00      	nop
   114d0:	e000ed00 	.word	0xe000ed00

000114d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   114d4:	b530      	push	{r4, r5, lr}
   114d6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   114d8:	4b1f      	ldr	r3, [pc, #124]	; (11558 <z_arm_fault+0x84>)
   114da:	685d      	ldr	r5, [r3, #4]
   114dc:	f3c5 0508 	ubfx	r5, r5, #0, #9
   114e0:	2300      	movs	r3, #0
   114e2:	f383 8811 	msr	BASEPRI, r3
   114e6:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   114ea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   114ee:	f005 fb1d 	bl	16b2c <get_esf>
   114f2:	4604      	mov	r4, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   114f4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   114f8:	4629      	mov	r1, r5
   114fa:	f005 faf4 	bl	16ae6 <fault_handle>
	if (recoverable) {
   114fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11502:	b10b      	cbz	r3, 11508 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   11504:	b00b      	add	sp, #44	; 0x2c
   11506:	bd30      	pop	{r4, r5, pc}
   11508:	4605      	mov	r5, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1150a:	f10d 0c04 	add.w	ip, sp, #4
   1150e:	6820      	ldr	r0, [r4, #0]
   11510:	6861      	ldr	r1, [r4, #4]
   11512:	68a2      	ldr	r2, [r4, #8]
   11514:	68e3      	ldr	r3, [r4, #12]
   11516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1151a:	6920      	ldr	r0, [r4, #16]
   1151c:	6961      	ldr	r1, [r4, #20]
   1151e:	69a2      	ldr	r2, [r4, #24]
   11520:	69e3      	ldr	r3, [r4, #28]
   11522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
   11526:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1152a:	b14b      	cbz	r3, 11540 <z_arm_fault+0x6c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1152c:	9b08      	ldr	r3, [sp, #32]
   1152e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11532:	b95a      	cbnz	r2, 1154c <z_arm_fault+0x78>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11534:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11538:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1153c:	9308      	str	r3, [sp, #32]
   1153e:	e005      	b.n	1154c <z_arm_fault+0x78>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11540:	9b08      	ldr	r3, [sp, #32]
   11542:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11546:	f023 0301 	bic.w	r3, r3, #1
   1154a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1154c:	a901      	add	r1, sp, #4
   1154e:	4628      	mov	r0, r5
   11550:	f005 fa9e 	bl	16a90 <z_arm_fatal_error>
   11554:	e7d6      	b.n	11504 <z_arm_fault+0x30>
   11556:	bf00      	nop
   11558:	e000ed00 	.word	0xe000ed00

0001155c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1155c:	4b04      	ldr	r3, [pc, #16]	; (11570 <z_arm_fault_init+0x14>)
   1155e:	695a      	ldr	r2, [r3, #20]
   11560:	f042 0210 	orr.w	r2, r2, #16
   11564:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11566:	695a      	ldr	r2, [r3, #20]
   11568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1156c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1156e:	4770      	bx	lr
   11570:	e000ed00 	.word	0xe000ed00

00011574 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11574:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11578:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1157c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1157e:	4672      	mov	r2, lr
	bl z_arm_fault
   11580:	f7ff ffa8 	bl	114d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11584:	bd01      	pop	{r0, pc}
   11586:	bf00      	nop

00011588 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11588:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1158a:	e006      	b.n	1159a <z_arm_interrupt_init+0x12>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1158c:	f003 030f 	and.w	r3, r3, #15
   11590:	4909      	ldr	r1, [pc, #36]	; (115b8 <z_arm_interrupt_init+0x30>)
   11592:	4419      	add	r1, r3
   11594:	2320      	movs	r3, #32
   11596:	760b      	strb	r3, [r1, #24]
   11598:	3201      	adds	r2, #1
   1159a:	2a40      	cmp	r2, #64	; 0x40
   1159c:	dc0a      	bgt.n	115b4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1159e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   115a0:	2b00      	cmp	r3, #0
   115a2:	dbf3      	blt.n	1158c <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   115a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   115a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   115ac:	2120      	movs	r1, #32
   115ae:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   115b2:	e7f1      	b.n	11598 <z_arm_interrupt_init+0x10>
	}
}
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop
   115b8:	e000ecfc 	.word	0xe000ecfc

000115bc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   115bc:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   115be:	4915      	ldr	r1, [pc, #84]	; (11614 <__start+0x58>)
    strb r0, [r1]
   115c0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   115c2:	2000      	movs	r0, #0
    msr CONTROL, r0
   115c4:	f380 8814 	msr	CONTROL, r0
    isb
   115c8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   115cc:	2000      	movs	r0, #0
    msr MSPLIM, r0
   115ce:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   115d2:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   115d6:	f7ff fbe1 	bl	10d9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   115da:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   115dc:	490e      	ldr	r1, [pc, #56]	; (11618 <__start+0x5c>)
    str r0, [r1]
   115de:	6008      	str	r0, [r1, #0]
    dsb
   115e0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   115e4:	480d      	ldr	r0, [pc, #52]	; (1161c <__start+0x60>)
    msr msp, r0
   115e6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   115ea:	f000 f841 	bl	11670 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   115ee:	2020      	movs	r0, #32
    msr BASEPRI, r0
   115f0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   115f4:	480a      	ldr	r0, [pc, #40]	; (11620 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   115f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   115fa:	1840      	adds	r0, r0, r1
    msr PSP, r0
   115fc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11600:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11604:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11606:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11608:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1160c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11610:	f7ff fd52 	bl	110b8 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
   11614:	2000ce50 	.word	0x2000ce50
    ldr r1, =_SCS_MPU_CTRL
   11618:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1161c:	2000db98 	.word	0x2000db98
    ldr r0, =z_interrupt_stacks
   11620:	2000ce58 	.word	0x2000ce58

00011624 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   11624:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11628:	4905      	ldr	r1, [pc, #20]	; (11640 <__NVIC_SystemReset+0x1c>)
   1162a:	68ca      	ldr	r2, [r1, #12]
   1162c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11630:	4b04      	ldr	r3, [pc, #16]	; (11644 <__NVIC_SystemReset+0x20>)
   11632:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11634:	60cb      	str	r3, [r1, #12]
   11636:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1163a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1163c:	e7fd      	b.n	1163a <__NVIC_SystemReset+0x16>
   1163e:	bf00      	nop
   11640:	e000ed00 	.word	0xe000ed00
   11644:	05fa0004 	.word	0x05fa0004

00011648 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11648:	4b08      	ldr	r3, [pc, #32]	; (1166c <z_arm_clear_arm_mpu_config+0x24>)
   1164a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   1164e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   11652:	2300      	movs	r3, #0
   11654:	e006      	b.n	11664 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   11656:	4a05      	ldr	r2, [pc, #20]	; (1166c <z_arm_clear_arm_mpu_config+0x24>)
   11658:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
   1165c:	2100      	movs	r1, #0
   1165e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   11662:	3301      	adds	r3, #1
   11664:	4283      	cmp	r3, r0
   11666:	dbf6      	blt.n	11656 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   11668:	4770      	bx	lr
   1166a:	bf00      	nop
   1166c:	e000ed00 	.word	0xe000ed00

00011670 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11670:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11672:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11674:	2400      	movs	r4, #0
   11676:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1167a:	f7ff ffe5 	bl	11648 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1167e:	4623      	mov	r3, r4
   11680:	e008      	b.n	11694 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   11682:	f103 0120 	add.w	r1, r3, #32
   11686:	4a0e      	ldr	r2, [pc, #56]	; (116c0 <z_arm_init_arch_hw_at_boot+0x50>)
   11688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1168c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11690:	3301      	adds	r3, #1
   11692:	b2db      	uxtb	r3, r3
   11694:	2b0f      	cmp	r3, #15
   11696:	d9f4      	bls.n	11682 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11698:	2300      	movs	r3, #0
   1169a:	e008      	b.n	116ae <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1169c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   116a0:	4a07      	ldr	r2, [pc, #28]	; (116c0 <z_arm_init_arch_hw_at_boot+0x50>)
   116a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   116a6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   116aa:	3301      	adds	r3, #1
   116ac:	b2db      	uxtb	r3, r3
   116ae:	2b0f      	cmp	r3, #15
   116b0:	d9f4      	bls.n	1169c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   116b2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   116b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116b8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   116bc:	bd10      	pop	{r4, pc}
   116be:	bf00      	nop
   116c0:	e000e100 	.word	0xe000e100

000116c4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   116c4:	b508      	push	{r3, lr}
	if (_current == thread) {
   116c6:	4b0a      	ldr	r3, [pc, #40]	; (116f0 <z_impl_k_thread_abort+0x2c>)
   116c8:	689b      	ldr	r3, [r3, #8]
   116ca:	4283      	cmp	r3, r0
   116cc:	d002      	beq.n	116d4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   116ce:	f003 fead 	bl	1542c <z_thread_abort>
}
   116d2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   116d4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   116d8:	2b00      	cmp	r3, #0
   116da:	d0f8      	beq.n	116ce <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   116dc:	4b05      	ldr	r3, [pc, #20]	; (116f4 <z_impl_k_thread_abort+0x30>)
   116de:	685a      	ldr	r2, [r3, #4]
   116e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   116e4:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   116e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   116e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   116ec:	625a      	str	r2, [r3, #36]	; 0x24
   116ee:	e7ee      	b.n	116ce <z_impl_k_thread_abort+0xa>
   116f0:	2000cdf4 	.word	0x2000cdf4
   116f4:	e000ed00 	.word	0xe000ed00

000116f8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   116f8:	b510      	push	{r4, lr}
   116fa:	b084      	sub	sp, #16
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   116fc:	4c0a      	ldr	r4, [pc, #40]	; (11728 <z_arm_configure_static_mpu_regions+0x30>)
   116fe:	4623      	mov	r3, r4
   11700:	4a0a      	ldr	r2, [pc, #40]	; (1172c <z_arm_configure_static_mpu_regions+0x34>)
   11702:	2101      	movs	r1, #1
   11704:	480a      	ldr	r0, [pc, #40]	; (11730 <z_arm_configure_static_mpu_regions+0x38>)
   11706:	f005 faaa 	bl	16c5e <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1170a:	2300      	movs	r3, #0
   1170c:	9301      	str	r3, [sp, #4]
   1170e:	9302      	str	r3, [sp, #8]
   11710:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11712:	4b08      	ldr	r3, [pc, #32]	; (11734 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11714:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11716:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11718:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1171a:	2101      	movs	r1, #1
   1171c:	a801      	add	r0, sp, #4
   1171e:	f005 faa2 	bl	16c66 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11722:	b004      	add	sp, #16
   11724:	bd10      	pop	{r4, pc}
   11726:	bf00      	nop
   11728:	20040000 	.word	0x20040000
   1172c:	2000c580 	.word	0x2000c580
   11730:	0001884c 	.word	0x0001884c
   11734:	2000c6e8 	.word	0x2000c6e8

00011738 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
   11738:	4b02      	ldr	r3, [pc, #8]	; (11744 <mpu_init+0xc>)
   1173a:	4a03      	ldr	r2, [pc, #12]	; (11748 <mpu_init+0x10>)
   1173c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
   11740:	4770      	bx	lr
   11742:	bf00      	nop
   11744:	e000ed00 	.word	0xe000ed00
   11748:	0044ffaa 	.word	0x0044ffaa

0001174c <mpu_set_region>:
	MPU->RNR = rnr;
   1174c:	4b03      	ldr	r3, [pc, #12]	; (1175c <mpu_set_region+0x10>)
   1174e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
   11752:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
   11756:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
   1175a:	4770      	bx	lr
   1175c:	e000ed00 	.word	0xe000ed00

00011760 <mpu_region_get_conf>:
	MPU->RNR = rnr;
   11760:	4b0e      	ldr	r3, [pc, #56]	; (1179c <mpu_region_get_conf+0x3c>)
   11762:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
   11766:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   1176a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
   1176e:	7a0a      	ldrb	r2, [r1, #8]
   11770:	f360 0204 	bfi	r2, r0, #0, #5
   11774:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
   11776:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1177a:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1177e:	7a08      	ldrb	r0, [r1, #8]
   11780:	f362 1047 	bfi	r0, r2, #5, #3
   11784:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
   11786:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1178a:	f022 021f 	bic.w	r2, r2, #31
   1178e:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
   11790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11794:	f023 031f 	bic.w	r3, r3, #31
   11798:	60cb      	str	r3, [r1, #12]
}
   1179a:	4770      	bx	lr
   1179c:	e000ed00 	.word	0xe000ed00

000117a0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   117a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a4:	b087      	sub	sp, #28
   117a6:	4681      	mov	r9, r0
   117a8:	9100      	str	r1, [sp, #0]
   117aa:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   117ac:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   117ae:	2700      	movs	r7, #0
   117b0:	e034      	b.n	1181c <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
   117b2:	45d8      	cmp	r8, fp
   117b4:	d165      	bne.n	11882 <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   117b6:	4629      	mov	r1, r5
   117b8:	b2c0      	uxtb	r0, r0
   117ba:	f005 fa20 	bl	16bfe <mpu_configure_region>
   117be:	e02c      	b.n	1181a <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
   117c0:	4a58      	ldr	r2, [pc, #352]	; (11924 <mpu_configure_regions_and_partition+0x184>)
   117c2:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
   117c6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   117ca:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   117ce:	f021 011f 	bic.w	r1, r1, #31
   117d2:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
   117d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   117d8:	4629      	mov	r1, r5
   117da:	b2e0      	uxtb	r0, r4
   117dc:	f005 fa0f 	bl	16bfe <mpu_configure_region>
   117e0:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   117e2:	f110 0f16 	cmn.w	r0, #22
   117e6:	f000 8096 	beq.w	11916 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   117ea:	3401      	adds	r4, #1
   117ec:	e015      	b.n	1181a <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   117ee:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   117f0:	494c      	ldr	r1, [pc, #304]	; (11924 <mpu_configure_regions_and_partition+0x184>)
   117f2:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   117f6:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   117fa:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   117fe:	f023 031f 	bic.w	r3, r3, #31
   11802:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   11804:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   11808:	4629      	mov	r1, r5
   1180a:	b2e0      	uxtb	r0, r4
   1180c:	f005 f9f7 	bl	16bfe <mpu_configure_region>
   11810:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   11812:	f110 0f16 	cmn.w	r0, #22
   11816:	d07e      	beq.n	11916 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   11818:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   1181a:	3701      	adds	r7, #1
   1181c:	9b00      	ldr	r3, [sp, #0]
   1181e:	429f      	cmp	r7, r3
   11820:	da79      	bge.n	11916 <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
   11822:	eb07 0547 	add.w	r5, r7, r7, lsl #1
   11826:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   1182a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   1182e:	686e      	ldr	r6, [r5, #4]
   11830:	2e00      	cmp	r6, #0
   11832:	d0f2      	beq.n	1181a <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
   11834:	9b01      	ldr	r3, [sp, #4]
   11836:	b123      	cbz	r3, 11842 <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
   11838:	4628      	mov	r0, r5
   1183a:	f005 f9c3 	bl	16bc4 <mpu_partition_is_valid>
		if (do_sanity_check &&
   1183e:	2800      	cmp	r0, #0
   11840:	d065      	beq.n	1190e <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
   11842:	4631      	mov	r1, r6
   11844:	f859 000a 	ldr.w	r0, [r9, sl]
   11848:	f005 f9f8 	bl	16c3c <get_region_index>
   1184c:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
   1184e:	f110 0f16 	cmn.w	r0, #22
   11852:	d05f      	beq.n	11914 <mpu_configure_regions_and_partition+0x174>
   11854:	42a0      	cmp	r0, r4
   11856:	da62      	bge.n	1191e <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
   11858:	4b32      	ldr	r3, [pc, #200]	; (11924 <mpu_configure_regions_and_partition+0x184>)
   1185a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   1185e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11862:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   11866:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
   1186a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1186e:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11872:	f859 300a 	ldr.w	r3, [r9, sl]
   11876:	6869      	ldr	r1, [r5, #4]
   11878:	4419      	add	r1, r3
   1187a:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   1187e:	429a      	cmp	r2, r3
   11880:	d097      	beq.n	117b2 <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
   11882:	429a      	cmp	r2, r3
   11884:	d09c      	beq.n	117c0 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
   11886:	45d8      	cmp	r8, fp
   11888:	d0b1      	beq.n	117ee <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   1188a:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   1188c:	4925      	ldr	r1, [pc, #148]	; (11924 <mpu_configure_regions_and_partition+0x184>)
   1188e:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   11892:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11896:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1189a:	f023 031f 	bic.w	r3, r3, #31
   1189e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   118a0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   118a4:	4629      	mov	r1, r5
   118a6:	b2e0      	uxtb	r0, r4
   118a8:	f005 f9a9 	bl	16bfe <mpu_configure_region>
   118ac:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   118ae:	f110 0f16 	cmn.w	r0, #22
   118b2:	d030      	beq.n	11916 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
   118b4:	3001      	adds	r0, #1
	MPU->RNR = rnr;
   118b6:	4b1b      	ldr	r3, [pc, #108]	; (11924 <mpu_configure_regions_and_partition+0x184>)
   118b8:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
   118bc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   118c0:	f89d 2010 	ldrb.w	r2, [sp, #16]
   118c4:	f361 0204 	bfi	r2, r1, #0, #5
   118c8:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
   118cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   118d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   118d4:	b2d2      	uxtb	r2, r2
   118d6:	f363 1247 	bfi	r2, r3, #5, #3
   118da:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
   118de:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   118e2:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   118e4:	4413      	add	r3, r2
   118e6:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
   118e8:	f023 031f 	bic.w	r3, r3, #31
   118ec:	eba8 080b 	sub.w	r8, r8, fp
   118f0:	4443      	add	r3, r8
   118f2:	3b01      	subs	r3, #1
   118f4:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   118f8:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
   118fa:	a902      	add	r1, sp, #8
   118fc:	b2c0      	uxtb	r0, r0
   118fe:	f005 f973 	bl	16be8 <region_allocate_and_init>
   11902:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
   11904:	f110 0f16 	cmn.w	r0, #22
   11908:	d005      	beq.n	11916 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   1190a:	3401      	adds	r4, #1
   1190c:	e785      	b.n	1181a <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
   1190e:	f06f 0415 	mvn.w	r4, #21
   11912:	e000      	b.n	11916 <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
   11914:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
   11916:	4620      	mov	r0, r4
   11918:	b007      	add	sp, #28
   1191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1191e:	f06f 0415 	mvn.w	r4, #21
   11922:	e7f8      	b.n	11916 <mpu_configure_regions_and_partition+0x176>
   11924:	e000ed00 	.word	0xe000ed00

00011928 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   11928:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   1192a:	4c03      	ldr	r4, [pc, #12]	; (11938 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1192c:	2301      	movs	r3, #1
   1192e:	7822      	ldrb	r2, [r4, #0]
   11930:	f7ff ff36 	bl	117a0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11934:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   11936:	bd10      	pop	{r4, pc}
   11938:	2000ce40 	.word	0x2000ce40

0001193c <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   1193c:	b570      	push	{r4, r5, r6, lr}
   1193e:	4605      	mov	r5, r0
   11940:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11942:	2400      	movs	r4, #0
   11944:	e000      	b.n	11948 <mpu_mark_areas_for_dynamic_regions+0xc>
   11946:	3401      	adds	r4, #1
   11948:	42a6      	cmp	r6, r4
   1194a:	dd1e      	ble.n	1198a <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1194c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11950:	009a      	lsls	r2, r3, #2
   11952:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11956:	6859      	ldr	r1, [r3, #4]
   11958:	2900      	cmp	r1, #0
   1195a:	d0f4      	beq.n	11946 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1195c:	58a8      	ldr	r0, [r5, r2]
   1195e:	f005 f96d 	bl	16c3c <get_region_index>
		dyn_reg_info[i].index =
   11962:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   11966:	4a0b      	ldr	r2, [pc, #44]	; (11994 <mpu_mark_areas_for_dynamic_regions+0x58>)
   11968:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1196c:	f110 0f16 	cmn.w	r0, #22
   11970:	d00c      	beq.n	1198c <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11972:	4b09      	ldr	r3, [pc, #36]	; (11998 <mpu_mark_areas_for_dynamic_regions+0x5c>)
   11974:	781b      	ldrb	r3, [r3, #0]
   11976:	4298      	cmp	r0, r3
   11978:	da09      	bge.n	1198e <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   1197a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1197e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   11982:	3104      	adds	r1, #4
   11984:	f7ff feec 	bl	11760 <mpu_region_get_conf>
   11988:	e7dd      	b.n	11946 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   1198a:	2000      	movs	r0, #0
}
   1198c:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   1198e:	f06f 0015 	mvn.w	r0, #21
   11992:	e7fb      	b.n	1198c <mpu_mark_areas_for_dynamic_regions+0x50>
   11994:	2000c8bc 	.word	0x2000c8bc
   11998:	2000ce40 	.word	0x2000ce40

0001199c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1199c:	4b04      	ldr	r3, [pc, #16]	; (119b0 <arm_core_mpu_enable+0x14>)
   1199e:	2205      	movs	r2, #5
   119a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   119a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119a8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   119ac:	4770      	bx	lr
   119ae:	bf00      	nop
   119b0:	e000ed00 	.word	0xe000ed00

000119b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   119b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   119b8:	4b02      	ldr	r3, [pc, #8]	; (119c4 <arm_core_mpu_disable+0x10>)
   119ba:	2200      	movs	r2, #0
   119bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   119c0:	4770      	bx	lr
   119c2:	bf00      	nop
   119c4:	e000ed00 	.word	0xe000ed00

000119c8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   119c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   119ca:	4b0e      	ldr	r3, [pc, #56]	; (11a04 <z_arm_mpu_init+0x3c>)
   119cc:	681d      	ldr	r5, [r3, #0]
   119ce:	2d10      	cmp	r5, #16
   119d0:	d815      	bhi.n	119fe <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   119d2:	f7ff ffef 	bl	119b4 <arm_core_mpu_disable>
#endif
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   119d6:	f7ff feaf 	bl	11738 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   119da:	2400      	movs	r4, #0
   119dc:	e007      	b.n	119ee <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   119de:	4b09      	ldr	r3, [pc, #36]	; (11a04 <z_arm_mpu_init+0x3c>)
   119e0:	6859      	ldr	r1, [r3, #4]
   119e2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   119e6:	4620      	mov	r0, r4
   119e8:	f005 f8d8 	bl	16b9c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   119ec:	3401      	adds	r4, #1
   119ee:	42a5      	cmp	r5, r4
   119f0:	d8f5      	bhi.n	119de <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   119f2:	4b05      	ldr	r3, [pc, #20]	; (11a08 <z_arm_mpu_init+0x40>)
   119f4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   119f6:	f7ff ffd1 	bl	1199c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   119fa:	2000      	movs	r0, #0
}
   119fc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   119fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a02:	e7fb      	b.n	119fc <z_arm_mpu_init+0x34>
   11a04:	0001885c 	.word	0x0001885c
   11a08:	2000ce40 	.word	0x2000ce40

00011a0c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11a0c:	4b01      	ldr	r3, [pc, #4]	; (11a14 <__stdout_hook_install+0x8>)
   11a0e:	6018      	str	r0, [r3, #0]
}
   11a10:	4770      	bx	lr
   11a12:	bf00      	nop
   11a14:	2000c588 	.word	0x2000c588

00011a18 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11a18:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11a1a:	4b08      	ldr	r3, [pc, #32]	; (11a3c <_sbrk+0x24>)
   11a1c:	6819      	ldr	r1, [r3, #0]
   11a1e:	4b08      	ldr	r3, [pc, #32]	; (11a40 <_sbrk+0x28>)
   11a20:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11a22:	440a      	add	r2, r1
   11a24:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11a28:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   11a2c:	429a      	cmp	r2, r3
   11a2e:	d202      	bcs.n	11a36 <_sbrk+0x1e>
		heap_sz += count;
   11a30:	4b02      	ldr	r3, [pc, #8]	; (11a3c <_sbrk+0x24>)
   11a32:	601a      	str	r2, [r3, #0]
		ret = ptr;
   11a34:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
   11a3a:	4770      	bx	lr
   11a3c:	2000c8d0 	.word	0x2000c8d0
   11a40:	2000dd98 	.word	0x2000dd98

00011a44 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   11a44:	4800      	ldr	r0, [pc, #0]	; (11a48 <get_hf_flags+0x4>)
   11a46:	4770      	bx	lr
   11a48:	2000c928 	.word	0x2000c928

00011a4c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11a4c:	4b03      	ldr	r3, [pc, #12]	; (11a5c <get_subsys+0x10>)
   11a4e:	1ac0      	subs	r0, r0, r3
   11a50:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   11a52:	4b03      	ldr	r3, [pc, #12]	; (11a60 <get_subsys+0x14>)
   11a54:	fb03 f000 	mul.w	r0, r3, r0
   11a58:	4770      	bx	lr
   11a5a:	bf00      	nop
   11a5c:	2000c8e8 	.word	0x2000c8e8
   11a60:	b6db6db7 	.word	0xb6db6db7

00011a64 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11a64:	b538      	push	{r3, r4, r5, lr}
   11a66:	4605      	mov	r5, r0
   11a68:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11a6a:	f7ff ffef 	bl	11a4c <get_subsys>
   11a6e:	4601      	mov	r1, r0
   11a70:	2240      	movs	r2, #64	; 0x40
   11a72:	4803      	ldr	r0, [pc, #12]	; (11a80 <onoff_stop+0x1c>)
   11a74:	f005 f9a8 	bl	16dc8 <stop>
   11a78:	4601      	mov	r1, r0
	notify(mgr, res);
   11a7a:	4628      	mov	r0, r5
   11a7c:	47a0      	blx	r4
}
   11a7e:	bd38      	pop	{r3, r4, r5, pc}
   11a80:	000184d4 	.word	0x000184d4

00011a84 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11a84:	b530      	push	{r4, r5, lr}
   11a86:	b083      	sub	sp, #12
   11a88:	4605      	mov	r5, r0
   11a8a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11a8c:	f7ff ffde 	bl	11a4c <get_subsys>
   11a90:	4601      	mov	r1, r0
   11a92:	2340      	movs	r3, #64	; 0x40
   11a94:	9300      	str	r3, [sp, #0]
   11a96:	4623      	mov	r3, r4
   11a98:	4a05      	ldr	r2, [pc, #20]	; (11ab0 <onoff_start+0x2c>)
   11a9a:	4806      	ldr	r0, [pc, #24]	; (11ab4 <onoff_start+0x30>)
   11a9c:	f005 f9ae 	bl	16dfc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11aa0:	1e01      	subs	r1, r0, #0
   11aa2:	db01      	blt.n	11aa8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   11aa4:	b003      	add	sp, #12
   11aa6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   11aa8:	4628      	mov	r0, r5
   11aaa:	47a0      	blx	r4
}
   11aac:	e7fa      	b.n	11aa4 <onoff_start+0x20>
   11aae:	bf00      	nop
   11ab0:	00016e45 	.word	0x00016e45
   11ab4:	000184d4 	.word	0x000184d4

00011ab8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   11ab8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   11aba:	b110      	cbz	r0, 11ac2 <clock_event_handler+0xa>
   11abc:	2801      	cmp	r0, #1
   11abe:	d00d      	beq.n	11adc <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   11ac0:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   11ac2:	2100      	movs	r1, #0
   11ac4:	4808      	ldr	r0, [pc, #32]	; (11ae8 <clock_event_handler+0x30>)
   11ac6:	f005 f90a 	bl	16cde <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11aca:	6883      	ldr	r3, [r0, #8]
   11acc:	f013 0f07 	tst.w	r3, #7
   11ad0:	d1f6      	bne.n	11ac0 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   11ad2:	2100      	movs	r1, #0
   11ad4:	4804      	ldr	r0, [pc, #16]	; (11ae8 <clock_event_handler+0x30>)
   11ad6:	f005 f965 	bl	16da4 <clkstarted_handle>
   11ada:	e7f1      	b.n	11ac0 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11adc:	2101      	movs	r1, #1
   11ade:	4802      	ldr	r0, [pc, #8]	; (11ae8 <clock_event_handler+0x30>)
   11ae0:	f005 f960 	bl	16da4 <clkstarted_handle>
}
   11ae4:	e7ec      	b.n	11ac0 <clock_event_handler+0x8>
   11ae6:	bf00      	nop
   11ae8:	000184d4 	.word	0x000184d4

00011aec <generic_hfclk_start>:
{
   11aec:	b510      	push	{r4, lr}
   11aee:	b082      	sub	sp, #8
	__asm__ volatile(
   11af0:	f04f 0320 	mov.w	r3, #32
   11af4:	f3ef 8411 	mrs	r4, BASEPRI
   11af8:	f383 8812 	msr	BASEPRI_MAX, r3
   11afc:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11b00:	4a14      	ldr	r2, [pc, #80]	; (11b54 <generic_hfclk_start+0x68>)
   11b02:	6813      	ldr	r3, [r2, #0]
   11b04:	f043 0102 	orr.w	r1, r3, #2
   11b08:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11b0a:	f013 0f01 	tst.w	r3, #1
   11b0e:	d109      	bne.n	11b24 <generic_hfclk_start+0x38>
	bool already_started = false;
   11b10:	2300      	movs	r3, #0
	__asm__ volatile(
   11b12:	f384 8811 	msr	BASEPRI, r4
   11b16:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11b1a:	b9ab      	cbnz	r3, 11b48 <generic_hfclk_start+0x5c>
	hfclk_start();
   11b1c:	f005 f99a 	bl	16e54 <hfclk_start>
}
   11b20:	b002      	add	sp, #8
   11b22:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   11b24:	f10d 0207 	add.w	r2, sp, #7
   11b28:	2101      	movs	r1, #1
   11b2a:	480b      	ldr	r0, [pc, #44]	; (11b58 <generic_hfclk_start+0x6c>)
   11b2c:	f005 f8b4 	bl	16c98 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11b34:	2b01      	cmp	r3, #1
   11b36:	d001      	beq.n	11b3c <generic_hfclk_start+0x50>
	bool already_started = false;
   11b38:	2300      	movs	r3, #0
   11b3a:	e7ea      	b.n	11b12 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   11b3c:	f7ff ff82 	bl	11a44 <get_hf_flags>
   11b40:	f005 f91d 	bl	16d7e <set_on_state>
			already_started = true;
   11b44:	2301      	movs	r3, #1
   11b46:	e7e4      	b.n	11b12 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   11b48:	2100      	movs	r1, #0
   11b4a:	4804      	ldr	r0, [pc, #16]	; (11b5c <generic_hfclk_start+0x70>)
   11b4c:	f005 f92a 	bl	16da4 <clkstarted_handle>
		return;
   11b50:	e7e6      	b.n	11b20 <generic_hfclk_start+0x34>
   11b52:	bf00      	nop
   11b54:	2000c938 	.word	0x2000c938
   11b58:	40005000 	.word	0x40005000
   11b5c:	000184d4 	.word	0x000184d4

00011b60 <generic_hfclk_stop>:
{
   11b60:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b62:	f04f 0320 	mov.w	r3, #32
   11b66:	f3ef 8411 	mrs	r4, BASEPRI
   11b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   11b6e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   11b72:	4a08      	ldr	r2, [pc, #32]	; (11b94 <generic_hfclk_stop+0x34>)
   11b74:	6813      	ldr	r3, [r2, #0]
   11b76:	f023 0102 	bic.w	r1, r3, #2
   11b7a:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   11b7c:	f013 0f01 	tst.w	r3, #1
   11b80:	d004      	beq.n	11b8c <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   11b82:	f384 8811 	msr	BASEPRI, r4
   11b86:	f3bf 8f6f 	isb	sy
}
   11b8a:	bd10      	pop	{r4, pc}
		hfclk_stop();
   11b8c:	f005 f96c 	bl	16e68 <hfclk_stop>
   11b90:	e7f7      	b.n	11b82 <generic_hfclk_stop+0x22>
   11b92:	bf00      	nop
   11b94:	2000c938 	.word	0x2000c938

00011b98 <lfclk_spinwait>:
{
   11b98:	b570      	push	{r4, r5, r6, lr}
   11b9a:	b082      	sub	sp, #8
   11b9c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11b9e:	2801      	cmp	r0, #1
   11ba0:	d106      	bne.n	11bb0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11ba2:	4b2e      	ldr	r3, [pc, #184]	; (11c5c <lfclk_spinwait+0xc4>)
   11ba4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   11ba8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11bac:	2b02      	cmp	r3, #2
   11bae:	d034      	beq.n	11c1a <lfclk_spinwait+0x82>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11bb0:	f006 f8b2 	bl	17d18 <k_is_in_isr>
   11bb4:	4604      	mov	r4, r0
   11bb6:	b910      	cbnz	r0, 11bbe <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   11bb8:	4b29      	ldr	r3, [pc, #164]	; (11c60 <lfclk_spinwait+0xc8>)
   11bba:	781b      	ldrb	r3, [r3, #0]
   11bbc:	b973      	cbnz	r3, 11bdc <lfclk_spinwait+0x44>
	__asm__ volatile(
   11bbe:	f04f 0320 	mov.w	r3, #32
   11bc2:	f3ef 8611 	mrs	r6, BASEPRI
   11bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   11bca:	f3bf 8f6f 	isb	sy
   11bce:	2401      	movs	r4, #1
	if (!isr_mode) {
   11bd0:	b984      	cbnz	r4, 11bf4 <lfclk_spinwait+0x5c>
    p_reg->INTENCLR = mask;
   11bd2:	4b22      	ldr	r3, [pc, #136]	; (11c5c <lfclk_spinwait+0xc4>)
   11bd4:	2202      	movs	r2, #2
   11bd6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   11bda:	e00b      	b.n	11bf4 <lfclk_spinwait+0x5c>
	int key = isr_mode ? irq_lock() : 0;
   11bdc:	2600      	movs	r6, #0
   11bde:	e7f7      	b.n	11bd0 <lfclk_spinwait+0x38>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11be0:	b1ec      	cbz	r4, 11c1e <lfclk_spinwait+0x86>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11be2:	4630      	mov	r0, r6
   11be4:	f7ff fa28 	bl	11038 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11be8:	4b1c      	ldr	r3, [pc, #112]	; (11c5c <lfclk_spinwait+0xc4>)
   11bea:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   11bee:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11bf0:	2b01      	cmp	r3, #1
   11bf2:	d018      	beq.n	11c26 <lfclk_spinwait+0x8e>
   11bf4:	f10d 0207 	add.w	r2, sp, #7
   11bf8:	2100      	movs	r1, #0
   11bfa:	4818      	ldr	r0, [pc, #96]	; (11c5c <lfclk_spinwait+0xc4>)
   11bfc:	f005 f84c 	bl	16c98 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11c00:	2800      	cmp	r0, #0
   11c02:	d0ed      	beq.n	11be0 <lfclk_spinwait+0x48>
		 && ((type == target_type)
   11c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11c08:	2b02      	cmp	r3, #2
   11c0a:	d001      	beq.n	11c10 <lfclk_spinwait+0x78>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11c0c:	2d01      	cmp	r5, #1
   11c0e:	d1e7      	bne.n	11be0 <lfclk_spinwait+0x48>
	if (isr_mode) {
   11c10:	b1f4      	cbz	r4, 11c50 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   11c12:	f386 8811 	msr	BASEPRI, r6
   11c16:	f3bf 8f6f 	isb	sy
}
   11c1a:	b002      	add	sp, #8
   11c1c:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   11c1e:	2001      	movs	r0, #1
   11c20:	f005 f92c 	bl	16e7c <k_msleep>
   11c24:	e7e0      	b.n	11be8 <lfclk_spinwait+0x50>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11c26:	4b0d      	ldr	r3, [pc, #52]	; (11c5c <lfclk_spinwait+0xc4>)
   11c28:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   11c2c:	2b00      	cmp	r3, #0
   11c2e:	d0e1      	beq.n	11bf4 <lfclk_spinwait+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11c30:	4b0a      	ldr	r3, [pc, #40]	; (11c5c <lfclk_spinwait+0xc4>)
   11c32:	2200      	movs	r2, #0
   11c34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11c38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   11c3c:	2202      	movs	r2, #2
   11c3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11c42:	4a08      	ldr	r2, [pc, #32]	; (11c64 <lfclk_spinwait+0xcc>)
   11c44:	2120      	movs	r1, #32
   11c46:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11c4a:	2201      	movs	r2, #1
   11c4c:	609a      	str	r2, [r3, #8]
}
   11c4e:	e7d1      	b.n	11bf4 <lfclk_spinwait+0x5c>
    p_reg->INTENSET = mask;
   11c50:	4b02      	ldr	r3, [pc, #8]	; (11c5c <lfclk_spinwait+0xc4>)
   11c52:	2202      	movs	r2, #2
   11c54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11c58:	e7df      	b.n	11c1a <lfclk_spinwait+0x82>
   11c5a:	bf00      	nop
   11c5c:	40005000 	.word	0x40005000
   11c60:	2000ce50 	.word	0x2000ce50
   11c64:	e000e100 	.word	0xe000e100

00011c68 <api_blocking_start>:
{
   11c68:	b500      	push	{lr}
   11c6a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11c6c:	f8cd d000 	str.w	sp, [sp]
   11c70:	f8cd d004 	str.w	sp, [sp, #4]
   11c74:	2300      	movs	r3, #0
   11c76:	9302      	str	r3, [sp, #8]
   11c78:	2301      	movs	r3, #1
   11c7a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11c7c:	466b      	mov	r3, sp
   11c7e:	4a07      	ldr	r2, [pc, #28]	; (11c9c <api_blocking_start+0x34>)
   11c80:	f005 f8d8 	bl	16e34 <api_start>
	if (err < 0) {
   11c84:	2800      	cmp	r0, #0
   11c86:	db05      	blt.n	11c94 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   11c88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11c8c:	2300      	movs	r3, #0
   11c8e:	4668      	mov	r0, sp
   11c90:	f003 f818 	bl	14cc4 <z_impl_k_sem_take>
}
   11c94:	b005      	add	sp, #20
   11c96:	f85d fb04 	ldr.w	pc, [sp], #4
   11c9a:	bf00      	nop
   11c9c:	00016ea9 	.word	0x00016ea9

00011ca0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   11ca0:	b570      	push	{r4, r5, r6, lr}
   11ca2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11ca4:	2200      	movs	r2, #0
   11ca6:	2101      	movs	r1, #1
   11ca8:	2005      	movs	r0, #5
   11caa:	f004 ff00 	bl	16aae <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11cae:	4811      	ldr	r0, [pc, #68]	; (11cf4 <clk_init+0x54>)
   11cb0:	f000 ffd6 	bl	12c60 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11cb4:	4b10      	ldr	r3, [pc, #64]	; (11cf8 <clk_init+0x58>)
   11cb6:	4298      	cmp	r0, r3
   11cb8:	d119      	bne.n	11cee <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11cba:	f000 ffe3 	bl	12c84 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   11cbe:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   11cc0:	2c01      	cmp	r4, #1
   11cc2:	d812      	bhi.n	11cea <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   11cc4:	4621      	mov	r1, r4
   11cc6:	4630      	mov	r0, r6
   11cc8:	f005 f809 	bl	16cde <get_sub_data>
   11ccc:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11cce:	4621      	mov	r1, r4
   11cd0:	4630      	mov	r0, r6
   11cd2:	f005 f80f 	bl	16cf4 <get_onoff_manager>
   11cd6:	4909      	ldr	r1, [pc, #36]	; (11cfc <clk_init+0x5c>)
   11cd8:	f004 fc30 	bl	1653c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   11cdc:	2800      	cmp	r0, #0
   11cde:	db05      	blt.n	11cec <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11ce0:	2301      	movs	r3, #1
   11ce2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   11ce4:	441c      	add	r4, r3
   11ce6:	b2e4      	uxtb	r4, r4
   11ce8:	e7ea      	b.n	11cc0 <clk_init+0x20>
	}

	return 0;
   11cea:	2000      	movs	r0, #0
}
   11cec:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11cee:	f06f 0004 	mvn.w	r0, #4
   11cf2:	e7fb      	b.n	11cec <clk_init+0x4c>
   11cf4:	00011ab9 	.word	0x00011ab9
   11cf8:	0bad0000 	.word	0x0bad0000
   11cfc:	00018894 	.word	0x00018894

00011d00 <z_nrf_clock_control_lf_on>:
{
   11d00:	b510      	push	{r4, lr}
   11d02:	4604      	mov	r4, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11d04:	4b0e      	ldr	r3, [pc, #56]	; (11d40 <z_nrf_clock_control_lf_on+0x40>)
   11d06:	2101      	movs	r1, #1
   11d08:	e8d3 2fef 	ldaex	r2, [r3]
   11d0c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11d10:	2800      	cmp	r0, #0
   11d12:	d1f9      	bne.n	11d08 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   11d14:	b11a      	cbz	r2, 11d1e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   11d16:	1e63      	subs	r3, r4, #1
   11d18:	2b01      	cmp	r3, #1
   11d1a:	d90d      	bls.n	11d38 <z_nrf_clock_control_lf_on+0x38>
}
   11d1c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   11d1e:	4809      	ldr	r0, [pc, #36]	; (11d44 <z_nrf_clock_control_lf_on+0x44>)
   11d20:	f004 ffe8 	bl	16cf4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11d24:	4908      	ldr	r1, [pc, #32]	; (11d48 <z_nrf_clock_control_lf_on+0x48>)
   11d26:	2300      	movs	r3, #0
   11d28:	604b      	str	r3, [r1, #4]
   11d2a:	608b      	str	r3, [r1, #8]
   11d2c:	60cb      	str	r3, [r1, #12]
   11d2e:	2301      	movs	r3, #1
   11d30:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   11d32:	f004 fc20 	bl	16576 <onoff_request>
   11d36:	e7ee      	b.n	11d16 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   11d38:	4620      	mov	r0, r4
   11d3a:	f7ff ff2d 	bl	11b98 <lfclk_spinwait>
		break;
   11d3e:	e7ed      	b.n	11d1c <z_nrf_clock_control_lf_on+0x1c>
   11d40:	2000c8e4 	.word	0x2000c8e4
   11d44:	000184d4 	.word	0x000184d4
   11d48:	2000c8d4 	.word	0x2000c8d4

00011d4c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   11d4c:	b510      	push	{r4, lr}
   11d4e:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
   11d50:	280a      	cmp	r0, #10
   11d52:	d006      	beq.n	11d62 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   11d54:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   11d56:	4806      	ldr	r0, [pc, #24]	; (11d70 <console_out+0x24>)
   11d58:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   11d5a:	685b      	ldr	r3, [r3, #4]
   11d5c:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   11d5e:	4620      	mov	r0, r4
   11d60:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   11d62:	4803      	ldr	r0, [pc, #12]	; (11d70 <console_out+0x24>)
   11d64:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   11d66:	685b      	ldr	r3, [r3, #4]
   11d68:	210d      	movs	r1, #13
   11d6a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   11d6c:	e7f2      	b.n	11d54 <console_out+0x8>
   11d6e:	bf00      	nop
   11d70:	0001851c 	.word	0x0001851c

00011d74 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   11d74:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   11d76:	4c04      	ldr	r4, [pc, #16]	; (11d88 <uart_console_hook_install+0x14>)
   11d78:	4620      	mov	r0, r4
   11d7a:	f7ff fe47 	bl	11a0c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   11d7e:	4620      	mov	r0, r4
   11d80:	f7fe fb88 	bl	10494 <__printk_hook_install>
#endif
}
   11d84:	bd10      	pop	{r4, pc}
   11d86:	bf00      	nop
   11d88:	00011d4d 	.word	0x00011d4d

00011d8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   11d8c:	b508      	push	{r3, lr}
   11d8e:	4805      	ldr	r0, [pc, #20]	; (11da4 <uart_console_init+0x18>)
   11d90:	f005 fefe 	bl	17b90 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   11d94:	b118      	cbz	r0, 11d9e <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   11d96:	f7ff ffed 	bl	11d74 <uart_console_hook_install>

	return 0;
   11d9a:	2000      	movs	r0, #0
}
   11d9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   11d9e:	f06f 0012 	mvn.w	r0, #18
   11da2:	e7fb      	b.n	11d9c <uart_console_init+0x10>
   11da4:	0001851c 	.word	0x0001851c

00011da8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11da8:	b908      	cbnz	r0, 11dae <get_dev+0x6>
   11daa:	4802      	ldr	r0, [pc, #8]	; (11db4 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   11dac:	4770      	bx	lr
	const struct device *dev = NULL;
   11dae:	2000      	movs	r0, #0
   11db0:	4770      	bx	lr
   11db2:	bf00      	nop
   11db4:	000184ec 	.word	0x000184ec

00011db8 <gpio_nrfx_pin_interrupt_configure>:
{
   11db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dba:	b085      	sub	sp, #20
   11dbc:	460e      	mov	r6, r1
   11dbe:	4619      	mov	r1, r3
	return port->config;
   11dc0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11dc2:	7b1b      	ldrb	r3, [r3, #12]
   11dc4:	f006 051f 	and.w	r5, r6, #31
   11dc8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   11dcc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   11dd0:	d022      	beq.n	11e18 <gpio_nrfx_pin_interrupt_configure+0x60>
   11dd2:	4607      	mov	r7, r0
   11dd4:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   11dd6:	2300      	movs	r3, #0
   11dd8:	9301      	str	r3, [sp, #4]
   11dda:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   11ddc:	4610      	mov	r0, r2
   11dde:	f005 f94f 	bl	17080 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11de2:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   11de6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   11de8:	6899      	ldr	r1, [r3, #8]
   11dea:	40f1      	lsrs	r1, r6
   11dec:	f011 0f01 	tst.w	r1, #1
   11df0:	d102      	bne.n	11df8 <gpio_nrfx_pin_interrupt_configure+0x40>
   11df2:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   11df6:	d014      	beq.n	11e22 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11df8:	2300      	movs	r3, #0
   11dfa:	aa01      	add	r2, sp, #4
   11dfc:	4619      	mov	r1, r3
   11dfe:	4628      	mov	r0, r5
   11e00:	f001 fa2c 	bl	1325c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11e04:	4b18      	ldr	r3, [pc, #96]	; (11e68 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   11e06:	4298      	cmp	r0, r3
   11e08:	d12a      	bne.n	11e60 <gpio_nrfx_pin_interrupt_configure+0xa8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   11e0a:	2101      	movs	r1, #1
   11e0c:	4628      	mov	r0, r5
   11e0e:	f001 fb8d 	bl	1352c <nrfx_gpiote_trigger_enable>
	return 0;
   11e12:	2000      	movs	r0, #0
}
   11e14:	b005      	add	sp, #20
   11e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   11e18:	4628      	mov	r0, r5
   11e1a:	f001 fbc3 	bl	135a4 <nrfx_gpiote_trigger_disable>
		return 0;
   11e1e:	2000      	movs	r0, #0
   11e20:	e7f8      	b.n	11e14 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   11e22:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   11e26:	3380      	adds	r3, #128	; 0x80
   11e28:	4a10      	ldr	r2, [pc, #64]	; (11e6c <gpio_nrfx_pin_interrupt_configure+0xb4>)
   11e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   11e2e:	f013 0f01 	tst.w	r3, #1
   11e32:	d1e1      	bne.n	11df8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11e34:	f10d 010f 	add.w	r1, sp, #15
   11e38:	4628      	mov	r0, r5
   11e3a:	f001 fb1b 	bl	13474 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   11e3e:	4b0c      	ldr	r3, [pc, #48]	; (11e70 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   11e40:	4298      	cmp	r0, r3
   11e42:	d003      	beq.n	11e4c <gpio_nrfx_pin_interrupt_configure+0x94>
		trigger_config.p_in_channel = &ch;
   11e44:	f10d 030f 	add.w	r3, sp, #15
   11e48:	9302      	str	r3, [sp, #8]
   11e4a:	e7d5      	b.n	11df8 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   11e4c:	f10d 000f 	add.w	r0, sp, #15
   11e50:	f001 fb64 	bl	1351c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   11e54:	4b04      	ldr	r3, [pc, #16]	; (11e68 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   11e56:	4298      	cmp	r0, r3
   11e58:	d0f4      	beq.n	11e44 <gpio_nrfx_pin_interrupt_configure+0x8c>
				return -ENOMEM;
   11e5a:	f06f 000b 	mvn.w	r0, #11
   11e5e:	e7d9      	b.n	11e14 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   11e60:	f06f 0015 	mvn.w	r0, #21
   11e64:	e7d6      	b.n	11e14 <gpio_nrfx_pin_interrupt_configure+0x5c>
   11e66:	bf00      	nop
   11e68:	0bad0000 	.word	0x0bad0000
   11e6c:	40842500 	.word	0x40842500
   11e70:	0bad0004 	.word	0x0bad0004

00011e74 <gpio_nrfx_pin_configure>:
{
   11e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e78:	b086      	sub	sp, #24
   11e7a:	460e      	mov	r6, r1
   11e7c:	4614      	mov	r4, r2
	return port->config;
   11e7e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11e82:	f898 300c 	ldrb.w	r3, [r8, #12]
   11e86:	f001 051f 	and.w	r5, r1, #31
   11e8a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11e8e:	f10d 0117 	add.w	r1, sp, #23
   11e92:	4628      	mov	r0, r5
   11e94:	f001 faee 	bl	13474 <nrfx_gpiote_channel_get>
   11e98:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   11e9a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   11e9e:	d039      	beq.n	11f14 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11ea0:	2100      	movs	r1, #0
   11ea2:	9103      	str	r1, [sp, #12]
   11ea4:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11ea6:	460b      	mov	r3, r1
   11ea8:	aa03      	add	r2, sp, #12
   11eaa:	4628      	mov	r0, r5
   11eac:	f001 f9d6 	bl	1325c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11eb0:	4b32      	ldr	r3, [pc, #200]	; (11f7c <gpio_nrfx_pin_configure+0x108>)
   11eb2:	4298      	cmp	r0, r3
   11eb4:	d15f      	bne.n	11f76 <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
   11eb6:	429f      	cmp	r7, r3
   11eb8:	d03c      	beq.n	11f34 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
   11eba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   11ebe:	d047      	beq.n	11f50 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
   11ec0:	f10d 0103 	add.w	r1, sp, #3
   11ec4:	4620      	mov	r0, r4
   11ec6:	f005 f868 	bl	16f9a <get_drive>
		if (rv != 0) {
   11eca:	4607      	mov	r7, r0
   11ecc:	bb48      	cbnz	r0, 11f22 <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
   11ece:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11ed2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   11ed6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   11eda:	bf0c      	ite	eq
   11edc:	2301      	moveq	r3, #1
   11ede:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   11ee0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   11ee4:	4620      	mov	r0, r4
   11ee6:	f005 f89b 	bl	17020 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   11eea:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   11eee:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   11ef2:	d024      	beq.n	11f3e <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   11ef4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11ef8:	2301      	movs	r3, #1
   11efa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   11efc:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   11efe:	2200      	movs	r2, #0
   11f00:	a901      	add	r1, sp, #4
   11f02:	4628      	mov	r0, r5
   11f04:	f001 fa40 	bl	13388 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   11f08:	4b1c      	ldr	r3, [pc, #112]	; (11f7c <gpio_nrfx_pin_configure+0x108>)
   11f0a:	4298      	cmp	r0, r3
   11f0c:	d009      	beq.n	11f22 <gpio_nrfx_pin_configure+0xae>
   11f0e:	f06f 0715 	mvn.w	r7, #21
   11f12:	e006      	b.n	11f22 <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   11f14:	4628      	mov	r0, r5
   11f16:	f001 fb6f 	bl	135f8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   11f1a:	4b18      	ldr	r3, [pc, #96]	; (11f7c <gpio_nrfx_pin_configure+0x108>)
   11f1c:	429f      	cmp	r7, r3
   11f1e:	d004      	beq.n	11f2a <gpio_nrfx_pin_configure+0xb6>
		return 0;
   11f20:	2700      	movs	r7, #0
}
   11f22:	4638      	mov	r0, r7
   11f24:	b006      	add	sp, #24
   11f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   11f2a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11f2e:	f001 faed 	bl	1350c <nrfx_gpiote_channel_free>
   11f32:	e7f5      	b.n	11f20 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
   11f34:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11f38:	f001 fae8 	bl	1350c <nrfx_gpiote_channel_free>
   11f3c:	e7bd      	b.n	11eba <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   11f3e:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   11f42:	d0dc      	beq.n	11efe <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   11f44:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11f48:	2301      	movs	r3, #1
   11f4a:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   11f4c:	60d3      	str	r3, [r2, #12]
}
   11f4e:	e7d6      	b.n	11efe <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
   11f50:	4620      	mov	r0, r4
   11f52:	f005 f865 	bl	17020 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   11f56:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   11f5a:	2300      	movs	r3, #0
   11f5c:	461a      	mov	r2, r3
   11f5e:	a902      	add	r1, sp, #8
   11f60:	4628      	mov	r0, r5
   11f62:	f001 f97b 	bl	1325c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   11f66:	4b05      	ldr	r3, [pc, #20]	; (11f7c <gpio_nrfx_pin_configure+0x108>)
   11f68:	4298      	cmp	r0, r3
   11f6a:	d101      	bne.n	11f70 <gpio_nrfx_pin_configure+0xfc>
   11f6c:	2700      	movs	r7, #0
   11f6e:	e7d8      	b.n	11f22 <gpio_nrfx_pin_configure+0xae>
   11f70:	f06f 0715 	mvn.w	r7, #21
   11f74:	e7d5      	b.n	11f22 <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
   11f76:	f06f 0715 	mvn.w	r7, #21
   11f7a:	e7d2      	b.n	11f22 <gpio_nrfx_pin_configure+0xae>
   11f7c:	0bad0000 	.word	0x0bad0000

00011f80 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   11f80:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   11f82:	f001 fab9 	bl	134f8 <nrfx_gpiote_is_init>
   11f86:	b108      	cbz	r0, 11f8c <gpio_nrfx_init+0xc>
		return 0;
   11f88:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   11f8a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   11f8c:	f001 fa8a 	bl	134a4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   11f90:	4b08      	ldr	r3, [pc, #32]	; (11fb4 <gpio_nrfx_init+0x34>)
   11f92:	4298      	cmp	r0, r3
   11f94:	d10a      	bne.n	11fac <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   11f96:	2100      	movs	r1, #0
   11f98:	4807      	ldr	r0, [pc, #28]	; (11fb8 <gpio_nrfx_init+0x38>)
   11f9a:	f001 fa65 	bl	13468 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11f9e:	2200      	movs	r2, #0
   11fa0:	2105      	movs	r1, #5
   11fa2:	2031      	movs	r0, #49	; 0x31
   11fa4:	f004 fd83 	bl	16aae <z_arm_irq_priority_set>
	return 0;
   11fa8:	2000      	movs	r0, #0
   11faa:	e7ee      	b.n	11f8a <gpio_nrfx_init+0xa>
		return -EIO;
   11fac:	f06f 0004 	mvn.w	r0, #4
   11fb0:	e7eb      	b.n	11f8a <gpio_nrfx_init+0xa>
   11fb2:	bf00      	nop
   11fb4:	0bad0000 	.word	0x0bad0000
   11fb8:	000170b9 	.word	0x000170b9

00011fbc <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11fbc:	f04f 0c00 	mov.w	ip, #0
   11fc0:	458c      	cmp	ip, r1
   11fc2:	f080 80fe 	bcs.w	121c2 <pinctrl_configure_pins+0x206>
{
   11fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fca:	e035      	b.n	12038 <pinctrl_configure_pins+0x7c>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   11fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fd0:	e03c      	b.n	1204c <pinctrl_configure_pins+0x90>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   11fd2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11fd6:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11fda:	4674      	mov	r4, lr
			write = 1U;
   11fdc:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   11fde:	2b7f      	cmp	r3, #127	; 0x7f
   11fe0:	d023      	beq.n	1202a <pinctrl_configure_pins+0x6e>
			if (write != NO_WRITE) {
   11fe2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11fe6:	d00b      	beq.n	12000 <pinctrl_configure_pins+0x44>
    if (value == 0)
   11fe8:	2d00      	cmp	r5, #0
   11fea:	f040 80da 	bne.w	121a2 <pinctrl_configure_pins+0x1e6>
    *p_pin = pin_number & 0x1F;
   11fee:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11ff2:	2501      	movs	r5, #1
   11ff4:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
   11ff8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 121c8 <pinctrl_configure_pins+0x20c>
   11ffc:	f8c8 500c 	str.w	r5, [r8, #12]
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12000:	59c5      	ldr	r5, [r0, r7]
   12002:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   12006:	d002      	beq.n	1200e <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12008:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   1200c:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1200e:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
   12012:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12016:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1201a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1201e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   12022:	3380      	adds	r3, #128	; 0x80
   12024:	4d68      	ldr	r5, [pc, #416]	; (121c8 <pinctrl_configure_pins+0x20c>)
   12026:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1202a:	f10c 0c01 	add.w	ip, ip, #1
   1202e:	fa5f fc8c 	uxtb.w	ip, ip
   12032:	458c      	cmp	ip, r1
   12034:	f080 80bf 	bcs.w	121b6 <pinctrl_configure_pins+0x1fa>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12038:	ea4f 078c 	mov.w	r7, ip, lsl #2
   1203c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   12040:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   12044:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   12048:	2b7f      	cmp	r3, #127	; 0x7f
   1204a:	d0bf      	beq.n	11fcc <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   1204c:	0c24      	lsrs	r4, r4, #16
   1204e:	2c19      	cmp	r4, #25
   12050:	f200 80b3 	bhi.w	121ba <pinctrl_configure_pins+0x1fe>
   12054:	a501      	add	r5, pc, #4	; (adr r5, 1205c <pinctrl_configure_pins+0xa0>)
   12056:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
   1205a:	bf00      	nop
   1205c:	00011fd3 	.word	0x00011fd3
   12060:	000120c5 	.word	0x000120c5
   12064:	000120d5 	.word	0x000120d5
   12068:	000120e3 	.word	0x000120e3
   1206c:	000120f3 	.word	0x000120f3
   12070:	00012101 	.word	0x00012101
   12074:	0001210f 	.word	0x0001210f
   12078:	000121bb 	.word	0x000121bb
   1207c:	000121bb 	.word	0x000121bb
   12080:	000121bb 	.word	0x000121bb
   12084:	000121bb 	.word	0x000121bb
   12088:	0001211f 	.word	0x0001211f
   1208c:	00012131 	.word	0x00012131
   12090:	000121bb 	.word	0x000121bb
   12094:	000121bb 	.word	0x000121bb
   12098:	000121bb 	.word	0x000121bb
   1209c:	000121bb 	.word	0x000121bb
   120a0:	000121bb 	.word	0x000121bb
   120a4:	000121bb 	.word	0x000121bb
   120a8:	000121bb 	.word	0x000121bb
   120ac:	000121bb 	.word	0x000121bb
   120b0:	000121bb 	.word	0x000121bb
   120b4:	00012143 	.word	0x00012143
   120b8:	00012155 	.word	0x00012155
   120bc:	00012167 	.word	0x00012167
   120c0:	00012179 	.word	0x00012179
			NRF_PSEL_UART(reg, RXD) = pin;
   120c4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   120c8:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   120cc:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   120ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			break;
   120d2:	e784      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
   120d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   120d8:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   120dc:	4674      	mov	r4, lr
			write = 1U;
   120de:	4675      	mov	r5, lr
			break;
   120e0:	e77d      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
   120e2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   120e6:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   120ea:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   120ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			break;
   120f0:	e775      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   120f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   120f6:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   120fa:	2401      	movs	r4, #1
			write = 0U;
   120fc:	4675      	mov	r5, lr
			break;
   120fe:	e76e      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   12100:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12104:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12108:	4674      	mov	r4, lr
			write = 0U;
   1210a:	2500      	movs	r5, #0
			break;
   1210c:	e767      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1210e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12112:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12116:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   12118:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			break;
   1211c:	e75f      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1211e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   12122:	b396      	cbz	r6, 1218a <pinctrl_configure_pins+0x1ce>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12124:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12128:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   1212a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1212e:	e756      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   12130:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   12134:	b37e      	cbz	r6, 12196 <pinctrl_configure_pins+0x1da>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12136:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1213a:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
   1213c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12140:	e74d      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   12142:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   12146:	59c5      	ldr	r5, [r0, r7]
   12148:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1214c:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12150:	4674      	mov	r4, lr
			break;
   12152:	e744      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   12154:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   12158:	59c5      	ldr	r5, [r0, r7]
   1215a:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1215e:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12162:	4674      	mov	r4, lr
			break;
   12164:	e73b      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   12166:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1216a:	59c5      	ldr	r5, [r0, r7]
   1216c:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12170:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12174:	4674      	mov	r4, lr
			break;
   12176:	e732      	b.n	11fde <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   12178:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   1217c:	59c5      	ldr	r5, [r0, r7]
   1217e:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12182:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12186:	4674      	mov	r4, lr
			break;
   12188:	e729      	b.n	11fde <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1218a:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1218c:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   1218e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   12192:	2606      	movs	r6, #6
   12194:	e723      	b.n	11fde <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12196:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12198:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
   1219a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   1219e:	2606      	movs	r6, #6
   121a0:	e71d      	b.n	11fde <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
   121a2:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   121a6:	2501      	movs	r5, #1
   121a8:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
   121ac:	f8df 8018 	ldr.w	r8, [pc, #24]	; 121c8 <pinctrl_configure_pins+0x20c>
   121b0:	f8c8 5008 	str.w	r5, [r8, #8]
}
   121b4:	e724      	b.n	12000 <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   121b6:	2000      	movs	r0, #0
   121b8:	e001      	b.n	121be <pinctrl_configure_pins+0x202>
		switch (NRF_GET_FUN(pins[i])) {
   121ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   121be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   121c2:	2000      	movs	r0, #0
}
   121c4:	4770      	bx	lr
   121c6:	bf00      	nop
   121c8:	40842500 	.word	0x40842500

000121cc <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   121cc:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   121ce:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   121d0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   121d4:	d06f      	beq.n	122b6 <baudrate_set+0xea>
   121d6:	d83a      	bhi.n	1224e <baudrate_set+0x82>
   121d8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   121dc:	d06e      	beq.n	122bc <baudrate_set+0xf0>
   121de:	d90a      	bls.n	121f6 <baudrate_set+0x2a>
   121e0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   121e4:	d075      	beq.n	122d2 <baudrate_set+0x106>
   121e6:	d924      	bls.n	12232 <baudrate_set+0x66>
   121e8:	f647 2312 	movw	r3, #31250	; 0x7a12
   121ec:	4299      	cmp	r1, r3
   121ee:	d12b      	bne.n	12248 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   121f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   121f4:	e013      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   121f6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   121fa:	d061      	beq.n	122c0 <baudrate_set+0xf4>
   121fc:	d907      	bls.n	1220e <baudrate_set+0x42>
   121fe:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   12202:	d063      	beq.n	122cc <baudrate_set+0x100>
   12204:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   12208:	d110      	bne.n	1222c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1220a:	4b3c      	ldr	r3, [pc, #240]	; (122fc <baudrate_set+0x130>)
   1220c:	e007      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   1220e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   12212:	d058      	beq.n	122c6 <baudrate_set+0xfa>
   12214:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   12218:	d105      	bne.n	12226 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1221a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1221e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   12222:	2000      	movs	r0, #0
   12224:	4770      	bx	lr
	switch (baudrate) {
   12226:	f06f 0015 	mvn.w	r0, #21
   1222a:	4770      	bx	lr
   1222c:	f06f 0015 	mvn.w	r0, #21
   12230:	4770      	bx	lr
   12232:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   12236:	d04e      	beq.n	122d6 <baudrate_set+0x10a>
   12238:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1223c:	d101      	bne.n	12242 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1223e:	4b30      	ldr	r3, [pc, #192]	; (12300 <baudrate_set+0x134>)
   12240:	e7ed      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   12242:	f06f 0015 	mvn.w	r0, #21
   12246:	4770      	bx	lr
   12248:	f06f 0015 	mvn.w	r0, #21
   1224c:	4770      	bx	lr
   1224e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   12252:	d042      	beq.n	122da <baudrate_set+0x10e>
   12254:	d909      	bls.n	1226a <baudrate_set+0x9e>
   12256:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1225a:	d046      	beq.n	122ea <baudrate_set+0x11e>
   1225c:	d91f      	bls.n	1229e <baudrate_set+0xd2>
   1225e:	4b29      	ldr	r3, [pc, #164]	; (12304 <baudrate_set+0x138>)
   12260:	4299      	cmp	r1, r3
   12262:	d148      	bne.n	122f6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12268:	e7d9      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   1226a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1226e:	d037      	beq.n	122e0 <baudrate_set+0x114>
   12270:	d905      	bls.n	1227e <baudrate_set+0xb2>
   12272:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   12276:	d10f      	bne.n	12298 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12278:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1227c:	e7cf      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   1227e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   12282:	4299      	cmp	r1, r3
   12284:	d02e      	beq.n	122e4 <baudrate_set+0x118>
   12286:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1228a:	d102      	bne.n	12292 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1228c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12290:	e7c5      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   12292:	f06f 0015 	mvn.w	r0, #21
   12296:	4770      	bx	lr
   12298:	f06f 0015 	mvn.w	r0, #21
   1229c:	4770      	bx	lr
   1229e:	4b1a      	ldr	r3, [pc, #104]	; (12308 <baudrate_set+0x13c>)
   122a0:	4299      	cmp	r1, r3
   122a2:	d025      	beq.n	122f0 <baudrate_set+0x124>
   122a4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   122a8:	d102      	bne.n	122b0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   122aa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   122ae:	e7b6      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   122b0:	f06f 0015 	mvn.w	r0, #21
   122b4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   122b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   122ba:	e7b0      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   122bc:	4b13      	ldr	r3, [pc, #76]	; (1230c <baudrate_set+0x140>)
   122be:	e7ae      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   122c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   122c4:	e7ab      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   122c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   122ca:	e7a8      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   122cc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   122d0:	e7a5      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   122d2:	4b0f      	ldr	r3, [pc, #60]	; (12310 <baudrate_set+0x144>)
   122d4:	e7a3      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   122d6:	4b0f      	ldr	r3, [pc, #60]	; (12314 <baudrate_set+0x148>)
   122d8:	e7a1      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   122da:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   122de:	e79e      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   122e0:	4b0d      	ldr	r3, [pc, #52]	; (12318 <baudrate_set+0x14c>)
   122e2:	e79c      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   122e4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   122e8:	e799      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   122ea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   122ee:	e796      	b.n	1221e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   122f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   122f4:	e793      	b.n	1221e <baudrate_set+0x52>
	switch (baudrate) {
   122f6:	f06f 0015 	mvn.w	r0, #21
}
   122fa:	4770      	bx	lr
   122fc:	0013b000 	.word	0x0013b000
   12300:	004ea000 	.word	0x004ea000
   12304:	000f4240 	.word	0x000f4240
   12308:	0003d090 	.word	0x0003d090
   1230c:	00275000 	.word	0x00275000
   12310:	0075c000 	.word	0x0075c000
   12314:	003af000 	.word	0x003af000
   12318:	013a9000 	.word	0x013a9000

0001231c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1231e:	4605      	mov	r5, r0
   12320:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   12322:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12324:	f005 fcf8 	bl	17d18 <k_is_in_isr>
   12328:	b910      	cbnz	r0, 12330 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1232a:	4b12      	ldr	r3, [pc, #72]	; (12374 <uarte_nrfx_poll_out+0x58>)
   1232c:	781b      	ldrb	r3, [r3, #0]
   1232e:	b983      	cbnz	r3, 12352 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   12330:	f04f 0320 	mov.w	r3, #32
   12334:	f3ef 8411 	mrs	r4, BASEPRI
   12338:	f383 8812 	msr	BASEPRI_MAX, r3
   1233c:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   12340:	4628      	mov	r0, r5
   12342:	f004 ff86 	bl	17252 <is_tx_ready>
   12346:	b940      	cbnz	r0, 1235a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   12348:	f384 8811 	msr	BASEPRI, r4
   1234c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12350:	e7ee      	b.n	12330 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   12352:	4628      	mov	r0, r5
   12354:	f004 ffe2 	bl	1731c <wait_tx_ready>
   12358:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   1235a:	693b      	ldr	r3, [r7, #16]
   1235c:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1235e:	2201      	movs	r2, #1
   12360:	6939      	ldr	r1, [r7, #16]
   12362:	4628      	mov	r0, r5
   12364:	f004 ff8f 	bl	17286 <tx_start>
	__asm__ volatile(
   12368:	f384 8811 	msr	BASEPRI, r4
   1236c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   12370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12372:	bf00      	nop
   12374:	2000ce50 	.word	0x2000ce50

00012378 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   12378:	b538      	push	{r3, r4, r5, lr}
   1237a:	4605      	mov	r5, r0
   1237c:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1237e:	f101 0018 	add.w	r0, r1, #24
   12382:	f000 fd15 	bl	12db0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   12386:	4b0a      	ldr	r3, [pc, #40]	; (123b0 <endtx_stoptx_ppi_init+0x38>)
   12388:	4298      	cmp	r0, r3
   1238a:	d10e      	bne.n	123aa <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1238c:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1238e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12392:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   12396:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1239a:	7e22      	ldrb	r2, [r4, #24]
   1239c:	2301      	movs	r3, #1
   1239e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   123a0:	4a04      	ldr	r2, [pc, #16]	; (123b4 <endtx_stoptx_ppi_init+0x3c>)
   123a2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   123a6:	2000      	movs	r0, #0
}
   123a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   123aa:	f06f 0004 	mvn.w	r0, #4
   123ae:	e7fb      	b.n	123a8 <endtx_stoptx_ppi_init+0x30>
   123b0:	0bad0000 	.word	0x0bad0000
   123b4:	40017000 	.word	0x40017000

000123b8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   123b8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   123bc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   123c0:	4b01      	ldr	r3, [pc, #4]	; (123c8 <set_comparator+0x10>)
   123c2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   123c6:	4770      	bx	lr
   123c8:	40015000 	.word	0x40015000

000123cc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   123cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   123d0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   123d2:	4a02      	ldr	r2, [pc, #8]	; (123dc <event_enable+0x10>)
   123d4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   123d8:	4770      	bx	lr
   123da:	bf00      	nop
   123dc:	40015000 	.word	0x40015000

000123e0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   123e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   123e4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   123e6:	4a02      	ldr	r2, [pc, #8]	; (123f0 <event_disable+0x10>)
   123e8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   123ec:	4770      	bx	lr
   123ee:	bf00      	nop
   123f0:	40015000 	.word	0x40015000

000123f4 <counter>:
     return p_reg->COUNTER;
   123f4:	4b01      	ldr	r3, [pc, #4]	; (123fc <counter+0x8>)
   123f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   123fa:	4770      	bx	lr
   123fc:	40015000 	.word	0x40015000

00012400 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   12400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12404:	4606      	mov	r6, r0
   12406:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   12408:	f7ff ffea 	bl	123e0 <event_disable>
	event_clear(chan);
   1240c:	4630      	mov	r0, r6
   1240e:	f005 f82e 	bl	1746e <event_clear>
	uint32_t cc_val = req_cc;
   12412:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   12414:	2703      	movs	r7, #3
   12416:	e001      	b.n	1241c <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   12418:	193d      	adds	r5, r7, r4
			cc_inc++;
   1241a:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   1241c:	4629      	mov	r1, r5
   1241e:	4630      	mov	r0, r6
   12420:	f7ff ffca 	bl	123b8 <set_comparator>
		event_enable(chan);
   12424:	4630      	mov	r0, r6
   12426:	f7ff ffd1 	bl	123cc <event_enable>
		now = counter();
   1242a:	f7ff ffe3 	bl	123f4 <counter>
   1242e:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   12430:	1cc1      	adds	r1, r0, #3
   12432:	4628      	mov	r0, r5
   12434:	f005 f80a 	bl	1744c <counter_sub>
   12438:	4b0b      	ldr	r3, [pc, #44]	; (12468 <set_alarm+0x68>)
   1243a:	4298      	cmp	r0, r3
   1243c:	d911      	bls.n	12462 <set_alarm+0x62>
			if (event_check(chan)) {
   1243e:	4630      	mov	r0, r6
   12440:	f005 f808 	bl	17454 <event_check>
   12444:	2800      	cmp	r0, #0
   12446:	d0e7      	beq.n	12418 <set_alarm+0x18>
				now = counter();
   12448:	f7ff ffd4 	bl	123f4 <counter>
   1244c:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1244e:	4641      	mov	r1, r8
   12450:	f004 fffc 	bl	1744c <counter_sub>
   12454:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12458:	d903      	bls.n	12462 <set_alarm+0x62>
					event_clear(chan);
   1245a:	4630      	mov	r0, r6
   1245c:	f005 f807 	bl	1746e <event_clear>
   12460:	e7da      	b.n	12418 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   12462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12466:	bf00      	nop
   12468:	007ffffd 	.word	0x007ffffd

0001246c <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
   1246c:	4b03      	ldr	r3, [pc, #12]	; (1247c <int_event_disable_rtc+0x10>)
   1246e:	4a04      	ldr	r2, [pc, #16]	; (12480 <int_event_disable_rtc+0x14>)
   12470:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   12474:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
   12478:	4770      	bx	lr
   1247a:	bf00      	nop
   1247c:	40015000 	.word	0x40015000
   12480:	000f0003 	.word	0x000f0003

00012484 <compare_int_lock>:
{
   12484:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   12486:	2301      	movs	r3, #1
   12488:	4083      	lsls	r3, r0
   1248a:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1248e:	4a0c      	ldr	r2, [pc, #48]	; (124c0 <compare_int_lock+0x3c>)
   12490:	e8d2 1fef 	ldaex	r1, [r2]
   12494:	ea01 0e0c 	and.w	lr, r1, ip
   12498:	e8c2 efe4 	stlex	r4, lr, [r2]
   1249c:	2c00      	cmp	r4, #0
   1249e:	d1f7      	bne.n	12490 <compare_int_lock+0xc>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   124a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   124a4:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   124a6:	4807      	ldr	r0, [pc, #28]	; (124c4 <compare_int_lock+0x40>)
   124a8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   124ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   124b0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   124b4:	420b      	tst	r3, r1
}
   124b6:	bf14      	ite	ne
   124b8:	2001      	movne	r0, #1
   124ba:	2000      	moveq	r0, #0
   124bc:	bd10      	pop	{r4, pc}
   124be:	bf00      	nop
   124c0:	2000c94c 	.word	0x2000c94c
   124c4:	40015000 	.word	0x40015000

000124c8 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   124c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   124cc:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   124ce:	4a12      	ldr	r2, [pc, #72]	; (12518 <channel_processing_check_and_clear+0x50>)
   124d0:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   124d4:	4213      	tst	r3, r2
   124d6:	d101      	bne.n	124dc <channel_processing_check_and_clear+0x14>
	return false;
   124d8:	2000      	movs	r0, #0
}
   124da:	4770      	bx	lr
{
   124dc:	b510      	push	{r4, lr}
   124de:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   124e0:	2301      	movs	r3, #1
   124e2:	4083      	lsls	r3, r0
   124e4:	43db      	mvns	r3, r3
   124e6:	490d      	ldr	r1, [pc, #52]	; (1251c <channel_processing_check_and_clear+0x54>)
   124e8:	e8d1 2fef 	ldaex	r2, [r1]
   124ec:	ea02 0003 	and.w	r0, r2, r3
   124f0:	e8c1 0fec 	stlex	ip, r0, [r1]
   124f4:	f1bc 0f00 	cmp.w	ip, #0
   124f8:	d1f6      	bne.n	124e8 <channel_processing_check_and_clear+0x20>
   124fa:	fa22 f304 	lsr.w	r3, r2, r4
   124fe:	f013 0f01 	tst.w	r3, #1
   12502:	d103      	bne.n	1250c <channel_processing_check_and_clear+0x44>
		    event_check(chan)) {
   12504:	4620      	mov	r0, r4
   12506:	f004 ffa5 	bl	17454 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1250a:	b118      	cbz	r0, 12514 <channel_processing_check_and_clear+0x4c>
			event_clear(chan);
   1250c:	4620      	mov	r0, r4
   1250e:	f004 ffae 	bl	1746e <event_clear>
			return true;
   12512:	2001      	movs	r0, #1
}
   12514:	bd10      	pop	{r4, pc}
   12516:	bf00      	nop
   12518:	40015000 	.word	0x40015000
   1251c:	2000c948 	.word	0x2000c948

00012520 <compare_int_unlock>:
	if (key) {
   12520:	b901      	cbnz	r1, 12524 <compare_int_unlock+0x4>
}
   12522:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   12524:	2301      	movs	r3, #1
   12526:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12528:	4a0d      	ldr	r2, [pc, #52]	; (12560 <compare_int_unlock+0x40>)
   1252a:	e8d2 cfef 	ldaex	ip, [r2]
   1252e:	ea4c 0c03 	orr.w	ip, ip, r3
   12532:	e8c2 cfe1 	stlex	r1, ip, [r2]
   12536:	2900      	cmp	r1, #0
   12538:	d1f7      	bne.n	1252a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1253a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1253e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   12540:	4a08      	ldr	r2, [pc, #32]	; (12564 <compare_int_unlock+0x44>)
   12542:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12546:	4b08      	ldr	r3, [pc, #32]	; (12568 <compare_int_unlock+0x48>)
   12548:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1254c:	40c3      	lsrs	r3, r0
   1254e:	f013 0f01 	tst.w	r3, #1
   12552:	d0e6      	beq.n	12522 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12554:	4b05      	ldr	r3, [pc, #20]	; (1256c <compare_int_unlock+0x4c>)
   12556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1255a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1255e:	e7e0      	b.n	12522 <compare_int_unlock+0x2>
   12560:	2000c94c 	.word	0x2000c94c
   12564:	40015000 	.word	0x40015000
   12568:	2000c948 	.word	0x2000c948
   1256c:	e000e100 	.word	0xe000e100

00012570 <sys_clock_timeout_handler>:
{
   12570:	b538      	push	{r3, r4, r5, lr}
   12572:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   12574:	4610      	mov	r0, r2
   12576:	4619      	mov	r1, r3
   12578:	f004 ff85 	bl	17486 <absolute_time_to_cc>
   1257c:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1257e:	490d      	ldr	r1, [pc, #52]	; (125b4 <sys_clock_timeout_handler+0x44>)
   12580:	680b      	ldr	r3, [r1, #0]
   12582:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   12584:	181b      	adds	r3, r3, r0
   12586:	684c      	ldr	r4, [r1, #4]
   12588:	f144 0400 	adc.w	r4, r4, #0
   1258c:	600b      	str	r3, [r1, #0]
   1258e:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   12590:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   12594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12598:	d209      	bcs.n	125ae <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1259a:	4b07      	ldr	r3, [pc, #28]	; (125b8 <sys_clock_timeout_handler+0x48>)
   1259c:	681b      	ldr	r3, [r3, #0]
   1259e:	0a19      	lsrs	r1, r3, #8
   125a0:	061b      	lsls	r3, r3, #24
   125a2:	18d4      	adds	r4, r2, r3
   125a4:	f141 0500 	adc.w	r5, r1, #0
   125a8:	4b04      	ldr	r3, [pc, #16]	; (125bc <sys_clock_timeout_handler+0x4c>)
   125aa:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   125ae:	f003 f831 	bl	15614 <sys_clock_announce>
}
   125b2:	bd38      	pop	{r3, r4, r5, pc}
   125b4:	2000c6f8 	.word	0x2000c6f8
   125b8:	2000c950 	.word	0x2000c950
   125bc:	2000c700 	.word	0x2000c700

000125c0 <z_nrf_rtc_timer_read>:
{
   125c0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   125c2:	4b0d      	ldr	r3, [pc, #52]	; (125f8 <z_nrf_rtc_timer_read+0x38>)
   125c4:	681c      	ldr	r4, [r3, #0]
   125c6:	0a25      	lsrs	r5, r4, #8
   125c8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   125ca:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   125ce:	f7ff ff11 	bl	123f4 <counter>
   125d2:	4603      	mov	r3, r0
	val += cntr;
   125d4:	1900      	adds	r0, r0, r4
   125d6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   125da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   125de:	d20a      	bcs.n	125f6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   125e0:	4b06      	ldr	r3, [pc, #24]	; (125fc <z_nrf_rtc_timer_read+0x3c>)
   125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   125e6:	4290      	cmp	r0, r2
   125e8:	eb71 0303 	sbcs.w	r3, r1, r3
   125ec:	d203      	bcs.n	125f6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   125ee:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   125f2:	f141 0100 	adc.w	r1, r1, #0
}
   125f6:	bd38      	pop	{r3, r4, r5, pc}
   125f8:	2000c950 	.word	0x2000c950
   125fc:	2000c700 	.word	0x2000c700

00012600 <compare_set_nolocks>:
{
   12600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12602:	4606      	mov	r6, r0
   12604:	4614      	mov	r4, r2
   12606:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   12608:	4610      	mov	r0, r2
   1260a:	4619      	mov	r1, r3
   1260c:	f004 ff3b 	bl	17486 <absolute_time_to_cc>
   12610:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   12612:	f7ff ffd5 	bl	125c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   12616:	42a0      	cmp	r0, r4
   12618:	eb71 0305 	sbcs.w	r3, r1, r5
   1261c:	d215      	bcs.n	1264a <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1261e:	1a20      	subs	r0, r4, r0
   12620:	eb65 0101 	sbc.w	r1, r5, r1
   12624:	4b15      	ldr	r3, [pc, #84]	; (1267c <compare_set_nolocks+0x7c>)
   12626:	4298      	cmp	r0, r3
   12628:	f171 0100 	sbcs.w	r1, r1, #0
   1262c:	d223      	bcs.n	12676 <compare_set_nolocks+0x76>
		if (target_time != cc_data[chan].target_time) {
   1262e:	4b14      	ldr	r3, [pc, #80]	; (12680 <compare_set_nolocks+0x80>)
   12630:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   12634:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   12638:	42ab      	cmp	r3, r5
   1263a:	bf08      	it	eq
   1263c:	42a2      	cmpeq	r2, r4
   1263e:	d00e      	beq.n	1265e <compare_set_nolocks+0x5e>
			set_alarm(chan, cc_value);
   12640:	4639      	mov	r1, r7
   12642:	4630      	mov	r0, r6
   12644:	f7ff fedc 	bl	12400 <set_alarm>
   12648:	e009      	b.n	1265e <compare_set_nolocks+0x5e>
		atomic_or(&force_isr_mask, BIT(chan));
   1264a:	2301      	movs	r3, #1
   1264c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1264e:	4a0d      	ldr	r2, [pc, #52]	; (12684 <compare_set_nolocks+0x84>)
   12650:	e8d2 0fef 	ldaex	r0, [r2]
   12654:	4318      	orrs	r0, r3
   12656:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1265a:	2900      	cmp	r1, #0
   1265c:	d1f8      	bne.n	12650 <compare_set_nolocks+0x50>
	cc_data[chan].target_time = target_time;
   1265e:	4b08      	ldr	r3, [pc, #32]	; (12680 <compare_set_nolocks+0x80>)
   12660:	0132      	lsls	r2, r6, #4
   12662:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   12666:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1266a:	9906      	ldr	r1, [sp, #24]
   1266c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1266e:	9b07      	ldr	r3, [sp, #28]
   12670:	6073      	str	r3, [r6, #4]
	return ret;
   12672:	2000      	movs	r0, #0
}
   12674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   12676:	f06f 0015 	mvn.w	r0, #21
   1267a:	e7fb      	b.n	12674 <compare_set_nolocks+0x74>
   1267c:	00800001 	.word	0x00800001
   12680:	2000c6e8 	.word	0x2000c6e8
   12684:	2000c948 	.word	0x2000c948

00012688 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   12688:	b530      	push	{r4, r5, lr}
   1268a:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
   1268c:	f7ff feee 	bl	1246c <int_event_disable_rtc>
    p_reg->PRESCALER = val;
   12690:	2300      	movs	r3, #0
   12692:	4a1d      	ldr	r2, [pc, #116]	; (12708 <sys_clock_driver_init+0x80>)
   12694:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12698:	2b00      	cmp	r3, #0
   1269a:	dd24      	ble.n	126e6 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
   1269c:	4c1a      	ldr	r4, [pc, #104]	; (12708 <sys_clock_driver_init+0x80>)
   1269e:	2502      	movs	r5, #2
   126a0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126a4:	4b19      	ldr	r3, [pc, #100]	; (1270c <sys_clock_driver_init+0x84>)
   126a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   126aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   126ae:	2200      	movs	r2, #0
   126b0:	2101      	movs	r1, #1
   126b2:	2015      	movs	r0, #21
   126b4:	f004 f9fb 	bl	16aae <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   126b8:	2015      	movs	r0, #21
   126ba:	f004 f9f3 	bl	16aa4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   126be:	2301      	movs	r3, #1
   126c0:	60a3      	str	r3, [r4, #8]
   126c2:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   126c4:	4a12      	ldr	r2, [pc, #72]	; (12710 <sys_clock_driver_init+0x88>)
   126c6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   126c8:	2400      	movs	r4, #0
   126ca:	9401      	str	r4, [sp, #4]
   126cc:	4b11      	ldr	r3, [pc, #68]	; (12714 <sys_clock_driver_init+0x8c>)
   126ce:	9300      	str	r3, [sp, #0]
   126d0:	4a11      	ldr	r2, [pc, #68]	; (12718 <sys_clock_driver_init+0x90>)
   126d2:	2300      	movs	r3, #0
   126d4:	4620      	mov	r0, r4
   126d6:	f004 fee7 	bl	174a8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   126da:	4628      	mov	r0, r5
   126dc:	f7ff fb10 	bl	11d00 <z_nrf_clock_control_lf_on>

	return 0;
}
   126e0:	4620      	mov	r0, r4
   126e2:	b003      	add	sp, #12
   126e4:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   126e6:	4a0d      	ldr	r2, [pc, #52]	; (1271c <sys_clock_driver_init+0x94>)
   126e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   126ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   126f4:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   126f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   126fc:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   126fe:	4902      	ldr	r1, [pc, #8]	; (12708 <sys_clock_driver_init+0x80>)
   12700:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12704:	3301      	adds	r3, #1
   12706:	e7c7      	b.n	12698 <sys_clock_driver_init+0x10>
   12708:	40015000 	.word	0x40015000
   1270c:	e000e100 	.word	0xe000e100
   12710:	2000c94c 	.word	0x2000c94c
   12714:	00012571 	.word	0x00012571
   12718:	007fffff 	.word	0x007fffff
   1271c:	2000c6e8 	.word	0x2000c6e8

00012720 <process_channel>:
{
   12720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12724:	b082      	sub	sp, #8
   12726:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   12728:	f7ff fece 	bl	124c8 <channel_processing_check_and_clear>
   1272c:	b910      	cbnz	r0, 12734 <process_channel+0x14>
}
   1272e:	b002      	add	sp, #8
   12730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   12734:	f7ff ff44 	bl	125c0 <z_nrf_rtc_timer_read>
   12738:	4682      	mov	sl, r0
   1273a:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   1273c:	f004 fea6 	bl	1748c <full_int_lock>
   12740:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   12742:	4b15      	ldr	r3, [pc, #84]	; (12798 <process_channel+0x78>)
   12744:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   12748:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1274c:	45c2      	cmp	sl, r8
   1274e:	eb75 0509 	sbcs.w	r5, r5, r9
   12752:	d20b      	bcs.n	1276c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   12754:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   12756:	4630      	mov	r0, r6
   12758:	f004 fea1 	bl	1749e <full_int_unlock>
		if (handler) {
   1275c:	2d00      	cmp	r5, #0
   1275e:	d0e6      	beq.n	1272e <process_channel+0xe>
			handler(chan, expire_time, user_context);
   12760:	9700      	str	r7, [sp, #0]
   12762:	4642      	mov	r2, r8
   12764:	464b      	mov	r3, r9
   12766:	4620      	mov	r0, r4
   12768:	47a8      	blx	r5
}
   1276a:	e7e0      	b.n	1272e <process_channel+0xe>
			handler = cc_data[chan].callback;
   1276c:	4a0a      	ldr	r2, [pc, #40]	; (12798 <process_channel+0x78>)
   1276e:	0123      	lsls	r3, r4, #4
   12770:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   12774:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   12776:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   12778:	2000      	movs	r0, #0
   1277a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12784:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   12788:	4620      	mov	r0, r4
   1278a:	f7ff fe29 	bl	123e0 <event_disable>
			event_clear(chan);
   1278e:	4620      	mov	r0, r4
   12790:	f004 fe6d 	bl	1746e <event_clear>
   12794:	e7df      	b.n	12756 <process_channel+0x36>
   12796:	bf00      	nop
   12798:	2000c6e8 	.word	0x2000c6e8

0001279c <rtc_nrf_isr>:
{
   1279c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1279e:	4b0e      	ldr	r3, [pc, #56]	; (127d8 <rtc_nrf_isr+0x3c>)
   127a0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   127a4:	f013 0f02 	tst.w	r3, #2
   127a8:	d00d      	beq.n	127c6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   127aa:	4b0b      	ldr	r3, [pc, #44]	; (127d8 <rtc_nrf_isr+0x3c>)
   127ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   127b0:	b14b      	cbz	r3, 127c6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   127b2:	4b09      	ldr	r3, [pc, #36]	; (127d8 <rtc_nrf_isr+0x3c>)
   127b4:	2200      	movs	r2, #0
   127b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   127ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   127be:	4a07      	ldr	r2, [pc, #28]	; (127dc <rtc_nrf_isr+0x40>)
   127c0:	6813      	ldr	r3, [r2, #0]
   127c2:	3301      	adds	r3, #1
   127c4:	6013      	str	r3, [r2, #0]
{
   127c6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   127c8:	2c00      	cmp	r4, #0
   127ca:	dd00      	ble.n	127ce <rtc_nrf_isr+0x32>
}
   127cc:	bd10      	pop	{r4, pc}
		process_channel(chan);
   127ce:	4620      	mov	r0, r4
   127d0:	f7ff ffa6 	bl	12720 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   127d4:	3401      	adds	r4, #1
   127d6:	e7f7      	b.n	127c8 <rtc_nrf_isr+0x2c>
   127d8:	40015000 	.word	0x40015000
   127dc:	2000c950 	.word	0x2000c950

000127e0 <sys_clock_set_timeout>:
{
   127e0:	b510      	push	{r4, lr}
   127e2:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   127e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   127e8:	d006      	beq.n	127f8 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   127ea:	2801      	cmp	r0, #1
   127ec:	dd09      	ble.n	12802 <sys_clock_set_timeout+0x22>
   127ee:	4b15      	ldr	r3, [pc, #84]	; (12844 <sys_clock_set_timeout+0x64>)
   127f0:	4298      	cmp	r0, r3
   127f2:	dc24      	bgt.n	1283e <sys_clock_set_timeout+0x5e>
   127f4:	4604      	mov	r4, r0
   127f6:	e005      	b.n	12804 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   127f8:	4b13      	ldr	r3, [pc, #76]	; (12848 <sys_clock_set_timeout+0x68>)
   127fa:	2200      	movs	r2, #0
   127fc:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   127fe:	4c13      	ldr	r4, [pc, #76]	; (1284c <sys_clock_set_timeout+0x6c>)
   12800:	e003      	b.n	1280a <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12802:	2401      	movs	r4, #1
		sys_busy = true;
   12804:	4b10      	ldr	r3, [pc, #64]	; (12848 <sys_clock_set_timeout+0x68>)
   12806:	2201      	movs	r2, #1
   12808:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1280a:	f7ff fed9 	bl	125c0 <z_nrf_rtc_timer_read>
   1280e:	4b10      	ldr	r3, [pc, #64]	; (12850 <sys_clock_set_timeout+0x70>)
   12810:	681a      	ldr	r2, [r3, #0]
   12812:	685b      	ldr	r3, [r3, #4]
   12814:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   12816:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1281a:	d300      	bcc.n	1281e <sys_clock_set_timeout+0x3e>
		cyc = 0;
   1281c:	2400      	movs	r4, #0
	cyc += unannounced;
   1281e:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   12820:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   12824:	d300      	bcc.n	12828 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   12826:	4c09      	ldr	r4, [pc, #36]	; (1284c <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   12828:	2000      	movs	r0, #0
   1282a:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1282c:	9001      	str	r0, [sp, #4]
   1282e:	4909      	ldr	r1, [pc, #36]	; (12854 <sys_clock_set_timeout+0x74>)
   12830:	9100      	str	r1, [sp, #0]
   12832:	f143 0300 	adc.w	r3, r3, #0
   12836:	f004 fe37 	bl	174a8 <compare_set>
}
   1283a:	b002      	add	sp, #8
   1283c:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1283e:	4c03      	ldr	r4, [pc, #12]	; (1284c <sys_clock_set_timeout+0x6c>)
   12840:	e7e0      	b.n	12804 <sys_clock_set_timeout+0x24>
   12842:	bf00      	nop
   12844:	007ffffe 	.word	0x007ffffe
   12848:	2000ce43 	.word	0x2000ce43
   1284c:	007fffff 	.word	0x007fffff
   12850:	2000c6f8 	.word	0x2000c6f8
   12854:	00012571 	.word	0x00012571

00012858 <sys_clock_elapsed>:
{
   12858:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1285a:	f7ff feb1 	bl	125c0 <z_nrf_rtc_timer_read>
   1285e:	4b02      	ldr	r3, [pc, #8]	; (12868 <sys_clock_elapsed+0x10>)
   12860:	681b      	ldr	r3, [r3, #0]
}
   12862:	1ac0      	subs	r0, r0, r3
   12864:	bd08      	pop	{r3, pc}
   12866:	bf00      	nop
   12868:	2000c6f8 	.word	0x2000c6f8

0001286c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1286c:	b410      	push	{r4}
   1286e:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   12870:	f04f 0c00 	mov.w	ip, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   12874:	4810      	ldr	r0, [pc, #64]	; (128b8 <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   12876:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   12878:	e000      	b.n	1287c <thread_monitor_entry_get+0x10>
   1287a:	3308      	adds	r3, #8
   1287c:	b19b      	cbz	r3, 128a6 <thread_monitor_entry_get+0x3a>
   1287e:	4a0e      	ldr	r2, [pc, #56]	; (128b8 <thread_monitor_entry_get+0x4c>)
   12880:	4293      	cmp	r3, r2
   12882:	d310      	bcc.n	128a6 <thread_monitor_entry_get+0x3a>
   12884:	3250      	adds	r2, #80	; 0x50
   12886:	4293      	cmp	r3, r2
   12888:	d20d      	bcs.n	128a6 <thread_monitor_entry_get+0x3a>
		if (entry->id == id) {
   1288a:	681a      	ldr	r2, [r3, #0]
   1288c:	42a2      	cmp	r2, r4
   1288e:	d011      	beq.n	128b4 <thread_monitor_entry_get+0x48>
			return entry;
		} else if (entry->id == 0) {
   12890:	b142      	cbz	r2, 128a4 <thread_monitor_entry_get+0x38>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   12892:	4a0a      	ldr	r2, [pc, #40]	; (128bc <thread_monitor_entry_get+0x50>)
   12894:	6812      	ldr	r2, [r2, #0]
   12896:	6859      	ldr	r1, [r3, #4]
   12898:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   1289a:	4594      	cmp	ip, r2
   1289c:	daed      	bge.n	1287a <thread_monitor_entry_get+0xe>
			oldest_entry_age = entry_age;
   1289e:	4694      	mov	ip, r2
			new_entry = entry;
   128a0:	4618      	mov	r0, r3
   128a2:	e7ea      	b.n	1287a <thread_monitor_entry_get+0xe>
			new_entry = entry;
   128a4:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   128a6:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   128a8:	4b04      	ldr	r3, [pc, #16]	; (128bc <thread_monitor_entry_get+0x50>)
   128aa:	681b      	ldr	r3, [r3, #0]
   128ac:	3b01      	subs	r3, #1
   128ae:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   128b0:	bc10      	pop	{r4}
   128b2:	4770      	bx	lr
			return entry;
   128b4:	4618      	mov	r0, r3
   128b6:	e7fb      	b.n	128b0 <thread_monitor_entry_get+0x44>
   128b8:	2000c9d0 	.word	0x2000c9d0
   128bc:	2000c9c4 	.word	0x2000c9c4

000128c0 <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   128c0:	4b01      	ldr	r3, [pc, #4]	; (128c8 <thread_monitor_entry_update+0x8>)
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	6043      	str	r3, [r0, #4]
}
   128c6:	4770      	bx	lr
   128c8:	2000c9c4 	.word	0x2000c9c4

000128cc <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   128cc:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   128ce:	6842      	ldr	r2, [r0, #4]
   128d0:	4b04      	ldr	r3, [pc, #16]	; (128e4 <can_thread_sleep+0x18>)
   128d2:	681b      	ldr	r3, [r3, #0]
   128d4:	429a      	cmp	r2, r3
   128d6:	d101      	bne.n	128dc <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   128d8:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   128da:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   128dc:	f7ff fff0 	bl	128c0 <thread_monitor_entry_update>
		allow_to_sleep = false;
   128e0:	2000      	movs	r0, #0
   128e2:	e7fa      	b.n	128da <can_thread_sleep+0xe>
   128e4:	2000c9c4 	.word	0x2000c9c4

000128e8 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   128e8:	b538      	push	{r3, r4, r5, lr}
   128ea:	4604      	mov	r4, r0
	__asm__ volatile(
   128ec:	f04f 0320 	mov.w	r3, #32
   128f0:	f3ef 8511 	mrs	r5, BASEPRI
   128f4:	f383 8812 	msr	BASEPRI_MAX, r3
   128f8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   128fc:	f002 fd90 	bl	15420 <z_impl_z_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   12900:	f7ff ffb4 	bl	1286c <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   12904:	f7ff ffe2 	bl	128cc <can_thread_sleep>
   12908:	b138      	cbz	r0, 1291a <sleeping_thread_add+0x32>
	parent->next = child;
   1290a:	2300      	movs	r3, #0
   1290c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1290e:	4b07      	ldr	r3, [pc, #28]	; (1292c <sleeping_thread_add+0x44>)
   12910:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12912:	b13b      	cbz	r3, 12924 <sleeping_thread_add+0x3c>
	parent->next = child;
   12914:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12916:	4b05      	ldr	r3, [pc, #20]	; (1292c <sleeping_thread_add+0x44>)
   12918:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   1291a:	f385 8811 	msr	BASEPRI, r5
   1291e:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   12922:	bd38      	pop	{r3, r4, r5, pc}
   12924:	4b01      	ldr	r3, [pc, #4]	; (1292c <sleeping_thread_add+0x44>)
   12926:	605c      	str	r4, [r3, #4]
	list->head = node;
   12928:	601c      	str	r4, [r3, #0]
}
   1292a:	e7f6      	b.n	1291a <sleeping_thread_add+0x32>
   1292c:	2000c9c8 	.word	0x2000c9c8

00012930 <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   12930:	b510      	push	{r4, lr}
   12932:	4601      	mov	r1, r0
	__asm__ volatile(
   12934:	f04f 0320 	mov.w	r3, #32
   12938:	f3ef 8411 	mrs	r4, BASEPRI
   1293c:	f383 8812 	msr	BASEPRI_MAX, r3
   12940:	f3bf 8f6f 	isb	sy
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   12944:	4806      	ldr	r0, [pc, #24]	; (12960 <sleeping_thread_remove+0x30>)
   12946:	f004 fddb 	bl	17500 <sys_slist_find_and_remove>
   1294a:	f002 fd69 	bl	15420 <z_impl_z_current_get>

	entry = thread_monitor_entry_get(k_current_get());
   1294e:	f7ff ff8d 	bl	1286c <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   12952:	f7ff ffb5 	bl	128c0 <thread_monitor_entry_update>
	__asm__ volatile(
   12956:	f384 8811 	msr	BASEPRI, r4
   1295a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1295e:	bd10      	pop	{r4, pc}
   12960:	2000c9c8 	.word	0x2000c9c8

00012964 <on_init>:
	list->head = NULL;
   12964:	4b05      	ldr	r3, [pc, #20]	; (1297c <on_init+0x18>)
   12966:	2000      	movs	r0, #0
   12968:	6018      	str	r0, [r3, #0]
	list->tail = NULL;
   1296a:	6058      	str	r0, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1296c:	4b04      	ldr	r3, [pc, #16]	; (12980 <on_init+0x1c>)
   1296e:	e8d3 2fef 	ldaex	r2, [r3]
   12972:	e8c3 0fe1 	stlex	r1, r0, [r3]
   12976:	2900      	cmp	r1, #0
   12978:	d1f9      	bne.n	1296e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1297a:	4770      	bx	lr
   1297c:	2000c9c8 	.word	0x2000c9c8
   12980:	2000c9c4 	.word	0x2000c9c4

00012984 <nrf_modem_os_sem_init>:
{
   12984:	b510      	push	{r4, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   12986:	6803      	ldr	r3, [r0, #0]
   12988:	b12b      	cbz	r3, 12996 <nrf_modem_os_sem_init+0x12>
   1298a:	4c0a      	ldr	r4, [pc, #40]	; (129b4 <nrf_modem_os_sem_init+0x30>)
   1298c:	42a3      	cmp	r3, r4
   1298e:	d302      	bcc.n	12996 <nrf_modem_os_sem_init+0x12>
   12990:	3470      	adds	r4, #112	; 0x70
   12992:	42a3      	cmp	r3, r4
   12994:	d30a      	bcc.n	129ac <nrf_modem_os_sem_init+0x28>
	*sem = &nrf_modem_os_sems[used++];
   12996:	4b08      	ldr	r3, [pc, #32]	; (129b8 <nrf_modem_os_sem_init+0x34>)
   12998:	f893 c000 	ldrb.w	ip, [r3]
   1299c:	f10c 0e01 	add.w	lr, ip, #1
   129a0:	f883 e000 	strb.w	lr, [r3]
   129a4:	4b03      	ldr	r3, [pc, #12]	; (129b4 <nrf_modem_os_sem_init+0x30>)
   129a6:	eb03 130c 	add.w	r3, r3, ip, lsl #4
   129aa:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   129ac:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   129ae:	f005 f9e4 	bl	17d7a <z_impl_k_sem_init>
}
   129b2:	bd10      	pop	{r4, pc}
   129b4:	2000c954 	.word	0x2000c954
   129b8:	2000ce44 	.word	0x2000ce44

000129bc <nrf_modem_os_event_notify>:
{
   129bc:	b538      	push	{r3, r4, r5, lr}
   129be:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   129c0:	4b0d      	ldr	r3, [pc, #52]	; (129f8 <nrf_modem_os_event_notify+0x3c>)
   129c2:	e8d3 1fef 	ldaex	r1, [r3]
   129c6:	3101      	adds	r1, #1
   129c8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   129cc:	2a00      	cmp	r2, #0
   129ce:	d1f8      	bne.n	129c2 <nrf_modem_os_event_notify+0x6>
	return list->head;
   129d0:	4b0a      	ldr	r3, [pc, #40]	; (129fc <nrf_modem_os_event_notify+0x40>)
   129d2:	681c      	ldr	r4, [r3, #0]
   129d4:	e006      	b.n	129e4 <nrf_modem_os_event_notify+0x28>
			k_sem_give(&thread->sem);
   129d6:	1d20      	adds	r0, r4, #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   129d8:	f002 f950 	bl	14c7c <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   129dc:	4623      	mov	r3, r4
	return node->next;
   129de:	6824      	ldr	r4, [r4, #0]
   129e0:	b104      	cbz	r4, 129e4 <nrf_modem_os_event_notify+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   129e2:	b133      	cbz	r3, 129f2 <nrf_modem_os_event_notify+0x36>
   129e4:	b13c      	cbz	r4, 129f6 <nrf_modem_os_event_notify+0x3a>
		if ((thread->context == context) || (context == 0)) {
   129e6:	6963      	ldr	r3, [r4, #20]
   129e8:	42ab      	cmp	r3, r5
   129ea:	d0f4      	beq.n	129d6 <nrf_modem_os_event_notify+0x1a>
   129ec:	2d00      	cmp	r5, #0
   129ee:	d1f5      	bne.n	129dc <nrf_modem_os_event_notify+0x20>
   129f0:	e7f1      	b.n	129d6 <nrf_modem_os_event_notify+0x1a>
   129f2:	461c      	mov	r4, r3
   129f4:	e7f6      	b.n	129e4 <nrf_modem_os_event_notify+0x28>
}
   129f6:	bd38      	pop	{r3, r4, r5, pc}
   129f8:	2000c9c4 	.word	0x2000c9c4
   129fc:	2000c9c8 	.word	0x2000c9c8

00012a00 <nrf_modem_os_alloc>:
{
   12a00:	b508      	push	{r3, lr}
   12a02:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   12a04:	2200      	movs	r2, #0
   12a06:	2300      	movs	r3, #0
   12a08:	4801      	ldr	r0, [pc, #4]	; (12a10 <nrf_modem_os_alloc+0x10>)
   12a0a:	f005 f951 	bl	17cb0 <k_heap_alloc>
}
   12a0e:	bd08      	pop	{r3, pc}
   12a10:	2000ca20 	.word	0x2000ca20

00012a14 <nrf_modem_os_free>:
{
   12a14:	b508      	push	{r3, lr}
   12a16:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   12a18:	4801      	ldr	r0, [pc, #4]	; (12a20 <nrf_modem_os_free+0xc>)
   12a1a:	f005 f954 	bl	17cc6 <k_heap_free>
}
   12a1e:	bd08      	pop	{r3, pc}
   12a20:	2000ca20 	.word	0x2000ca20

00012a24 <nrf_modem_os_shm_tx_alloc>:
{
   12a24:	b508      	push	{r3, lr}
   12a26:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   12a28:	2200      	movs	r2, #0
   12a2a:	2300      	movs	r3, #0
   12a2c:	4801      	ldr	r0, [pc, #4]	; (12a34 <nrf_modem_os_shm_tx_alloc+0x10>)
   12a2e:	f005 f93f 	bl	17cb0 <k_heap_alloc>
}
   12a32:	bd08      	pop	{r3, pc}
   12a34:	2000ca34 	.word	0x2000ca34

00012a38 <nrf_modem_os_shm_tx_free>:
{
   12a38:	b508      	push	{r3, lr}
   12a3a:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   12a3c:	4801      	ldr	r0, [pc, #4]	; (12a44 <nrf_modem_os_shm_tx_free+0xc>)
   12a3e:	f005 f942 	bl	17cc6 <k_heap_free>
}
   12a42:	bd08      	pop	{r3, pc}
   12a44:	2000ca34 	.word	0x2000ca34

00012a48 <on_modem_lib_init>:

static void on_modem_lib_init(int ret, void *ctx)
{
	int err;

	if (ret != 0) {
   12a48:	b100      	cbz	r0, 12a4c <on_modem_lib_init+0x4>
   12a4a:	4770      	bx	lr
{
   12a4c:	b510      	push	{r4, lr}
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   12a4e:	4c05      	ldr	r4, [pc, #20]	; (12a64 <on_modem_lib_init+0x1c>)
   12a50:	4905      	ldr	r1, [pc, #20]	; (12a68 <on_modem_lib_init+0x20>)
   12a52:	4620      	mov	r0, r4
   12a54:	f001 fa3a 	bl	13ecc <nrf_modem_at_printf>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   12a58:	4904      	ldr	r1, [pc, #16]	; (12a6c <on_modem_lib_init+0x24>)
   12a5a:	4620      	mov	r0, r4
   12a5c:	f001 fa36 	bl	13ecc <nrf_modem_at_printf>
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
   12a60:	bd10      	pop	{r4, pc}
   12a62:	bf00      	nop
   12a64:	000189d4 	.word	0x000189d4
   12a68:	000189b4 	.word	0x000189b4
   12a6c:	000189d8 	.word	0x000189d8

00012a70 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   12a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a74:	b0a2      	sub	sp, #136	; 0x88
   12a76:	4604      	mov	r4, r0
   12a78:	4688      	mov	r8, r1
   12a7a:	4615      	mov	r5, r2
   12a7c:	461e      	mov	r6, r3
   12a7e:	4b11      	ldr	r3, [pc, #68]	; (12ac4 <tfm_ns_interface_dispatch+0x54>)
   12a80:	781f      	ldrb	r7, [r3, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   12a82:	b13f      	cbz	r7, 12a94 <tfm_ns_interface_dispatch+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   12a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a8c:	480e      	ldr	r0, [pc, #56]	; (12ac8 <tfm_ns_interface_dispatch+0x58>)
   12a8e:	f002 f833 	bl	14af8 <z_impl_k_mutex_lock>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   12a92:	b980      	cbnz	r0, 12ab6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   12a94:	4668      	mov	r0, sp
   12a96:	f004 f872 	bl	16b7e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   12a9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   12a9c:	4632      	mov	r2, r6
   12a9e:	4629      	mov	r1, r5
   12aa0:	4640      	mov	r0, r8
   12aa2:	47a0      	blx	r4
   12aa4:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   12aa6:	4668      	mov	r0, sp
   12aa8:	f004 f86a 	bl	16b80 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   12aac:	b92f      	cbnz	r7, 12aba <tfm_ns_interface_dispatch+0x4a>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   12aae:	4620      	mov	r0, r4
   12ab0:	b022      	add	sp, #136	; 0x88
   12ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (int32_t)TFM_ERROR_GENERIC;
   12ab6:	241f      	movs	r4, #31
   12ab8:	e7f9      	b.n	12aae <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   12aba:	4803      	ldr	r0, [pc, #12]	; (12ac8 <tfm_ns_interface_dispatch+0x58>)
   12abc:	f002 f8a0 	bl	14c00 <z_impl_k_mutex_unlock>
   12ac0:	e7f5      	b.n	12aae <tfm_ns_interface_dispatch+0x3e>
   12ac2:	bf00      	nop
   12ac4:	2000ce50 	.word	0x2000ce50
   12ac8:	2000c6d0 	.word	0x2000c6d0

00012acc <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   12acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ace:	b093      	sub	sp, #76	; 0x4c
   12ad0:	4605      	mov	r5, r0
   12ad2:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   12ad4:	af06      	add	r7, sp, #24
   12ad6:	2630      	movs	r6, #48	; 0x30
   12ad8:	4632      	mov	r2, r6
   12ada:	2100      	movs	r1, #0
   12adc:	4638      	mov	r0, r7
   12ade:	f005 fb3e 	bl	1815e <memset>
        .function_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   12ae2:	9704      	str	r7, [sp, #16]
   12ae4:	9605      	str	r6, [sp, #20]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   12ae6:	9502      	str	r5, [sp, #8]
   12ae8:	9403      	str	r4, [sp, #12]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   12aea:	b914      	cbnz	r4, 12af2 <psa_generate_random+0x26>
        return PSA_SUCCESS;
   12aec:	2000      	movs	r0, #0
    }

    return API_DISPATCH(in_vec, out_vec);
}
   12aee:	b013      	add	sp, #76	; 0x4c
   12af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return API_DISPATCH(in_vec, out_vec);
   12af2:	2301      	movs	r3, #1
   12af4:	9301      	str	r3, [sp, #4]
   12af6:	aa02      	add	r2, sp, #8
   12af8:	9200      	str	r2, [sp, #0]
   12afa:	aa04      	add	r2, sp, #16
   12afc:	2100      	movs	r1, #0
   12afe:	4802      	ldr	r0, [pc, #8]	; (12b08 <psa_generate_random+0x3c>)
   12b00:	f000 f804 	bl	12b0c <psa_call>
   12b04:	e7f3      	b.n	12aee <psa_generate_random+0x22>
   12b06:	bf00      	nop
   12b08:	40000100 	.word	0x40000100

00012b0c <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   12b0c:	b510      	push	{r4, lr}
   12b0e:	b082      	sub	sp, #8
   12b10:	9c05      	ldr	r4, [sp, #20]
    if ((type > INT16_MAX) ||
   12b12:	f501 4c00 	add.w	ip, r1, #32768	; 0x8000
   12b16:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   12b1a:	d214      	bcs.n	12b46 <psa_call+0x3a>
        (type < INT16_MIN) ||
   12b1c:	2bff      	cmp	r3, #255	; 0xff
   12b1e:	d815      	bhi.n	12b4c <psa_call+0x40>
        (in_len > UINT8_MAX) ||
   12b20:	2cff      	cmp	r4, #255	; 0xff
   12b22:	d816      	bhi.n	12b52 <psa_call+0x46>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   12b24:	021b      	lsls	r3, r3, #8
   12b26:	fa1f fc83 	uxth.w	ip, r3
   12b2a:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   12b2e:	b2e4      	uxtb	r4, r4
    return tfm_ns_interface_dispatch(
   12b30:	9b04      	ldr	r3, [sp, #16]
   12b32:	9300      	str	r3, [sp, #0]
   12b34:	4613      	mov	r3, r2
   12b36:	ea41 0204 	orr.w	r2, r1, r4
   12b3a:	4601      	mov	r1, r0
   12b3c:	4806      	ldr	r0, [pc, #24]	; (12b58 <psa_call+0x4c>)
   12b3e:	f7ff ff97 	bl	12a70 <tfm_ns_interface_dispatch>
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   12b42:	b002      	add	sp, #8
   12b44:	bd10      	pop	{r4, pc}
        return PSA_ERROR_PROGRAMMER_ERROR;
   12b46:	f06f 0080 	mvn.w	r0, #128	; 0x80
   12b4a:	e7fa      	b.n	12b42 <psa_call+0x36>
   12b4c:	f06f 0080 	mvn.w	r0, #128	; 0x80
   12b50:	e7f7      	b.n	12b42 <psa_call+0x36>
   12b52:	f06f 0080 	mvn.w	r0, #128	; 0x80
   12b56:	e7f4      	b.n	12b42 <psa_call+0x36>
   12b58:	0000fc11 	.word	0x0000fc11

00012b5c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   12b5c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   12b5e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   12b60:	fab4 f384 	clz	r3, r4
   12b64:	f1c3 031f 	rsb	r3, r3, #31
   12b68:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   12b6c:	2b00      	cmp	r3, #0
   12b6e:	db12      	blt.n	12b96 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   12b70:	2201      	movs	r2, #1
   12b72:	fa02 f303 	lsl.w	r3, r2, r3
   12b76:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12b7a:	e8d0 2fef 	ldaex	r2, [r0]
   12b7e:	42a2      	cmp	r2, r4
   12b80:	d104      	bne.n	12b8c <nrfx_flag32_alloc+0x30>
   12b82:	e8c0 3fee 	stlex	lr, r3, [r0]
   12b86:	f1be 0f00 	cmp.w	lr, #0
   12b8a:	d1f6      	bne.n	12b7a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   12b8c:	d1e7      	bne.n	12b5e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   12b8e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   12b92:	4802      	ldr	r0, [pc, #8]	; (12b9c <nrfx_flag32_alloc+0x40>)
}
   12b94:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   12b96:	4802      	ldr	r0, [pc, #8]	; (12ba0 <nrfx_flag32_alloc+0x44>)
   12b98:	e7fc      	b.n	12b94 <nrfx_flag32_alloc+0x38>
   12b9a:	bf00      	nop
   12b9c:	0bad0000 	.word	0x0bad0000
   12ba0:	0bad0002 	.word	0x0bad0002

00012ba4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   12ba4:	6803      	ldr	r3, [r0, #0]
   12ba6:	40cb      	lsrs	r3, r1
   12ba8:	f013 0f01 	tst.w	r3, #1
   12bac:	d111      	bne.n	12bd2 <nrfx_flag32_free+0x2e>
{
   12bae:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   12bb0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   12bb2:	2301      	movs	r3, #1
   12bb4:	408b      	lsls	r3, r1
   12bb6:	4313      	orrs	r3, r2
   12bb8:	e8d0 cfef 	ldaex	ip, [r0]
   12bbc:	4594      	cmp	ip, r2
   12bbe:	d104      	bne.n	12bca <nrfx_flag32_free+0x26>
   12bc0:	e8c0 3fee 	stlex	lr, r3, [r0]
   12bc4:	f1be 0f00 	cmp.w	lr, #0
   12bc8:	d1f6      	bne.n	12bb8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   12bca:	d1f1      	bne.n	12bb0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   12bcc:	4802      	ldr	r0, [pc, #8]	; (12bd8 <nrfx_flag32_free+0x34>)
}
   12bce:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   12bd2:	4802      	ldr	r0, [pc, #8]	; (12bdc <nrfx_flag32_free+0x38>)
}
   12bd4:	4770      	bx	lr
   12bd6:	bf00      	nop
   12bd8:	0bad0000 	.word	0x0bad0000
   12bdc:	0bad0004 	.word	0x0bad0004

00012be0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   12be0:	b570      	push	{r4, r5, r6, lr}
   12be2:	b082      	sub	sp, #8
    switch (domain)
   12be4:	4606      	mov	r6, r0
   12be6:	b118      	cbz	r0, 12bf0 <clock_stop+0x10>
   12be8:	2801      	cmp	r0, #1
   12bea:	d015      	beq.n	12c18 <clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   12bec:	b002      	add	sp, #8
   12bee:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   12bf0:	4b1a      	ldr	r3, [pc, #104]	; (12c5c <clock_stop+0x7c>)
   12bf2:	2202      	movs	r2, #2
   12bf4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12bf8:	2200      	movs	r2, #0
   12bfa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   12bfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c02:	2201      	movs	r2, #1
   12c04:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   12c06:	2301      	movs	r3, #1
   12c08:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   12c0c:	429e      	cmp	r6, r3
   12c0e:	d00e      	beq.n	12c2e <clock_stop+0x4e>
   12c10:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   12c12:	f242 7410 	movw	r4, #10000	; 0x2710
   12c16:	e012      	b.n	12c3e <clock_stop+0x5e>
    p_reg->INTENCLR = mask;
   12c18:	4b10      	ldr	r3, [pc, #64]	; (12c5c <clock_stop+0x7c>)
   12c1a:	2201      	movs	r2, #1
   12c1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c20:	2100      	movs	r1, #0
   12c22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   12c26:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c2a:	605a      	str	r2, [r3, #4]
}
   12c2c:	e7eb      	b.n	12c06 <clock_stop+0x26>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   12c2e:	f10d 0507 	add.w	r5, sp, #7
   12c32:	e7ee      	b.n	12c12 <clock_stop+0x32>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   12c34:	2001      	movs	r0, #1
   12c36:	f004 fd62 	bl	176fe <nrfx_busy_wait>
   12c3a:	3c01      	subs	r4, #1
   12c3c:	d0d6      	beq.n	12bec <clock_stop+0xc>
   12c3e:	462a      	mov	r2, r5
   12c40:	4631      	mov	r1, r6
   12c42:	4806      	ldr	r0, [pc, #24]	; (12c5c <clock_stop+0x7c>)
   12c44:	f004 fd5f 	bl	17706 <nrf_clock_is_running>
   12c48:	2800      	cmp	r0, #0
   12c4a:	d0cf      	beq.n	12bec <clock_stop+0xc>
   12c4c:	2d00      	cmp	r5, #0
   12c4e:	d0f1      	beq.n	12c34 <clock_stop+0x54>
   12c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c54:	2b01      	cmp	r3, #1
   12c56:	d0ed      	beq.n	12c34 <clock_stop+0x54>
   12c58:	e7c8      	b.n	12bec <clock_stop+0xc>
   12c5a:	bf00      	nop
   12c5c:	40005000 	.word	0x40005000

00012c60 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   12c60:	4b05      	ldr	r3, [pc, #20]	; (12c78 <nrfx_clock_init+0x18>)
   12c62:	791b      	ldrb	r3, [r3, #4]
   12c64:	b92b      	cbnz	r3, 12c72 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   12c66:	4b04      	ldr	r3, [pc, #16]	; (12c78 <nrfx_clock_init+0x18>)
   12c68:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   12c6a:	2201      	movs	r2, #1
   12c6c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   12c6e:	4803      	ldr	r0, [pc, #12]	; (12c7c <nrfx_clock_init+0x1c>)
   12c70:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   12c72:	4803      	ldr	r0, [pc, #12]	; (12c80 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   12c74:	4770      	bx	lr
   12c76:	bf00      	nop
   12c78:	2000ca48 	.word	0x2000ca48
   12c7c:	0bad0000 	.word	0x0bad0000
   12c80:	0bad000c 	.word	0x0bad000c

00012c84 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   12c84:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrfx_power_clock_irq_init();
   12c86:	f004 fd63 	bl	17750 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   12c8a:	f004 fd5f 	bl	1774c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12c8e:	4b02      	ldr	r3, [pc, #8]	; (12c98 <nrfx_clock_enable+0x14>)
   12c90:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   12c94:	bd08      	pop	{r3, pc}
   12c96:	bf00      	nop
   12c98:	40005000 	.word	0x40005000

00012c9c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   12c9c:	b110      	cbz	r0, 12ca4 <nrfx_clock_start+0x8>
   12c9e:	2801      	cmp	r0, #1
   12ca0:	d041      	beq.n	12d26 <nrfx_clock_start+0x8a>
   12ca2:	4770      	bx	lr
{
   12ca4:	b500      	push	{lr}
   12ca6:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12ca8:	4a24      	ldr	r2, [pc, #144]	; (12d3c <nrfx_clock_start+0xa0>)
   12caa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   12cae:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   12cb2:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12cb6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   12cba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12cbe:	d11b      	bne.n	12cf8 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   12cc0:	4b1e      	ldr	r3, [pc, #120]	; (12d3c <nrfx_clock_start+0xa0>)
   12cc2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   12cc6:	f013 0f01 	tst.w	r3, #1
   12cca:	d11a      	bne.n	12d02 <nrfx_clock_start+0x66>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
   12ccc:	f004 fd3e 	bl	1774c <clock_initial_lfclksrc_get>
   12cd0:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   12cd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   12cd8:	4b18      	ldr	r3, [pc, #96]	; (12d3c <nrfx_clock_start+0xa0>)
   12cda:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12cde:	2200      	movs	r2, #0
   12ce0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   12ce4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   12ce8:	2202      	movs	r2, #2
   12cea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12cee:	2201      	movs	r2, #1
   12cf0:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   12cf2:	b003      	add	sp, #12
   12cf4:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   12cf8:	f10d 0007 	add.w	r0, sp, #7
   12cfc:	f004 fd32 	bl	17764 <clock_lfclksrc_tweak>
   12d00:	e7e8      	b.n	12cd4 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12d02:	4b0e      	ldr	r3, [pc, #56]	; (12d3c <nrfx_clock_start+0xa0>)
   12d04:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12d08:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   12d0c:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   12d10:	f10d 0007 	add.w	r0, sp, #7
   12d14:	f004 fd26 	bl	17764 <clock_lfclksrc_tweak>
   12d18:	2800      	cmp	r0, #0
   12d1a:	d0db      	beq.n	12cd4 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
   12d1c:	4b07      	ldr	r3, [pc, #28]	; (12d3c <nrfx_clock_start+0xa0>)
   12d1e:	2202      	movs	r2, #2
   12d20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   12d24:	e7e5      	b.n	12cf2 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d26:	4b05      	ldr	r3, [pc, #20]	; (12d3c <nrfx_clock_start+0xa0>)
   12d28:	2200      	movs	r2, #0
   12d2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12d2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   12d32:	2201      	movs	r2, #1
   12d34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d38:	601a      	str	r2, [r3, #0]
   12d3a:	4770      	bx	lr
   12d3c:	40005000 	.word	0x40005000

00012d40 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   12d40:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12d42:	4b19      	ldr	r3, [pc, #100]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   12d48:	b15b      	cbz	r3, 12d62 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d4a:	4b17      	ldr	r3, [pc, #92]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d4c:	2000      	movs	r0, #0
   12d4e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   12d52:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   12d56:	2201      	movs	r2, #1
   12d58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   12d5c:	4b13      	ldr	r3, [pc, #76]	; (12dac <nrfx_power_clock_irq_handler+0x6c>)
   12d5e:	681b      	ldr	r3, [r3, #0]
   12d60:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12d62:	4b11      	ldr	r3, [pc, #68]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d64:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   12d68:	b1ab      	cbz	r3, 12d96 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d6a:	4b0f      	ldr	r3, [pc, #60]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d6c:	2200      	movs	r2, #0
   12d6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   12d72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12d76:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   12d7a:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12d7e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   12d82:	2a01      	cmp	r2, #1
   12d84:	d008      	beq.n	12d98 <nrfx_power_clock_irq_handler+0x58>
    p_reg->INTENCLR = mask;
   12d86:	4b08      	ldr	r3, [pc, #32]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d88:	2202      	movs	r2, #2
   12d8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12d8e:	4b07      	ldr	r3, [pc, #28]	; (12dac <nrfx_power_clock_irq_handler+0x6c>)
   12d90:	681b      	ldr	r3, [r3, #0]
   12d92:	2001      	movs	r0, #1
   12d94:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   12d96:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   12d98:	4b03      	ldr	r3, [pc, #12]	; (12da8 <nrfx_power_clock_irq_handler+0x68>)
   12d9a:	2202      	movs	r2, #2
   12d9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12da0:	2201      	movs	r2, #1
   12da2:	609a      	str	r2, [r3, #8]
}
   12da4:	e7f7      	b.n	12d96 <nrfx_power_clock_irq_handler+0x56>
   12da6:	bf00      	nop
   12da8:	40005000 	.word	0x40005000
   12dac:	2000ca48 	.word	0x2000ca48

00012db0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   12db0:	b508      	push	{r3, lr}
   12db2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   12db4:	4801      	ldr	r0, [pc, #4]	; (12dbc <nrfx_dppi_channel_alloc+0xc>)
   12db6:	f7ff fed1 	bl	12b5c <nrfx_flag32_alloc>
}
   12dba:	bd08      	pop	{r3, pc}
   12dbc:	2000c5a8 	.word	0x2000c5a8

00012dc0 <nrf_gpio_reconfigure>:
{
   12dc0:	b4f0      	push	{r4, r5, r6, r7}
   12dc2:	461c      	mov	r4, r3
   12dc4:	9e04      	ldr	r6, [sp, #16]
   12dc6:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   12dc8:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12dcc:	f100 0780 	add.w	r7, r0, #128	; 0x80
   12dd0:	4b26      	ldr	r3, [pc, #152]	; (12e6c <nrf_gpio_reconfigure+0xac>)
   12dd2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12dd6:	460b      	mov	r3, r1
   12dd8:	b379      	cbz	r1, 12e3a <nrf_gpio_reconfigure+0x7a>
   12dda:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12ddc:	b37a      	cbz	r2, 12e3e <nrf_gpio_reconfigure+0x7e>
   12dde:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12de2:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   12de6:	b36c      	cbz	r4, 12e44 <nrf_gpio_reconfigure+0x84>
   12de8:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12dec:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   12df0:	b35e      	cbz	r6, 12e4a <nrf_gpio_reconfigure+0x8a>
   12df2:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   12df6:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   12dfa:	b34d      	cbz	r5, 12e50 <nrf_gpio_reconfigure+0x90>
   12dfc:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12e00:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   12e04:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12e08:	b32b      	cbz	r3, 12e56 <nrf_gpio_reconfigure+0x96>
   12e0a:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   12e0c:	b32a      	cbz	r2, 12e5a <nrf_gpio_reconfigure+0x9a>
   12e0e:	7812      	ldrb	r2, [r2, #0]
   12e10:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12e12:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12e14:	b31c      	cbz	r4, 12e5e <nrf_gpio_reconfigure+0x9e>
   12e16:	7822      	ldrb	r2, [r4, #0]
   12e18:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   12e1a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12e1c:	b30e      	cbz	r6, 12e62 <nrf_gpio_reconfigure+0xa2>
   12e1e:	7832      	ldrb	r2, [r6, #0]
   12e20:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12e22:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   12e24:	b1fd      	cbz	r5, 12e66 <nrf_gpio_reconfigure+0xa6>
   12e26:	782a      	ldrb	r2, [r5, #0]
   12e28:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12e2a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12e2c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   12e2e:	3080      	adds	r0, #128	; 0x80
   12e30:	4a0e      	ldr	r2, [pc, #56]	; (12e6c <nrf_gpio_reconfigure+0xac>)
   12e32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   12e36:	bcf0      	pop	{r4, r5, r6, r7}
   12e38:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12e3a:	2100      	movs	r1, #0
   12e3c:	e7ce      	b.n	12ddc <nrf_gpio_reconfigure+0x1c>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12e3e:	f04f 0c00 	mov.w	ip, #0
   12e42:	e7ce      	b.n	12de2 <nrf_gpio_reconfigure+0x22>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   12e44:	f04f 0c00 	mov.w	ip, #0
   12e48:	e7d0      	b.n	12dec <nrf_gpio_reconfigure+0x2c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   12e4a:	f04f 0c00 	mov.w	ip, #0
   12e4e:	e7d2      	b.n	12df6 <nrf_gpio_reconfigure+0x36>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   12e50:	f04f 0c00 	mov.w	ip, #0
   12e54:	e7d4      	b.n	12e00 <nrf_gpio_reconfigure+0x40>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12e56:	2300      	movs	r3, #0
   12e58:	e7d8      	b.n	12e0c <nrf_gpio_reconfigure+0x4c>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   12e5a:	2200      	movs	r2, #0
   12e5c:	e7d9      	b.n	12e12 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12e5e:	2200      	movs	r2, #0
   12e60:	e7db      	b.n	12e1a <nrf_gpio_reconfigure+0x5a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12e62:	2200      	movs	r2, #0
   12e64:	e7dd      	b.n	12e22 <nrf_gpio_reconfigure+0x62>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   12e66:	2200      	movs	r2, #0
   12e68:	e7df      	b.n	12e2a <nrf_gpio_reconfigure+0x6a>
   12e6a:	bf00      	nop
   12e6c:	40842500 	.word	0x40842500

00012e70 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   12e70:	3008      	adds	r0, #8
   12e72:	4b03      	ldr	r3, [pc, #12]	; (12e80 <pin_in_use+0x10>)
   12e74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12e78:	f000 0001 	and.w	r0, r0, #1
   12e7c:	4770      	bx	lr
   12e7e:	bf00      	nop
   12e80:	2000c5ac 	.word	0x2000c5ac

00012e84 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   12e84:	3008      	adds	r0, #8
   12e86:	4b03      	ldr	r3, [pc, #12]	; (12e94 <pin_in_use_by_te+0x10>)
   12e88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12e8c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   12e90:	4770      	bx	lr
   12e92:	bf00      	nop
   12e94:	2000c5ac 	.word	0x2000c5ac

00012e98 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   12e98:	3008      	adds	r0, #8
   12e9a:	4b04      	ldr	r3, [pc, #16]	; (12eac <pin_has_trigger+0x14>)
   12e9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12ea0:	f010 001c 	ands.w	r0, r0, #28
   12ea4:	bf18      	it	ne
   12ea6:	2001      	movne	r0, #1
   12ea8:	4770      	bx	lr
   12eaa:	bf00      	nop
   12eac:	2000c5ac 	.word	0x2000c5ac

00012eb0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12eb0:	3008      	adds	r0, #8
   12eb2:	4b03      	ldr	r3, [pc, #12]	; (12ec0 <pin_is_output+0x10>)
   12eb4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12eb8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   12ebc:	4770      	bx	lr
   12ebe:	bf00      	nop
   12ec0:	2000c5ac 	.word	0x2000c5ac

00012ec4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   12ec4:	3008      	adds	r0, #8
   12ec6:	4b02      	ldr	r3, [pc, #8]	; (12ed0 <pin_te_get+0xc>)
   12ec8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12ecc:	0b40      	lsrs	r0, r0, #13
   12ece:	4770      	bx	lr
   12ed0:	2000c5ac 	.word	0x2000c5ac

00012ed4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   12ed4:	2200      	movs	r2, #0
   12ed6:	e004      	b.n	12ee2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   12ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12edc:	4283      	cmp	r3, r0
   12ede:	d00f      	beq.n	12f00 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   12ee0:	3201      	adds	r2, #1
   12ee2:	2a1f      	cmp	r2, #31
   12ee4:	d80a      	bhi.n	12efc <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   12ee6:	f102 0308 	add.w	r3, r2, #8
   12eea:	4906      	ldr	r1, [pc, #24]	; (12f04 <handler_in_use+0x30>)
   12eec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12ef0:	f413 7f80 	tst.w	r3, #256	; 0x100
   12ef4:	d0f0      	beq.n	12ed8 <handler_in_use+0x4>
   12ef6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   12efa:	e7ef      	b.n	12edc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   12efc:	2000      	movs	r0, #0
   12efe:	4770      	bx	lr
            return true;
   12f00:	2001      	movs	r0, #1
}
   12f02:	4770      	bx	lr
   12f04:	2000c5ac 	.word	0x2000c5ac

00012f08 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   12f08:	2300      	movs	r3, #0
   12f0a:	b113      	cbz	r3, 12f12 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   12f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12f10:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   12f12:	4a07      	ldr	r2, [pc, #28]	; (12f30 <find_handler+0x28>)
   12f14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   12f18:	4282      	cmp	r2, r0
   12f1a:	d001      	beq.n	12f20 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   12f1c:	3301      	adds	r3, #1
   12f1e:	e7f4      	b.n	12f0a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   12f20:	4a03      	ldr	r2, [pc, #12]	; (12f30 <find_handler+0x28>)
   12f22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   12f26:	6852      	ldr	r2, [r2, #4]
   12f28:	428a      	cmp	r2, r1
   12f2a:	d1f7      	bne.n	12f1c <find_handler+0x14>
            return i;
   12f2c:	4618      	mov	r0, r3
   12f2e:	4770      	bx	lr
   12f30:	2000c5ac 	.word	0x2000c5ac

00012f34 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   12f34:	f100 0208 	add.w	r2, r0, #8
   12f38:	4b0c      	ldr	r3, [pc, #48]	; (12f6c <get_initial_sense+0x38>)
   12f3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   12f3e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   12f42:	2b04      	cmp	r3, #4
   12f44:	d00b      	beq.n	12f5e <get_initial_sense+0x2a>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   12f46:	2b05      	cmp	r3, #5
   12f48:	d00b      	beq.n	12f62 <get_initial_sense+0x2e>
    *p_pin = pin_number & 0x1F;
   12f4a:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
   12f4e:	4b08      	ldr	r3, [pc, #32]	; (12f70 <get_initial_sense+0x3c>)
   12f50:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   12f52:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12f54:	f013 0f01 	tst.w	r3, #1
   12f58:	d005      	beq.n	12f66 <get_initial_sense+0x32>
   12f5a:	2003      	movs	r0, #3
   12f5c:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
   12f5e:	2003      	movs	r0, #3
   12f60:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   12f62:	2002      	movs	r0, #2
   12f64:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12f66:	2002      	movs	r0, #2
    }

    return sense;
}
   12f68:	4770      	bx	lr
   12f6a:	bf00      	nop
   12f6c:	2000c5ac 	.word	0x2000c5ac
   12f70:	40842500 	.word	0x40842500

00012f74 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   12f74:	3008      	adds	r0, #8
   12f76:	4b06      	ldr	r3, [pc, #24]	; (12f90 <channel_handler_get+0x1c>)
   12f78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12f7c:	f410 7f80 	tst.w	r0, #256	; 0x100
   12f80:	d004      	beq.n	12f8c <channel_handler_get+0x18>
   12f82:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   12f86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12f8a:	4770      	bx	lr
        return NULL;
   12f8c:	2000      	movs	r0, #0
}
   12f8e:	4770      	bx	lr
   12f90:	2000c5ac 	.word	0x2000c5ac

00012f94 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   12f94:	b570      	push	{r4, r5, r6, lr}
   12f96:	4604      	mov	r4, r0
   12f98:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   12f9a:	f7ff ffeb 	bl	12f74 <channel_handler_get>

    if (handler)
   12f9e:	b120      	cbz	r0, 12faa <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   12fa0:	6806      	ldr	r6, [r0, #0]
   12fa2:	6842      	ldr	r2, [r0, #4]
   12fa4:	4629      	mov	r1, r5
   12fa6:	4620      	mov	r0, r4
   12fa8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   12faa:	4b04      	ldr	r3, [pc, #16]	; (12fbc <call_handler+0x28>)
   12fac:	689b      	ldr	r3, [r3, #8]
   12fae:	b123      	cbz	r3, 12fba <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   12fb0:	4a02      	ldr	r2, [pc, #8]	; (12fbc <call_handler+0x28>)
   12fb2:	68d2      	ldr	r2, [r2, #12]
   12fb4:	4629      	mov	r1, r5
   12fb6:	4620      	mov	r0, r4
   12fb8:	4798      	blx	r3
    }
}
   12fba:	bd70      	pop	{r4, r5, r6, pc}
   12fbc:	2000c5ac 	.word	0x2000c5ac

00012fc0 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   12fc0:	b570      	push	{r4, r5, r6, lr}
   12fc2:	4604      	mov	r4, r0
   12fc4:	460d      	mov	r5, r1
   12fc6:	4616      	mov	r6, r2
    if (is_level(trigger))
   12fc8:	4608      	mov	r0, r1
   12fca:	f004 fc34 	bl	17836 <is_level>
   12fce:	b9a8      	cbnz	r0, 12ffc <next_sense_cond_call_handler+0x3c>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12fd0:	2e02      	cmp	r6, #2
   12fd2:	d033      	beq.n	1303c <next_sense_cond_call_handler+0x7c>
   12fd4:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   12fd6:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12fda:	491e      	ldr	r1, [pc, #120]	; (13054 <next_sense_cond_call_handler+0x94>)
   12fdc:	3380      	adds	r3, #128	; 0x80
   12fde:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   12fe2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12fe6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   12fee:	2d03      	cmp	r5, #3
   12ff0:	d028      	beq.n	13044 <next_sense_cond_call_handler+0x84>
   12ff2:	2e02      	cmp	r6, #2
   12ff4:	d024      	beq.n	13040 <next_sense_cond_call_handler+0x80>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   12ff6:	2e03      	cmp	r6, #3
   12ff8:	d029      	beq.n	1304e <next_sense_cond_call_handler+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   12ffa:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   12ffc:	4629      	mov	r1, r5
   12ffe:	4620      	mov	r0, r4
   13000:	f7ff ffc8 	bl	12f94 <call_handler>
    *p_pin = pin_number & 0x1F;
   13004:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13008:	f104 0280 	add.w	r2, r4, #128	; 0x80
   1300c:	4b11      	ldr	r3, [pc, #68]	; (13054 <next_sense_cond_call_handler+0x94>)
   1300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13012:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   13016:	429e      	cmp	r6, r3
   13018:	d1ef      	bne.n	12ffa <next_sense_cond_call_handler+0x3a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1301a:	4a0e      	ldr	r2, [pc, #56]	; (13054 <next_sense_cond_call_handler+0x94>)
   1301c:	3480      	adds	r4, #128	; 0x80
   1301e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   13022:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   13026:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1302a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   1302e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   13036:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   1303a:	e7de      	b.n	12ffa <next_sense_cond_call_handler+0x3a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1303c:	2003      	movs	r0, #3
   1303e:	e7ca      	b.n	12fd6 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   13040:	2d01      	cmp	r5, #1
   13042:	d1d8      	bne.n	12ff6 <next_sense_cond_call_handler+0x36>
            call_handler(pin, trigger);
   13044:	4629      	mov	r1, r5
   13046:	4620      	mov	r0, r4
   13048:	f7ff ffa4 	bl	12f94 <call_handler>
}
   1304c:	e7d5      	b.n	12ffa <next_sense_cond_call_handler+0x3a>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1304e:	2d02      	cmp	r5, #2
   13050:	d1d3      	bne.n	12ffa <next_sense_cond_call_handler+0x3a>
   13052:	e7f7      	b.n	13044 <next_sense_cond_call_handler+0x84>
   13054:	40842500 	.word	0x40842500

00013058 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   13058:	4684      	mov	ip, r0
   1305a:	2300      	movs	r3, #0
   1305c:	e005      	b.n	1306a <latch_pending_read_and_check+0x12>
        *p_masks = gpio_regs[i]->LATCH;
   1305e:	4a09      	ldr	r2, [pc, #36]	; (13084 <latch_pending_read_and_check+0x2c>)
   13060:	6a11      	ldr	r1, [r2, #32]
   13062:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   13066:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   13068:	3301      	adds	r3, #1
   1306a:	2b00      	cmp	r3, #0
   1306c:	d0f7      	beq.n	1305e <latch_pending_read_and_check+0x6>
#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1306e:	2300      	movs	r3, #0
   13070:	b10b      	cbz	r3, 13076 <latch_pending_read_and_check+0x1e>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   13072:	2000      	movs	r0, #0
   13074:	4770      	bx	lr
        if (latch[port_idx])
   13076:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   1307a:	b90a      	cbnz	r2, 13080 <latch_pending_read_and_check+0x28>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1307c:	3301      	adds	r3, #1
   1307e:	e7f7      	b.n	13070 <latch_pending_read_and_check+0x18>
            return true;
   13080:	2001      	movs	r0, #1
}
   13082:	4770      	bx	lr
   13084:	40842500 	.word	0x40842500

00013088 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13088:	f100 0208 	add.w	r2, r0, #8
   1308c:	4b0e      	ldr	r3, [pc, #56]	; (130c8 <release_handler+0x40>)
   1308e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   13092:	f413 7f80 	tst.w	r3, #256	; 0x100
   13096:	d016      	beq.n	130c6 <release_handler+0x3e>
{
   13098:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1309a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1309e:	4610      	mov	r0, r2
   130a0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   130a4:	4a08      	ldr	r2, [pc, #32]	; (130c8 <release_handler+0x40>)
   130a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   130aa:	4620      	mov	r0, r4
   130ac:	f7ff ff12 	bl	12ed4 <handler_in_use>
   130b0:	b100      	cbz	r0, 130b4 <release_handler+0x2c>
}
   130b2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   130b4:	4804      	ldr	r0, [pc, #16]	; (130c8 <release_handler+0x40>)
   130b6:	2300      	movs	r3, #0
   130b8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   130bc:	4621      	mov	r1, r4
   130be:	3054      	adds	r0, #84	; 0x54
   130c0:	f7ff fd70 	bl	12ba4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   130c4:	e7f5      	b.n	130b2 <release_handler+0x2a>
   130c6:	4770      	bx	lr
   130c8:	2000c5ac 	.word	0x2000c5ac

000130cc <pin_handler_trigger_uninit>:
{
   130cc:	b510      	push	{r4, lr}
   130ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   130d0:	f7ff fed8 	bl	12e84 <pin_in_use_by_te>
   130d4:	b150      	cbz	r0, 130ec <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   130d6:	4620      	mov	r0, r4
   130d8:	f7ff fef4 	bl	12ec4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   130dc:	4b08      	ldr	r3, [pc, #32]	; (13100 <pin_handler_trigger_uninit+0x34>)
   130de:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   130e2:	2200      	movs	r2, #0
   130e4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   130e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   130ec:	4620      	mov	r0, r4
   130ee:	f7ff ffcb 	bl	13088 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   130f2:	3408      	adds	r4, #8
   130f4:	4b03      	ldr	r3, [pc, #12]	; (13104 <pin_handler_trigger_uninit+0x38>)
   130f6:	2200      	movs	r2, #0
   130f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   130fc:	bd10      	pop	{r4, pc}
   130fe:	bf00      	nop
   13100:	40031000 	.word	0x40031000
   13104:	2000c5ac 	.word	0x2000c5ac

00013108 <pin_handler_set>:
{
   13108:	b570      	push	{r4, r5, r6, lr}
   1310a:	b082      	sub	sp, #8
   1310c:	4605      	mov	r5, r0
   1310e:	460e      	mov	r6, r1
   13110:	4614      	mov	r4, r2
    release_handler(pin);
   13112:	f7ff ffb9 	bl	13088 <release_handler>
    if (!handler)
   13116:	b326      	cbz	r6, 13162 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   13118:	4621      	mov	r1, r4
   1311a:	4630      	mov	r0, r6
   1311c:	f7ff fef4 	bl	12f08 <find_handler>
    if (handler_id < 0)
   13120:	1e03      	subs	r3, r0, #0
   13122:	db13      	blt.n	1314c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   13124:	4910      	ldr	r1, [pc, #64]	; (13168 <pin_handler_set+0x60>)
   13126:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1312a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1312e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13130:	f105 0008 	add.w	r0, r5, #8
   13134:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   13138:	025b      	lsls	r3, r3, #9
   1313a:	b29b      	uxth	r3, r3
   1313c:	4313      	orrs	r3, r2
   1313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13142:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   13146:	4809      	ldr	r0, [pc, #36]	; (1316c <pin_handler_set+0x64>)
}
   13148:	b002      	add	sp, #8
   1314a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1314c:	f10d 0107 	add.w	r1, sp, #7
   13150:	4807      	ldr	r0, [pc, #28]	; (13170 <pin_handler_set+0x68>)
   13152:	f7ff fd03 	bl	12b5c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   13156:	4b05      	ldr	r3, [pc, #20]	; (1316c <pin_handler_set+0x64>)
   13158:	4298      	cmp	r0, r3
   1315a:	d1f5      	bne.n	13148 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1315c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13160:	e7e0      	b.n	13124 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   13162:	4802      	ldr	r0, [pc, #8]	; (1316c <pin_handler_set+0x64>)
   13164:	e7f0      	b.n	13148 <pin_handler_set+0x40>
   13166:	bf00      	nop
   13168:	2000c5ac 	.word	0x2000c5ac
   1316c:	0bad0000 	.word	0x0bad0000
   13170:	2000c600 	.word	0x2000c600

00013174 <port_event_handle>:

static void port_event_handle(void)
{
   13174:	b5f0      	push	{r4, r5, r6, r7, lr}
   13176:	b083      	sub	sp, #12
   13178:	2300      	movs	r3, #0
   1317a:	a801      	add	r0, sp, #4
   1317c:	e005      	b.n	1318a <port_event_handle+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   1317e:	4a23      	ldr	r2, [pc, #140]	; (1320c <port_event_handle+0x98>)
   13180:	6a11      	ldr	r1, [r2, #32]
   13182:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   13186:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   13188:	3301      	adds	r3, #1
   1318a:	2b00      	cmp	r3, #0
   1318c:	d0f7      	beq.n	1317e <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1318e:	2400      	movs	r4, #0
   13190:	b394      	cbz	r4, 131f8 <port_event_handle+0x84>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13192:	4b1f      	ldr	r3, [pc, #124]	; (13210 <port_event_handle+0x9c>)
   13194:	2200      	movs	r2, #0
   13196:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1319a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1319e:	a801      	add	r0, sp, #4
   131a0:	f7ff ff5a 	bl	13058 <latch_pending_read_and_check>
   131a4:	2800      	cmp	r0, #0
   131a6:	d1f2      	bne.n	1318e <port_event_handle+0x1a>
}
   131a8:	b003      	add	sp, #12
   131aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   131ac:	fa90 f0a0 	rbit	r0, r0
   131b0:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   131b4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   131b8:	f100 0208 	add.w	r2, r0, #8
   131bc:	4b15      	ldr	r3, [pc, #84]	; (13214 <port_event_handle+0xa0>)
   131be:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   131c2:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   131c4:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   131c8:	af01      	add	r7, sp, #4
   131ca:	5dba      	ldrb	r2, [r7, r6]
   131cc:	2501      	movs	r5, #1
   131ce:	fa05 f303 	lsl.w	r3, r5, r3
   131d2:	43db      	mvns	r3, r3
   131d4:	b25b      	sxtb	r3, r3
   131d6:	4013      	ands	r3, r2
   131d8:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   131da:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   131de:	4e0b      	ldr	r6, [pc, #44]	; (1320c <port_event_handle+0x98>)
   131e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
   131e4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   131e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
   131ec:	f3c1 0182 	ubfx	r1, r1, #2, #3
   131f0:	f7ff fee6 	bl	12fc0 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   131f4:	40bd      	lsls	r5, r7
   131f6:	6235      	str	r5, [r6, #32]
            while (latch[i])
   131f8:	ab02      	add	r3, sp, #8
   131fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   131fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
   13202:	2800      	cmp	r0, #0
   13204:	d1d2      	bne.n	131ac <port_event_handle+0x38>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13206:	3401      	adds	r4, #1
   13208:	e7c2      	b.n	13190 <port_event_handle+0x1c>
   1320a:	bf00      	nop
   1320c:	40842500 	.word	0x40842500
   13210:	40031000 	.word	0x40031000
   13214:	2000c5ac 	.word	0x2000c5ac

00013218 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   13218:	b538      	push	{r3, r4, r5, lr}
   1321a:	4604      	mov	r4, r0
    while (mask)
   1321c:	e018      	b.n	13250 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   1321e:	fa94 f3a4 	rbit	r3, r4
   13222:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   13226:	2201      	movs	r2, #1
   13228:	409a      	lsls	r2, r3
   1322a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1322e:	4a0a      	ldr	r2, [pc, #40]	; (13258 <gpiote_evt_handle+0x40>)
   13230:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   13234:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   13238:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1323c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13240:	f3c0 4001 	ubfx	r0, r0, #16, #2
   13244:	f004 faf5 	bl	17832 <gpiote_polarity_to_trigger>
   13248:	4601      	mov	r1, r0
   1324a:	4628      	mov	r0, r5
   1324c:	f7ff fea2 	bl	12f94 <call_handler>
    while (mask)
   13250:	2c00      	cmp	r4, #0
   13252:	d1e4      	bne.n	1321e <gpiote_evt_handle+0x6>
    }
}
   13254:	bd38      	pop	{r3, r4, r5, pc}
   13256:	bf00      	nop
   13258:	40031000 	.word	0x40031000

0001325c <nrfx_gpiote_input_configure>:
{
   1325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13260:	b084      	sub	sp, #16
   13262:	4604      	mov	r4, r0
   13264:	4615      	mov	r5, r2
   13266:	461e      	mov	r6, r3
    if (p_input_config)
   13268:	b309      	cbz	r1, 132ae <nrfx_gpiote_input_configure+0x52>
   1326a:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1326c:	f004 facb 	bl	17806 <pin_is_task_output>
   13270:	2800      	cmp	r0, #0
   13272:	d13f      	bne.n	132f4 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   13274:	2300      	movs	r3, #0
   13276:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1327a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1327e:	9301      	str	r3, [sp, #4]
   13280:	9300      	str	r3, [sp, #0]
   13282:	463b      	mov	r3, r7
   13284:	f10d 020f 	add.w	r2, sp, #15
   13288:	f10d 010e 	add.w	r1, sp, #14
   1328c:	4620      	mov	r0, r4
   1328e:	f7ff fd97 	bl	12dc0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   13292:	4a39      	ldr	r2, [pc, #228]	; (13378 <nrfx_gpiote_input_configure+0x11c>)
   13294:	f104 0108 	add.w	r1, r4, #8
   13298:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1329c:	f023 0302 	bic.w	r3, r3, #2
   132a0:	b29b      	uxth	r3, r3
   132a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   132a6:	f043 0301 	orr.w	r3, r3, #1
   132aa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   132ae:	b1bd      	cbz	r5, 132e0 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   132b0:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   132b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   132b6:	4620      	mov	r0, r4
   132b8:	f7ff fdfa 	bl	12eb0 <pin_is_output>
   132bc:	b1e0      	cbz	r0, 132f8 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   132be:	f1b8 0f00 	cmp.w	r8, #0
   132c2:	d153      	bne.n	1336c <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   132c4:	4a2c      	ldr	r2, [pc, #176]	; (13378 <nrfx_gpiote_input_configure+0x11c>)
   132c6:	f104 0108 	add.w	r1, r4, #8
   132ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   132ce:	f023 031c 	bic.w	r3, r3, #28
   132d2:	b29b      	uxth	r3, r3
   132d4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   132d8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   132dc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   132e0:	2e00      	cmp	r6, #0
   132e2:	d047      	beq.n	13374 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   132e4:	6872      	ldr	r2, [r6, #4]
   132e6:	6831      	ldr	r1, [r6, #0]
   132e8:	4620      	mov	r0, r4
   132ea:	f7ff ff0d 	bl	13108 <pin_handler_set>
}
   132ee:	b004      	add	sp, #16
   132f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   132f4:	4821      	ldr	r0, [pc, #132]	; (1337c <nrfx_gpiote_input_configure+0x120>)
   132f6:	e7fa      	b.n	132ee <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   132f8:	4a1f      	ldr	r2, [pc, #124]	; (13378 <nrfx_gpiote_input_configure+0x11c>)
   132fa:	f104 0108 	add.w	r1, r4, #8
   132fe:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13302:	f023 0320 	bic.w	r3, r3, #32
   13306:	04db      	lsls	r3, r3, #19
   13308:	0cdb      	lsrs	r3, r3, #19
   1330a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   1330e:	f1b8 0f00 	cmp.w	r8, #0
   13312:	d0d7      	beq.n	132c4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   13314:	2f03      	cmp	r7, #3
   13316:	d82b      	bhi.n	13370 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
   13318:	686b      	ldr	r3, [r5, #4]
   1331a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1331c:	b947      	cbnz	r7, 13330 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
   1331e:	4b18      	ldr	r3, [pc, #96]	; (13380 <nrfx_gpiote_input_configure+0x124>)
   13320:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   13324:	2200      	movs	r2, #0
   13326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   1332a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   1332e:	e7c9      	b.n	132c4 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   13330:	4638      	mov	r0, r7
   13332:	f004 fa7f 	bl	17834 <gpiote_trigger_to_polarity>
   13336:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13338:	4811      	ldr	r0, [pc, #68]	; (13380 <nrfx_gpiote_input_configure+0x124>)
   1333a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1333e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   13342:	f022 0203 	bic.w	r2, r2, #3
   13346:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   1334a:	4622      	mov	r2, r4
   1334c:	4629      	mov	r1, r5
   1334e:	f004 fa22 	bl	17796 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13352:	4a09      	ldr	r2, [pc, #36]	; (13378 <nrfx_gpiote_input_configure+0x11c>)
   13354:	f104 0108 	add.w	r1, r4, #8
   13358:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1335c:	036d      	lsls	r5, r5, #13
   1335e:	b2ad      	uxth	r5, r5
   13360:	432b      	orrs	r3, r5
   13362:	f043 0320 	orr.w	r3, r3, #32
   13366:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   1336a:	e7ab      	b.n	132c4 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   1336c:	4803      	ldr	r0, [pc, #12]	; (1337c <nrfx_gpiote_input_configure+0x120>)
   1336e:	e7be      	b.n	132ee <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   13370:	4802      	ldr	r0, [pc, #8]	; (1337c <nrfx_gpiote_input_configure+0x120>)
   13372:	e7bc      	b.n	132ee <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   13374:	4803      	ldr	r0, [pc, #12]	; (13384 <nrfx_gpiote_input_configure+0x128>)
   13376:	e7ba      	b.n	132ee <nrfx_gpiote_input_configure+0x92>
   13378:	2000c5ac 	.word	0x2000c5ac
   1337c:	0bad0004 	.word	0x0bad0004
   13380:	40031000 	.word	0x40031000
   13384:	0bad0000 	.word	0x0bad0000

00013388 <nrfx_gpiote_output_configure>:
{
   13388:	b570      	push	{r4, r5, r6, lr}
   1338a:	b084      	sub	sp, #16
   1338c:	4604      	mov	r4, r0
   1338e:	4615      	mov	r5, r2
    if (p_config)
   13390:	b329      	cbz	r1, 133de <nrfx_gpiote_output_configure+0x56>
   13392:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13394:	f004 fa46 	bl	17824 <pin_is_input>
   13398:	b120      	cbz	r0, 133a4 <nrfx_gpiote_output_configure+0x1c>
   1339a:	4620      	mov	r0, r4
   1339c:	f7ff fd72 	bl	12e84 <pin_in_use_by_te>
   133a0:	2800      	cmp	r0, #0
   133a2:	d13c      	bne.n	1341e <nrfx_gpiote_output_configure+0x96>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   133a4:	4620      	mov	r0, r4
   133a6:	f7ff fd77 	bl	12e98 <pin_has_trigger>
   133aa:	b110      	cbz	r0, 133b2 <nrfx_gpiote_output_configure+0x2a>
   133ac:	7873      	ldrb	r3, [r6, #1]
   133ae:	2b01      	cmp	r3, #1
   133b0:	d035      	beq.n	1341e <nrfx_gpiote_output_configure+0x96>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   133b2:	2301      	movs	r3, #1
   133b4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   133b8:	2300      	movs	r3, #0
   133ba:	9301      	str	r3, [sp, #4]
   133bc:	9600      	str	r6, [sp, #0]
   133be:	1cb3      	adds	r3, r6, #2
   133c0:	1c72      	adds	r2, r6, #1
   133c2:	f10d 010f 	add.w	r1, sp, #15
   133c6:	4620      	mov	r0, r4
   133c8:	f7ff fcfa 	bl	12dc0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   133cc:	4a22      	ldr	r2, [pc, #136]	; (13458 <nrfx_gpiote_output_configure+0xd0>)
   133ce:	f104 0108 	add.w	r1, r4, #8
   133d2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   133d6:	f043 0303 	orr.w	r3, r3, #3
   133da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   133de:	2d00      	cmp	r5, #0
   133e0:	d036      	beq.n	13450 <nrfx_gpiote_output_configure+0xc8>
        if (pin_is_input(pin))
   133e2:	4620      	mov	r0, r4
   133e4:	f004 fa1e 	bl	17824 <pin_is_input>
   133e8:	2800      	cmp	r0, #0
   133ea:	d133      	bne.n	13454 <nrfx_gpiote_output_configure+0xcc>
        uint32_t ch = p_task_config->task_ch;
   133ec:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   133ee:	4b1b      	ldr	r3, [pc, #108]	; (1345c <nrfx_gpiote_output_configure+0xd4>)
   133f0:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   133f4:	2100      	movs	r1, #0
   133f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   133fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   133fe:	4a16      	ldr	r2, [pc, #88]	; (13458 <nrfx_gpiote_output_configure+0xd0>)
   13400:	f104 0108 	add.w	r1, r4, #8
   13404:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13408:	f023 0320 	bic.w	r3, r3, #32
   1340c:	04db      	lsls	r3, r3, #19
   1340e:	0cdb      	lsrs	r3, r3, #19
   13410:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   13414:	786b      	ldrb	r3, [r5, #1]
   13416:	b923      	cbnz	r3, 13422 <nrfx_gpiote_output_configure+0x9a>
    return NRFX_SUCCESS;
   13418:	4811      	ldr	r0, [pc, #68]	; (13460 <nrfx_gpiote_output_configure+0xd8>)
}
   1341a:	b004      	add	sp, #16
   1341c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1341e:	4811      	ldr	r0, [pc, #68]	; (13464 <nrfx_gpiote_output_configure+0xdc>)
   13420:	e7fb      	b.n	1341a <nrfx_gpiote_output_configure+0x92>
                                      p_task_config->init_val);
   13422:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   13424:	9200      	str	r2, [sp, #0]
   13426:	4622      	mov	r2, r4
   13428:	4631      	mov	r1, r6
   1342a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1342e:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   13432:	f004 f9c9 	bl	177c8 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13436:	4a08      	ldr	r2, [pc, #32]	; (13458 <nrfx_gpiote_output_configure+0xd0>)
   13438:	3408      	adds	r4, #8
   1343a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   1343e:	0376      	lsls	r6, r6, #13
   13440:	b2b6      	uxth	r6, r6
   13442:	4333      	orrs	r3, r6
   13444:	f043 0320 	orr.w	r3, r3, #32
   13448:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1344c:	4804      	ldr	r0, [pc, #16]	; (13460 <nrfx_gpiote_output_configure+0xd8>)
   1344e:	e7e4      	b.n	1341a <nrfx_gpiote_output_configure+0x92>
   13450:	4803      	ldr	r0, [pc, #12]	; (13460 <nrfx_gpiote_output_configure+0xd8>)
   13452:	e7e2      	b.n	1341a <nrfx_gpiote_output_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   13454:	4803      	ldr	r0, [pc, #12]	; (13464 <nrfx_gpiote_output_configure+0xdc>)
   13456:	e7e0      	b.n	1341a <nrfx_gpiote_output_configure+0x92>
   13458:	2000c5ac 	.word	0x2000c5ac
   1345c:	40031000 	.word	0x40031000
   13460:	0bad0000 	.word	0x0bad0000
   13464:	0bad0004 	.word	0x0bad0004

00013468 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   13468:	4b01      	ldr	r3, [pc, #4]	; (13470 <nrfx_gpiote_global_callback_set+0x8>)
   1346a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1346c:	60d9      	str	r1, [r3, #12]
}
   1346e:	4770      	bx	lr
   13470:	2000c5ac 	.word	0x2000c5ac

00013474 <nrfx_gpiote_channel_get>:
{
   13474:	b538      	push	{r3, r4, r5, lr}
   13476:	4604      	mov	r4, r0
   13478:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1347a:	f7ff fd03 	bl	12e84 <pin_in_use_by_te>
   1347e:	b140      	cbz	r0, 13492 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13480:	f104 0008 	add.w	r0, r4, #8
   13484:	4b04      	ldr	r3, [pc, #16]	; (13498 <nrfx_gpiote_channel_get+0x24>)
   13486:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1348a:	0b5b      	lsrs	r3, r3, #13
   1348c:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1348e:	4803      	ldr	r0, [pc, #12]	; (1349c <nrfx_gpiote_channel_get+0x28>)
}
   13490:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13492:	4803      	ldr	r0, [pc, #12]	; (134a0 <nrfx_gpiote_channel_get+0x2c>)
   13494:	e7fc      	b.n	13490 <nrfx_gpiote_channel_get+0x1c>
   13496:	bf00      	nop
   13498:	2000c5ac 	.word	0x2000c5ac
   1349c:	0bad0000 	.word	0x0bad0000
   134a0:	0bad0004 	.word	0x0bad0004

000134a4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   134a4:	4b0f      	ldr	r3, [pc, #60]	; (134e4 <nrfx_gpiote_init+0x40>)
   134a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   134aa:	b10b      	cbz	r3, 134b0 <nrfx_gpiote_init+0xc>
        return err_code;
   134ac:	480e      	ldr	r0, [pc, #56]	; (134e8 <nrfx_gpiote_init+0x44>)
}
   134ae:	4770      	bx	lr
{
   134b0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   134b2:	4c0e      	ldr	r4, [pc, #56]	; (134ec <nrfx_gpiote_init+0x48>)
   134b4:	2240      	movs	r2, #64	; 0x40
   134b6:	2100      	movs	r1, #0
   134b8:	4620      	mov	r0, r4
   134ba:	f004 fe50 	bl	1815e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   134be:	2031      	movs	r0, #49	; 0x31
   134c0:	f003 faf0 	bl	16aa4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   134c4:	4b0a      	ldr	r3, [pc, #40]	; (134f0 <nrfx_gpiote_init+0x4c>)
   134c6:	2200      	movs	r2, #0
   134c8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   134cc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   134d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   134d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   134d8:	2301      	movs	r3, #1
   134da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   134de:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
   134e0:	4804      	ldr	r0, [pc, #16]	; (134f4 <nrfx_gpiote_init+0x50>)
}
   134e2:	bd10      	pop	{r4, pc}
   134e4:	2000c5ac 	.word	0x2000c5ac
   134e8:	0bad0005 	.word	0x0bad0005
   134ec:	2000c5bc 	.word	0x2000c5bc
   134f0:	40031000 	.word	0x40031000
   134f4:	0bad0000 	.word	0x0bad0000

000134f8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   134f8:	4b03      	ldr	r3, [pc, #12]	; (13508 <nrfx_gpiote_is_init+0x10>)
   134fa:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   134fe:	3800      	subs	r0, #0
   13500:	bf18      	it	ne
   13502:	2001      	movne	r0, #1
   13504:	4770      	bx	lr
   13506:	bf00      	nop
   13508:	2000c5ac 	.word	0x2000c5ac

0001350c <nrfx_gpiote_channel_free>:
{
   1350c:	b508      	push	{r3, lr}
   1350e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   13510:	4801      	ldr	r0, [pc, #4]	; (13518 <nrfx_gpiote_channel_free+0xc>)
   13512:	f7ff fb47 	bl	12ba4 <nrfx_flag32_free>
}
   13516:	bd08      	pop	{r3, pc}
   13518:	2000c5fc 	.word	0x2000c5fc

0001351c <nrfx_gpiote_channel_alloc>:
{
   1351c:	b508      	push	{r3, lr}
   1351e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   13520:	4801      	ldr	r0, [pc, #4]	; (13528 <nrfx_gpiote_channel_alloc+0xc>)
   13522:	f7ff fb1b 	bl	12b5c <nrfx_flag32_alloc>
}
   13526:	bd08      	pop	{r3, pc}
   13528:	2000c5fc 	.word	0x2000c5fc

0001352c <nrfx_gpiote_trigger_enable>:
{
   1352c:	b538      	push	{r3, r4, r5, lr}
   1352e:	4604      	mov	r4, r0
   13530:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13532:	f7ff fca7 	bl	12e84 <pin_in_use_by_te>
   13536:	b318      	cbz	r0, 13580 <nrfx_gpiote_trigger_enable+0x54>
   13538:	4620      	mov	r0, r4
   1353a:	f004 f973 	bl	17824 <pin_is_input>
   1353e:	b1f8      	cbz	r0, 13580 <nrfx_gpiote_trigger_enable+0x54>
        uint8_t ch = pin_te_get(pin);
   13540:	4620      	mov	r0, r4
   13542:	f7ff fcbf 	bl	12ec4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   13546:	0083      	lsls	r3, r0, #2
   13548:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   1354c:	b29b      	uxth	r3, r3
   1354e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13552:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13556:	2200      	movs	r2, #0
   13558:	601a      	str	r2, [r3, #0]
   1355a:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1355c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13560:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   13564:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   13568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1356c:	f043 0301 	orr.w	r3, r3, #1
   13570:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   13574:	b19d      	cbz	r5, 1359e <nrfx_gpiote_trigger_enable+0x72>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13576:	2301      	movs	r3, #1
   13578:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1357a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1357e:	e00e      	b.n	1359e <nrfx_gpiote_trigger_enable+0x72>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13580:	4620      	mov	r0, r4
   13582:	f7ff fcd7 	bl	12f34 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
   13586:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1358a:	4a05      	ldr	r2, [pc, #20]	; (135a0 <nrfx_gpiote_trigger_enable+0x74>)
   1358c:	3480      	adds	r4, #128	; 0x80
   1358e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   13592:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13596:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1359a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   1359e:	bd38      	pop	{r3, r4, r5, pc}
   135a0:	40842500 	.word	0x40842500

000135a4 <nrfx_gpiote_trigger_disable>:
{
   135a4:	b510      	push	{r4, lr}
   135a6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   135a8:	f7ff fc6c 	bl	12e84 <pin_in_use_by_te>
   135ac:	b1a0      	cbz	r0, 135d8 <nrfx_gpiote_trigger_disable+0x34>
   135ae:	4620      	mov	r0, r4
   135b0:	f004 f938 	bl	17824 <pin_is_input>
   135b4:	b180      	cbz	r0, 135d8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   135b6:	4620      	mov	r0, r4
   135b8:	f7ff fc84 	bl	12ec4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   135bc:	2201      	movs	r2, #1
   135be:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   135c0:	4b0b      	ldr	r3, [pc, #44]	; (135f0 <nrfx_gpiote_trigger_disable+0x4c>)
   135c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   135c6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   135ca:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   135ce:	f022 0203 	bic.w	r2, r2, #3
   135d2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   135d6:	e009      	b.n	135ec <nrfx_gpiote_trigger_disable+0x48>
    *p_pin = pin_number & 0x1F;
   135d8:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   135dc:	4a05      	ldr	r2, [pc, #20]	; (135f4 <nrfx_gpiote_trigger_disable+0x50>)
   135de:	3480      	adds	r4, #128	; 0x80
   135e0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   135e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   135e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   135ec:	bd10      	pop	{r4, pc}
   135ee:	bf00      	nop
   135f0:	40031000 	.word	0x40031000
   135f4:	40842500 	.word	0x40842500

000135f8 <nrfx_gpiote_pin_uninit>:
{
   135f8:	b510      	push	{r4, lr}
   135fa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   135fc:	f7ff fc38 	bl	12e70 <pin_in_use>
   13600:	b908      	cbnz	r0, 13606 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   13602:	4808      	ldr	r0, [pc, #32]	; (13624 <nrfx_gpiote_pin_uninit+0x2c>)
}
   13604:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   13606:	4620      	mov	r0, r4
   13608:	f7ff ffcc 	bl	135a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1360c:	4620      	mov	r0, r4
   1360e:	f7ff fd5d 	bl	130cc <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   13612:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   13616:	3480      	adds	r4, #128	; 0x80
   13618:	4b03      	ldr	r3, [pc, #12]	; (13628 <nrfx_gpiote_pin_uninit+0x30>)
   1361a:	2202      	movs	r2, #2
   1361c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   13620:	4802      	ldr	r0, [pc, #8]	; (1362c <nrfx_gpiote_pin_uninit+0x34>)
   13622:	e7ef      	b.n	13604 <nrfx_gpiote_pin_uninit+0xc>
   13624:	0bad0004 	.word	0x0bad0004
   13628:	40842500 	.word	0x40842500
   1362c:	0bad0000 	.word	0x0bad0000

00013630 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   13630:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   13632:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   13634:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13638:	2100      	movs	r1, #0
    uint32_t status = 0;
   1363a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1363c:	e003      	b.n	13646 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1363e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   13640:	3304      	adds	r3, #4
   13642:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13644:	3101      	adds	r1, #1
   13646:	2907      	cmp	r1, #7
   13648:	d814      	bhi.n	13674 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1364a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1364e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   13652:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13654:	2a00      	cmp	r2, #0
   13656:	d0f2      	beq.n	1363e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   13658:	4a0c      	ldr	r2, [pc, #48]	; (1368c <nrfx_gpiote_irq_handler+0x5c>)
   1365a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1365e:	4210      	tst	r0, r2
   13660:	d0ed      	beq.n	1363e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   13662:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   13666:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1366a:	2500      	movs	r5, #0
   1366c:	6015      	str	r5, [r2, #0]
   1366e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   13670:	4304      	orrs	r4, r0
   13672:	e7e4      	b.n	1363e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13674:	4b05      	ldr	r3, [pc, #20]	; (1368c <nrfx_gpiote_irq_handler+0x5c>)
   13676:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1367a:	b91b      	cbnz	r3, 13684 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1367c:	4620      	mov	r0, r4
   1367e:	f7ff fdcb 	bl	13218 <gpiote_evt_handle>
}
   13682:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   13684:	f7ff fd76 	bl	13174 <port_event_handle>
   13688:	e7f8      	b.n	1367c <nrfx_gpiote_irq_handler+0x4c>
   1368a:	bf00      	nop
   1368c:	40031000 	.word	0x40031000

00013690 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   13690:	b538      	push	{r3, r4, r5, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13692:	4b08      	ldr	r3, [pc, #32]	; (136b4 <nrfx_ipc_init+0x24>)
   13694:	791b      	ldrb	r3, [r3, #4]
   13696:	b10b      	cbz	r3, 1369c <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   13698:	4807      	ldr	r0, [pc, #28]	; (136b8 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   1369a:	bd38      	pop	{r3, r4, r5, pc}
   1369c:	460d      	mov	r5, r1
   1369e:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   136a0:	202a      	movs	r0, #42	; 0x2a
   136a2:	f003 f9ff 	bl	16aa4 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   136a6:	4b03      	ldr	r3, [pc, #12]	; (136b4 <nrfx_ipc_init+0x24>)
   136a8:	2201      	movs	r2, #1
   136aa:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   136ac:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   136ae:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   136b0:	4802      	ldr	r0, [pc, #8]	; (136bc <nrfx_ipc_init+0x2c>)
   136b2:	e7f2      	b.n	1369a <nrfx_ipc_init+0xa>
   136b4:	2000ca50 	.word	0x2000ca50
   136b8:	0bad000c 	.word	0x0bad000c
   136bc:	0bad0000 	.word	0x0bad0000

000136c0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   136c0:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   136c2:	2300      	movs	r3, #0
   136c4:	e008      	b.n	136d8 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   136c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   136ca:	b2da      	uxtb	r2, r3
   136cc:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   136d0:	490d      	ldr	r1, [pc, #52]	; (13708 <nrfx_ipc_config_load+0x48>)
   136d2:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   136d6:	3301      	adds	r3, #1
   136d8:	2b07      	cmp	r3, #7
   136da:	d9f4      	bls.n	136c6 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   136dc:	2300      	movs	r3, #0
   136de:	e00a      	b.n	136f6 <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   136e0:	f103 0208 	add.w	r2, r3, #8
   136e4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   136e8:	b2da      	uxtb	r2, r3
   136ea:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   136ee:	4906      	ldr	r1, [pc, #24]	; (13708 <nrfx_ipc_config_load+0x48>)
   136f0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   136f4:	3301      	adds	r3, #1
   136f6:	2b07      	cmp	r3, #7
   136f8:	d9f2      	bls.n	136e0 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   136fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   136fc:	4b02      	ldr	r3, [pc, #8]	; (13708 <nrfx_ipc_config_load+0x48>)
   136fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13702:	bc10      	pop	{r4}
   13704:	4770      	bx	lr
   13706:	bf00      	nop
   13708:	4002a000 	.word	0x4002a000

0001370c <nrfx_ipc_uninit>:
void nrfx_ipc_uninit(void)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1370c:	2300      	movs	r3, #0
   1370e:	e007      	b.n	13720 <nrfx_ipc_uninit+0x14>
    p_reg->SEND_CNF[index] = channels_mask;
   13710:	b2da      	uxtb	r2, r3
   13712:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13716:	490e      	ldr	r1, [pc, #56]	; (13750 <nrfx_ipc_uninit+0x44>)
   13718:	2000      	movs	r0, #0
   1371a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1371e:	3301      	adds	r3, #1
   13720:	2b07      	cmp	r3, #7
   13722:	d9f5      	bls.n	13710 <nrfx_ipc_uninit+0x4>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   13724:	2300      	movs	r3, #0
   13726:	e007      	b.n	13738 <nrfx_ipc_uninit+0x2c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   13728:	b2da      	uxtb	r2, r3
   1372a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   1372e:	4908      	ldr	r1, [pc, #32]	; (13750 <nrfx_ipc_uninit+0x44>)
   13730:	2000      	movs	r0, #0
   13732:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   13736:	3301      	adds	r3, #1
   13738:	2b07      	cmp	r3, #7
   1373a:	d9f5      	bls.n	13728 <nrfx_ipc_uninit+0x1c>
    p_reg->INTENCLR = mask;
   1373c:	4b04      	ldr	r3, [pc, #16]	; (13750 <nrfx_ipc_uninit+0x44>)
   1373e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13742:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   13746:	4b03      	ldr	r3, [pc, #12]	; (13754 <nrfx_ipc_uninit+0x48>)
   13748:	2200      	movs	r2, #0
   1374a:	711a      	strb	r2, [r3, #4]
}
   1374c:	4770      	bx	lr
   1374e:	bf00      	nop
   13750:	4002a000 	.word	0x4002a000
   13754:	2000ca50 	.word	0x2000ca50

00013758 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   13758:	2301      	movs	r3, #1
   1375a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1375c:	4a01      	ldr	r2, [pc, #4]	; (13764 <nrfx_ipc_receive_event_enable+0xc>)
   1375e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13762:	4770      	bx	lr
   13764:	4002a000 	.word	0x4002a000

00013768 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   13768:	2301      	movs	r3, #1
   1376a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1376c:	4a01      	ldr	r2, [pc, #4]	; (13774 <nrfx_ipc_receive_event_disable+0xc>)
   1376e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   13772:	4770      	bx	lr
   13774:	4002a000 	.word	0x4002a000

00013778 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   13778:	b510      	push	{r4, lr}
    return p_reg->INTPEND;
   1377a:	4b0d      	ldr	r3, [pc, #52]	; (137b0 <nrfx_ipc_irq_handler+0x38>)
   1377c:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
    // Clear these events
    uint32_t bitmask = events_map;

    while (bitmask)
   13780:	e002      	b.n	13788 <nrfx_ipc_irq_handler+0x10>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
        {
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   13782:	4a0c      	ldr	r2, [pc, #48]	; (137b4 <nrfx_ipc_irq_handler+0x3c>)
   13784:	6891      	ldr	r1, [r2, #8]
   13786:	4798      	blx	r3
    while (bitmask)
   13788:	b18c      	cbz	r4, 137ae <nrfx_ipc_irq_handler+0x36>
        uint8_t event_idx = NRF_CTZ(bitmask);
   1378a:	fa94 f0a4 	rbit	r0, r4
   1378e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   13792:	2301      	movs	r3, #1
   13794:	4083      	lsls	r3, r0
   13796:	ea24 0403 	bic.w	r4, r4, r3
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1379a:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1379c:	4b06      	ldr	r3, [pc, #24]	; (137b8 <nrfx_ipc_irq_handler+0x40>)
   1379e:	4413      	add	r3, r2
   137a0:	2200      	movs	r2, #0
   137a2:	601a      	str	r2, [r3, #0]
        if (m_ipc_cb.handler)
   137a4:	4b03      	ldr	r3, [pc, #12]	; (137b4 <nrfx_ipc_irq_handler+0x3c>)
   137a6:	681b      	ldr	r3, [r3, #0]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d1ea      	bne.n	13782 <nrfx_ipc_irq_handler+0xa>
   137ac:	e7ec      	b.n	13788 <nrfx_ipc_irq_handler+0x10>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   137ae:	bd10      	pop	{r4, pc}
   137b0:	4002a000 	.word	0x4002a000
   137b4:	2000ca50 	.word	0x2000ca50
   137b8:	4002a100 	.word	0x4002a100

000137bc <rpc_handle_data_message>:
   137bc:	b570      	push	{r4, r5, r6, lr}
   137be:	6803      	ldr	r3, [r0, #0]
   137c0:	4604      	mov	r4, r0
   137c2:	3b03      	subs	r3, #3
   137c4:	b2db      	uxtb	r3, r3
   137c6:	2b04      	cmp	r3, #4
   137c8:	d803      	bhi.n	137d2 <rpc_handle_data_message+0x16>
   137ca:	4a09      	ldr	r2, [pc, #36]	; (137f0 <rpc_handle_data_message+0x34>)
   137cc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   137d0:	b92d      	cbnz	r5, 137de <rpc_handle_data_message+0x22>
   137d2:	68a0      	ldr	r0, [r4, #8]
   137d4:	b108      	cbz	r0, 137da <rpc_handle_data_message+0x1e>
   137d6:	f000 f819 	bl	1380c <rpc_transport_msg_data_rx_free>
   137da:	2000      	movs	r0, #0
   137dc:	bd70      	pop	{r4, r5, r6, pc}
   137de:	f004 f884 	bl	178ea <rpc_client_msg_from_rpc_msg_get>
   137e2:	6821      	ldr	r1, [r4, #0]
   137e4:	462b      	mov	r3, r5
   137e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   137ea:	0c09      	lsrs	r1, r1, #16
   137ec:	4718      	bx	r3
   137ee:	bf00      	nop
   137f0:	00018a24 	.word	0x00018a24

000137f4 <rpc_transport_msg_alloc>:
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <rpc_transport_msg_alloc+0x8>)
   137f6:	681b      	ldr	r3, [r3, #0]
   137f8:	4718      	bx	r3
   137fa:	bf00      	nop
   137fc:	2000c608 	.word	0x2000c608

00013800 <rpc_transport_msg_rx_free>:
   13800:	4b01      	ldr	r3, [pc, #4]	; (13808 <rpc_transport_msg_rx_free+0x8>)
   13802:	68db      	ldr	r3, [r3, #12]
   13804:	4718      	bx	r3
   13806:	bf00      	nop
   13808:	2000c608 	.word	0x2000c608

0001380c <rpc_transport_msg_data_rx_free>:
   1380c:	4b01      	ldr	r3, [pc, #4]	; (13814 <rpc_transport_msg_data_rx_free+0x8>)
   1380e:	695b      	ldr	r3, [r3, #20]
   13810:	4718      	bx	r3
   13812:	bf00      	nop
   13814:	2000c608 	.word	0x2000c608

00013818 <rpc_transport_msg_send>:
   13818:	4b01      	ldr	r3, [pc, #4]	; (13820 <rpc_transport_msg_send+0x8>)
   1381a:	689b      	ldr	r3, [r3, #8]
   1381c:	4718      	bx	r3
   1381e:	bf00      	nop
   13820:	2000c608 	.word	0x2000c608

00013824 <rpc_transport_ipc_msg_data_tx_size>:
   13824:	4b01      	ldr	r3, [pc, #4]	; (1382c <rpc_transport_ipc_msg_data_tx_size+0x8>)
   13826:	681b      	ldr	r3, [r3, #0]
   13828:	68d8      	ldr	r0, [r3, #12]
   1382a:	4770      	bx	lr
   1382c:	2000ca5c 	.word	0x2000ca5c

00013830 <rpc_transport_ipc_msg_rx_free>:
   13830:	2300      	movs	r3, #0
   13832:	b530      	push	{r4, r5, lr}
   13834:	4910      	ldr	r1, [pc, #64]	; (13878 <rpc_transport_ipc_msg_rx_free+0x48>)
   13836:	680a      	ldr	r2, [r1, #0]
   13838:	6814      	ldr	r4, [r2, #0]
   1383a:	42a3      	cmp	r3, r4
   1383c:	d10b      	bne.n	13856 <rpc_transport_ipc_msg_rx_free+0x26>
   1383e:	2300      	movs	r3, #0
   13840:	684a      	ldr	r2, [r1, #4]
   13842:	6811      	ldr	r1, [r2, #0]
   13844:	428b      	cmp	r3, r1
   13846:	d015      	beq.n	13874 <rpc_transport_ipc_msg_rx_free+0x44>
   13848:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1384c:	68a4      	ldr	r4, [r4, #8]
   1384e:	42a0      	cmp	r0, r4
   13850:	d008      	beq.n	13864 <rpc_transport_ipc_msg_rx_free+0x34>
   13852:	3301      	adds	r3, #1
   13854:	e7f6      	b.n	13844 <rpc_transport_ipc_msg_rx_free+0x14>
   13856:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1385a:	68ad      	ldr	r5, [r5, #8]
   1385c:	42a8      	cmp	r0, r5
   1385e:	d001      	beq.n	13864 <rpc_transport_ipc_msg_rx_free+0x34>
   13860:	3301      	adds	r3, #1
   13862:	e7ea      	b.n	1383a <rpc_transport_ipc_msg_rx_free+0xa>
   13864:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13868:	6853      	ldr	r3, [r2, #4]
   1386a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1386e:	f043 0303 	orr.w	r3, r3, #3
   13872:	6053      	str	r3, [r2, #4]
   13874:	bd30      	pop	{r4, r5, pc}
   13876:	bf00      	nop
   13878:	2000ca7c 	.word	0x2000ca7c

0001387c <rpc_transport_ipc_msg_tx_free>:
   1387c:	2200      	movs	r2, #0
   1387e:	b530      	push	{r4, r5, lr}
   13880:	4b0b      	ldr	r3, [pc, #44]	; (138b0 <rpc_transport_ipc_msg_tx_free+0x34>)
   13882:	6819      	ldr	r1, [r3, #0]
   13884:	680c      	ldr	r4, [r1, #0]
   13886:	4294      	cmp	r4, r2
   13888:	d00f      	beq.n	138aa <rpc_transport_ipc_msg_tx_free+0x2e>
   1388a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1388e:	689d      	ldr	r5, [r3, #8]
   13890:	42a8      	cmp	r0, r5
   13892:	d10b      	bne.n	138ac <rpc_transport_ipc_msg_tx_free+0x30>
   13894:	f04f 0203 	mov.w	r2, #3
   13898:	3304      	adds	r3, #4
   1389a:	e8d3 1fcf 	ldaexb	r1, [r3]
   1389e:	2900      	cmp	r1, #0
   138a0:	d103      	bne.n	138aa <rpc_transport_ipc_msg_tx_free+0x2e>
   138a2:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   138a6:	2800      	cmp	r0, #0
   138a8:	d1f7      	bne.n	1389a <rpc_transport_ipc_msg_tx_free+0x1e>
   138aa:	bd30      	pop	{r4, r5, pc}
   138ac:	3201      	adds	r2, #1
   138ae:	e7ea      	b.n	13886 <rpc_transport_ipc_msg_tx_free+0xa>
   138b0:	2000ca74 	.word	0x2000ca74

000138b4 <handle_modem_rpc_msg>:
   138b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138b8:	2500      	movs	r5, #0
   138ba:	4606      	mov	r6, r0
   138bc:	460f      	mov	r7, r1
   138be:	4628      	mov	r0, r5
   138c0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 13928 <handle_modem_rpc_msg+0x74>
   138c4:	6833      	ldr	r3, [r6, #0]
   138c6:	42ab      	cmp	r3, r5
   138c8:	d801      	bhi.n	138ce <handle_modem_rpc_msg+0x1a>
   138ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138ce:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   138d2:	6863      	ldr	r3, [r4, #4]
   138d4:	b2db      	uxtb	r3, r3
   138d6:	2b01      	cmp	r3, #1
   138d8:	d117      	bne.n	1390a <handle_modem_rpc_msg+0x56>
   138da:	6862      	ldr	r2, [r4, #4]
   138dc:	f8b8 3000 	ldrh.w	r3, [r8]
   138e0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   138e4:	d111      	bne.n	1390a <handle_modem_rpc_msg+0x56>
   138e6:	2f02      	cmp	r7, #2
   138e8:	68a0      	ldr	r0, [r4, #8]
   138ea:	d110      	bne.n	1390e <handle_modem_rpc_msg+0x5a>
   138ec:	f7ff ff66 	bl	137bc <rpc_handle_data_message>
   138f0:	b990      	cbnz	r0, 13918 <handle_modem_rpc_msg+0x64>
   138f2:	6863      	ldr	r3, [r4, #4]
   138f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   138f8:	f043 0303 	orr.w	r3, r3, #3
   138fc:	6063      	str	r3, [r4, #4]
   138fe:	2001      	movs	r0, #1
   13900:	f8b8 3000 	ldrh.w	r3, [r8]
   13904:	3301      	adds	r3, #1
   13906:	f8a8 3000 	strh.w	r3, [r8]
   1390a:	3501      	adds	r5, #1
   1390c:	e7da      	b.n	138c4 <handle_modem_rpc_msg+0x10>
   1390e:	6801      	ldr	r1, [r0, #0]
   13910:	0c09      	lsrs	r1, r1, #16
   13912:	f003 ff95 	bl	17840 <rpc_handle_ctrl_message>
   13916:	e7eb      	b.n	138f0 <handle_modem_rpc_msg+0x3c>
   13918:	2801      	cmp	r0, #1
   1391a:	d1f0      	bne.n	138fe <handle_modem_rpc_msg+0x4a>
   1391c:	6863      	ldr	r3, [r4, #4]
   1391e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13922:	f043 0302 	orr.w	r3, r3, #2
   13926:	e7e9      	b.n	138fc <handle_modem_rpc_msg+0x48>
   13928:	2000ce3c 	.word	0x2000ce3c

0001392c <rpc_message_handler>:
   1392c:	b538      	push	{r3, r4, r5, lr}
   1392e:	4d07      	ldr	r5, [pc, #28]	; (1394c <rpc_message_handler+0x20>)
   13930:	2101      	movs	r1, #1
   13932:	6828      	ldr	r0, [r5, #0]
   13934:	f7ff ffbe 	bl	138b4 <handle_modem_rpc_msg>
   13938:	2102      	movs	r1, #2
   1393a:	4604      	mov	r4, r0
   1393c:	6868      	ldr	r0, [r5, #4]
   1393e:	f7ff ffb9 	bl	138b4 <handle_modem_rpc_msg>
   13942:	2800      	cmp	r0, #0
   13944:	d1f4      	bne.n	13930 <rpc_message_handler+0x4>
   13946:	2c00      	cmp	r4, #0
   13948:	d1f2      	bne.n	13930 <rpc_message_handler+0x4>
   1394a:	bd38      	pop	{r3, r4, r5, pc}
   1394c:	2000ca7c 	.word	0x2000ca7c

00013950 <ipc_irq_handler>:
   13950:	b570      	push	{r4, r5, r6, lr}
   13952:	2807      	cmp	r0, #7
   13954:	d868      	bhi.n	13a28 <ipc_irq_handler+0xd8>
   13956:	e8df f000 	tbb	[pc, r0]
   1395a:	670b      	.short	0x670b
   1395c:	674b674f 	.word	0x674b674f
   13960:	0440      	.short	0x0440
   13962:	f000 fe27 	bl	145b4 <ipc_trace_handler>
   13966:	2003      	movs	r0, #3
   13968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1396c:	f7ff b826 	b.w	129bc <nrf_modem_os_event_notify>
   13970:	2003      	movs	r0, #3
   13972:	4b2e      	ldr	r3, [pc, #184]	; (13a2c <ipc_irq_handler+0xdc>)
   13974:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   13978:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   1397c:	4b2c      	ldr	r3, [pc, #176]	; (13a30 <ipc_irq_handler+0xe0>)
   1397e:	781d      	ldrb	r5, [r3, #0]
   13980:	7018      	strb	r0, [r3, #0]
   13982:	f000 fded 	bl	14560 <nrf_modem_state_set>
   13986:	4b2b      	ldr	r3, [pc, #172]	; (13a34 <ipc_irq_handler+0xe4>)
   13988:	b2ed      	uxtb	r5, r5
   1398a:	6818      	ldr	r0, [r3, #0]
   1398c:	f003 fe82 	bl	17694 <nrf_modem_os_sem_give>
   13990:	2d01      	cmp	r5, #1
   13992:	d11c      	bne.n	139ce <ipc_irq_handler+0x7e>
   13994:	4b28      	ldr	r3, [pc, #160]	; (13a38 <ipc_irq_handler+0xe8>)
   13996:	429c      	cmp	r4, r3
   13998:	d010      	beq.n	139bc <ipc_irq_handler+0x6c>
   1399a:	d809      	bhi.n	139b0 <ipc_irq_handler+0x60>
   1399c:	3b02      	subs	r3, #2
   1399e:	429c      	cmp	r4, r3
   139a0:	d00f      	beq.n	139c2 <ipc_irq_handler+0x72>
   139a2:	3301      	adds	r3, #1
   139a4:	429c      	cmp	r4, r3
   139a6:	d00f      	beq.n	139c8 <ipc_irq_handler+0x78>
   139a8:	4b24      	ldr	r3, [pc, #144]	; (13a3c <ipc_irq_handler+0xec>)
   139aa:	601c      	str	r4, [r3, #0]
   139ac:	2000      	movs	r0, #0
   139ae:	e7db      	b.n	13968 <ipc_irq_handler+0x18>
   139b0:	4b23      	ldr	r3, [pc, #140]	; (13a40 <ipc_irq_handler+0xf0>)
   139b2:	429c      	cmp	r4, r3
   139b4:	d1f8      	bne.n	139a8 <ipc_irq_handler+0x58>
   139b6:	f06f 040c 	mvn.w	r4, #12
   139ba:	e7f5      	b.n	139a8 <ipc_irq_handler+0x58>
   139bc:	f06f 040b 	mvn.w	r4, #11
   139c0:	e7f2      	b.n	139a8 <ipc_irq_handler+0x58>
   139c2:	f06f 0415 	mvn.w	r4, #21
   139c6:	e7ef      	b.n	139a8 <ipc_irq_handler+0x58>
   139c8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   139cc:	e7ec      	b.n	139a8 <ipc_irq_handler+0x58>
   139ce:	4631      	mov	r1, r6
   139d0:	f3c4 000b 	ubfx	r0, r4, #0, #12
   139d4:	f000 fdb8 	bl	14548 <nrf_modem_fault_handler_internal>
   139d8:	e7e8      	b.n	139ac <ipc_irq_handler+0x5c>
   139da:	2202      	movs	r2, #2
   139dc:	4b14      	ldr	r3, [pc, #80]	; (13a30 <ipc_irq_handler+0xe0>)
   139de:	2000      	movs	r0, #0
   139e0:	701a      	strb	r2, [r3, #0]
   139e2:	f000 fdbd 	bl	14560 <nrf_modem_state_set>
   139e6:	4b13      	ldr	r3, [pc, #76]	; (13a34 <ipc_irq_handler+0xe4>)
   139e8:	6818      	ldr	r0, [r3, #0]
   139ea:	f003 fe53 	bl	17694 <nrf_modem_os_sem_give>
   139ee:	e7dd      	b.n	139ac <ipc_irq_handler+0x5c>
   139f0:	f7ff ff9c 	bl	1392c <rpc_message_handler>
   139f4:	2002      	movs	r0, #2
   139f6:	e7b7      	b.n	13968 <ipc_irq_handler+0x18>
   139f8:	4b0d      	ldr	r3, [pc, #52]	; (13a30 <ipc_irq_handler+0xe0>)
   139fa:	781a      	ldrb	r2, [r3, #0]
   139fc:	2a01      	cmp	r2, #1
   139fe:	b2d0      	uxtb	r0, r2
   13a00:	d10e      	bne.n	13a20 <ipc_irq_handler+0xd0>
   13a02:	4a10      	ldr	r2, [pc, #64]	; (13a44 <ipc_irq_handler+0xf4>)
   13a04:	6811      	ldr	r1, [r2, #0]
   13a06:	4a10      	ldr	r2, [pc, #64]	; (13a48 <ipc_irq_handler+0xf8>)
   13a08:	688c      	ldr	r4, [r1, #8]
   13a0a:	6054      	str	r4, [r2, #4]
   13a0c:	6849      	ldr	r1, [r1, #4]
   13a0e:	6011      	str	r1, [r2, #0]
   13a10:	2200      	movs	r2, #0
   13a12:	701a      	strb	r2, [r3, #0]
   13a14:	f000 fda4 	bl	14560 <nrf_modem_state_set>
   13a18:	4b06      	ldr	r3, [pc, #24]	; (13a34 <ipc_irq_handler+0xe4>)
   13a1a:	6818      	ldr	r0, [r3, #0]
   13a1c:	f003 fe3a 	bl	17694 <nrf_modem_os_sem_give>
   13a20:	f7ff ff84 	bl	1392c <rpc_message_handler>
   13a24:	2001      	movs	r0, #1
   13a26:	e79f      	b.n	13968 <ipc_irq_handler+0x18>
   13a28:	bd70      	pop	{r4, r5, r6, pc}
   13a2a:	bf00      	nop
   13a2c:	4002a000 	.word	0x4002a000
   13a30:	2000ce46 	.word	0x2000ce46
   13a34:	2000ca64 	.word	0x2000ca64
   13a38:	00010022 	.word	0x00010022
   13a3c:	2000ca78 	.word	0x2000ca78
   13a40:	00013032 	.word	0x00013032
   13a44:	2000ca60 	.word	0x2000ca60
   13a48:	2000ca7c 	.word	0x2000ca7c

00013a4c <rpc_transport_ipc_data_msg_send>:
   13a4c:	b570      	push	{r4, r5, r6, lr}
   13a4e:	4b16      	ldr	r3, [pc, #88]	; (13aa8 <rpc_transport_ipc_data_msg_send+0x5c>)
   13a50:	6842      	ldr	r2, [r0, #4]
   13a52:	681b      	ldr	r3, [r3, #0]
   13a54:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13a58:	f042 0202 	orr.w	r2, r2, #2
   13a5c:	1ac3      	subs	r3, r0, r3
   13a5e:	6042      	str	r2, [r0, #4]
   13a60:	4812      	ldr	r0, [pc, #72]	; (13aac <rpc_transport_ipc_data_msg_send+0x60>)
   13a62:	4a13      	ldr	r2, [pc, #76]	; (13ab0 <rpc_transport_ipc_data_msg_send+0x64>)
   13a64:	6801      	ldr	r1, [r0, #0]
   13a66:	f3c3 1389 	ubfx	r3, r3, #6, #10
   13a6a:	e8d2 4fdf 	ldaexh	r4, [r2]
   13a6e:	1c65      	adds	r5, r4, #1
   13a70:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   13a74:	2e00      	cmp	r6, #0
   13a76:	d1f8      	bne.n	13a6a <rpc_transport_ipc_data_msg_send+0x1e>
   13a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13a7c:	684a      	ldr	r2, [r1, #4]
   13a7e:	b292      	uxth	r2, r2
   13a80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   13a84:	604a      	str	r2, [r1, #4]
   13a86:	6802      	ldr	r2, [r0, #0]
   13a88:	2003      	movs	r0, #3
   13a8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13a8e:	6853      	ldr	r3, [r2, #4]
   13a90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13a94:	f043 0301 	orr.w	r3, r3, #1
   13a98:	6053      	str	r3, [r2, #4]
   13a9a:	f003 fd6e 	bl	1757a <nrf_modem_os_busywait>
   13a9e:	2201      	movs	r2, #1
   13aa0:	4b04      	ldr	r3, [pc, #16]	; (13ab4 <rpc_transport_ipc_data_msg_send+0x68>)
   13aa2:	60da      	str	r2, [r3, #12]
   13aa4:	bd70      	pop	{r4, r5, r6, pc}
   13aa6:	bf00      	nop
   13aa8:	2000ca6c 	.word	0x2000ca6c
   13aac:	2000ca74 	.word	0x2000ca74
   13ab0:	2000ce3e 	.word	0x2000ce3e
   13ab4:	4002a000 	.word	0x4002a000

00013ab8 <rpc_transport_ipc_ctrl_msg_alloc>:
   13ab8:	230a      	movs	r3, #10
   13aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13abc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13ac0:	4e0c      	ldr	r6, [pc, #48]	; (13af4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   13ac2:	4f0d      	ldr	r7, [pc, #52]	; (13af8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   13ac4:	9301      	str	r3, [sp, #4]
   13ac6:	6831      	ldr	r1, [r6, #0]
   13ac8:	6838      	ldr	r0, [r7, #0]
   13aca:	f003 fee9 	bl	178a0 <rpc_transport_ipc_msg_alloc>
   13ace:	4604      	mov	r4, r0
   13ad0:	b940      	cbnz	r0, 13ae4 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   13ad2:	f003 fddb 	bl	1768c <nrf_modem_os_is_in_isr>
   13ad6:	b940      	cbnz	r0, 13aea <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   13ad8:	2001      	movs	r0, #1
   13ada:	a901      	add	r1, sp, #4
   13adc:	f003 fd51 	bl	17582 <nrf_modem_os_timedwait>
   13ae0:	306e      	adds	r0, #110	; 0x6e
   13ae2:	d1f0      	bne.n	13ac6 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   13ae4:	4620      	mov	r0, r4
   13ae6:	b003      	add	sp, #12
   13ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13aea:	9801      	ldr	r0, [sp, #4]
   13aec:	4368      	muls	r0, r5
   13aee:	f003 fd44 	bl	1757a <nrf_modem_os_busywait>
   13af2:	e7e8      	b.n	13ac6 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   13af4:	2000ca68 	.word	0x2000ca68
   13af8:	2000ca70 	.word	0x2000ca70

00013afc <rpc_transport_ipc_data_msg_alloc>:
   13afc:	4b05      	ldr	r3, [pc, #20]	; (13b14 <rpc_transport_ipc_data_msg_alloc+0x18>)
   13afe:	781b      	ldrb	r3, [r3, #0]
   13b00:	b92b      	cbnz	r3, 13b0e <rpc_transport_ipc_data_msg_alloc+0x12>
   13b02:	4b05      	ldr	r3, [pc, #20]	; (13b18 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   13b04:	6819      	ldr	r1, [r3, #0]
   13b06:	4b05      	ldr	r3, [pc, #20]	; (13b1c <rpc_transport_ipc_data_msg_alloc+0x20>)
   13b08:	6818      	ldr	r0, [r3, #0]
   13b0a:	f003 bec9 	b.w	178a0 <rpc_transport_ipc_msg_alloc>
   13b0e:	2000      	movs	r0, #0
   13b10:	4770      	bx	lr
   13b12:	bf00      	nop
   13b14:	2000ce45 	.word	0x2000ce45
   13b18:	2000ca6c 	.word	0x2000ca6c
   13b1c:	2000ca74 	.word	0x2000ca74

00013b20 <rpc_transport_ipc_init>:
   13b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b24:	b095      	sub	sp, #84	; 0x54
   13b26:	2238      	movs	r2, #56	; 0x38
   13b28:	2100      	movs	r1, #0
   13b2a:	4606      	mov	r6, r0
   13b2c:	a803      	add	r0, sp, #12
   13b2e:	f004 fb16 	bl	1815e <memset>
   13b32:	2302      	movs	r3, #2
   13b34:	9304      	str	r3, [sp, #16]
   13b36:	2308      	movs	r3, #8
   13b38:	9306      	str	r3, [sp, #24]
   13b3a:	2320      	movs	r3, #32
   13b3c:	9308      	str	r3, [sp, #32]
   13b3e:	2304      	movs	r3, #4
   13b40:	930d      	str	r3, [sp, #52]	; 0x34
   13b42:	2310      	movs	r3, #16
   13b44:	2540      	movs	r5, #64	; 0x40
   13b46:	930f      	str	r3, [sp, #60]	; 0x3c
   13b48:	2380      	movs	r3, #128	; 0x80
   13b4a:	2201      	movs	r2, #1
   13b4c:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   13b50:	23d5      	movs	r3, #213	; 0xd5
   13b52:	2100      	movs	r1, #0
   13b54:	4855      	ldr	r0, [pc, #340]	; (13cac <rpc_transport_ipc_init+0x18c>)
   13b56:	920b      	str	r2, [sp, #44]	; 0x2c
   13b58:	9313      	str	r3, [sp, #76]	; 0x4c
   13b5a:	f7fe ff13 	bl	12984 <nrf_modem_os_sem_init>
   13b5e:	4605      	mov	r5, r0
   13b60:	2800      	cmp	r0, #0
   13b62:	f040 809f 	bne.w	13ca4 <rpc_transport_ipc_init+0x184>
   13b66:	4602      	mov	r2, r0
   13b68:	4951      	ldr	r1, [pc, #324]	; (13cb0 <rpc_transport_ipc_init+0x190>)
   13b6a:	7930      	ldrb	r0, [r6, #4]
   13b6c:	f7ff fd90 	bl	13690 <nrfx_ipc_init>
   13b70:	a803      	add	r0, sp, #12
   13b72:	f7ff fda5 	bl	136c0 <nrfx_ipc_config_load>
   13b76:	6834      	ldr	r4, [r6, #0]
   13b78:	6862      	ldr	r2, [r4, #4]
   13b7a:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   13b7e:	f040 8089 	bne.w	13c94 <rpc_transport_ipc_init+0x174>
   13b82:	6961      	ldr	r1, [r4, #20]
   13b84:	68e3      	ldr	r3, [r4, #12]
   13b86:	440b      	add	r3, r1
   13b88:	69e1      	ldr	r1, [r4, #28]
   13b8a:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   13b8e:	440b      	add	r3, r1
   13b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   13b94:	d87e      	bhi.n	13c94 <rpc_transport_ipc_init+0x174>
   13b96:	6820      	ldr	r0, [r4, #0]
   13b98:	4629      	mov	r1, r5
   13b9a:	f004 fae0 	bl	1815e <memset>
   13b9e:	6833      	ldr	r3, [r6, #0]
   13ba0:	681c      	ldr	r4, [r3, #0]
   13ba2:	f8d3 901c 	ldr.w	r9, [r3, #28]
   13ba6:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   13baa:	9201      	str	r2, [sp, #4]
   13bac:	f104 0760 	add.w	r7, r4, #96	; 0x60
   13bb0:	4a40      	ldr	r2, [pc, #256]	; (13cb4 <rpc_transport_ipc_init+0x194>)
   13bb2:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   13bb6:	f104 0b20 	add.w	fp, r4, #32
   13bba:	f1b9 0f00 	cmp.w	r9, #0
   13bbe:	d15c      	bne.n	13c7a <rpc_transport_ipc_init+0x15a>
   13bc0:	f8c2 b000 	str.w	fp, [r2]
   13bc4:	2500      	movs	r5, #0
   13bc6:	f04f 0a01 	mov.w	sl, #1
   13bca:	7025      	strb	r5, [r4, #0]
   13bcc:	7065      	strb	r5, [r4, #1]
   13bce:	f884 a002 	strb.w	sl, [r4, #2]
   13bd2:	70e5      	strb	r5, [r4, #3]
   13bd4:	6833      	ldr	r3, [r6, #0]
   13bd6:	4640      	mov	r0, r8
   13bd8:	691b      	ldr	r3, [r3, #16]
   13bda:	6063      	str	r3, [r4, #4]
   13bdc:	6833      	ldr	r3, [r6, #0]
   13bde:	695b      	ldr	r3, [r3, #20]
   13be0:	f8c4 b014 	str.w	fp, [r4, #20]
   13be4:	60a3      	str	r3, [r4, #8]
   13be6:	4b34      	ldr	r3, [pc, #208]	; (13cb8 <rpc_transport_ipc_init+0x198>)
   13be8:	f8c4 9018 	str.w	r9, [r4, #24]
   13bec:	f8c3 8000 	str.w	r8, [r3]
   13bf0:	4b32      	ldr	r3, [pc, #200]	; (13cbc <rpc_transport_ipc_init+0x19c>)
   13bf2:	60e7      	str	r7, [r4, #12]
   13bf4:	601f      	str	r7, [r3, #0]
   13bf6:	2308      	movs	r3, #8
   13bf8:	f8c4 8010 	str.w	r8, [r4, #16]
   13bfc:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   13c00:	f888 5001 	strb.w	r5, [r8, #1]
   13c04:	f888 5002 	strb.w	r5, [r8, #2]
   13c08:	f888 5003 	strb.w	r5, [r8, #3]
   13c0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   13c10:	707d      	strb	r5, [r7, #1]
   13c12:	70bd      	strb	r5, [r7, #2]
   13c14:	70fd      	strb	r5, [r7, #3]
   13c16:	f003 fe2b 	bl	17870 <rpc_list_preambles_init>
   13c1a:	4638      	mov	r0, r7
   13c1c:	f003 fe28 	bl	17870 <rpc_list_preambles_init>
   13c20:	4b27      	ldr	r3, [pc, #156]	; (13cc0 <rpc_transport_ipc_init+0x1a0>)
   13c22:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   13c26:	601a      	str	r2, [r3, #0]
   13c28:	4b26      	ldr	r3, [pc, #152]	; (13cc4 <rpc_transport_ipc_init+0x1a4>)
   13c2a:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   13c2e:	601a      	str	r2, [r3, #0]
   13c30:	6831      	ldr	r1, [r6, #0]
   13c32:	4b25      	ldr	r3, [pc, #148]	; (13cc8 <rpc_transport_ipc_init+0x1a8>)
   13c34:	6019      	str	r1, [r3, #0]
   13c36:	4b25      	ldr	r3, [pc, #148]	; (13ccc <rpc_transport_ipc_init+0x1ac>)
   13c38:	4925      	ldr	r1, [pc, #148]	; (13cd0 <rpc_transport_ipc_init+0x1b0>)
   13c3a:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   13c3e:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   13c42:	4b24      	ldr	r3, [pc, #144]	; (13cd4 <rpc_transport_ipc_init+0x1b4>)
   13c44:	4c24      	ldr	r4, [pc, #144]	; (13cd8 <rpc_transport_ipc_init+0x1b8>)
   13c46:	801d      	strh	r5, [r3, #0]
   13c48:	4b24      	ldr	r3, [pc, #144]	; (13cdc <rpc_transport_ipc_init+0x1bc>)
   13c4a:	6025      	str	r5, [r4, #0]
   13c4c:	801d      	strh	r5, [r3, #0]
   13c4e:	4b24      	ldr	r3, [pc, #144]	; (13ce0 <rpc_transport_ipc_init+0x1c0>)
   13c50:	f883 a000 	strb.w	sl, [r3]
   13c54:	4b23      	ldr	r3, [pc, #140]	; (13ce4 <rpc_transport_ipc_init+0x1c4>)
   13c56:	9502      	str	r5, [sp, #8]
   13c58:	611d      	str	r5, [r3, #16]
   13c5a:	691b      	ldr	r3, [r3, #16]
   13c5c:	9302      	str	r3, [sp, #8]
   13c5e:	9b02      	ldr	r3, [sp, #8]
   13c60:	4b12      	ldr	r3, [pc, #72]	; (13cac <rpc_transport_ipc_init+0x18c>)
   13c62:	6818      	ldr	r0, [r3, #0]
   13c64:	f003 fd1a 	bl	1769c <nrf_modem_os_sem_take>
   13c68:	b9c8      	cbnz	r0, 13c9e <rpc_transport_ipc_init+0x17e>
   13c6a:	6824      	ldr	r4, [r4, #0]
   13c6c:	b9a4      	cbnz	r4, 13c98 <rpc_transport_ipc_init+0x178>
   13c6e:	4b1e      	ldr	r3, [pc, #120]	; (13ce8 <rpc_transport_ipc_init+0x1c8>)
   13c70:	701c      	strb	r4, [r3, #0]
   13c72:	4620      	mov	r0, r4
   13c74:	b015      	add	sp, #84	; 0x54
   13c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c7a:	699b      	ldr	r3, [r3, #24]
   13c7c:	f104 0940 	add.w	r9, r4, #64	; 0x40
   13c80:	6463      	str	r3, [r4, #68]	; 0x44
   13c82:	6833      	ldr	r3, [r6, #0]
   13c84:	4648      	mov	r0, r9
   13c86:	69db      	ldr	r3, [r3, #28]
   13c88:	f8c2 b000 	str.w	fp, [r2]
   13c8c:	6423      	str	r3, [r4, #64]	; 0x40
   13c8e:	f000 fc75 	bl	1457c <ipc_trace_init>
   13c92:	e797      	b.n	13bc4 <rpc_transport_ipc_init+0xa4>
   13c94:	f06f 0415 	mvn.w	r4, #21
   13c98:	f7ff fd38 	bl	1370c <nrfx_ipc_uninit>
   13c9c:	e7e9      	b.n	13c72 <rpc_transport_ipc_init+0x152>
   13c9e:	f06f 0473 	mvn.w	r4, #115	; 0x73
   13ca2:	e7f9      	b.n	13c98 <rpc_transport_ipc_init+0x178>
   13ca4:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   13ca8:	e7e3      	b.n	13c72 <rpc_transport_ipc_init+0x152>
   13caa:	bf00      	nop
   13cac:	2000ca64 	.word	0x2000ca64
   13cb0:	00013951 	.word	0x00013951
   13cb4:	2000ca60 	.word	0x2000ca60
   13cb8:	2000ca74 	.word	0x2000ca74
   13cbc:	2000ca70 	.word	0x2000ca70
   13cc0:	2000ca6c 	.word	0x2000ca6c
   13cc4:	2000ca68 	.word	0x2000ca68
   13cc8:	2000ca5c 	.word	0x2000ca5c
   13ccc:	4002a000 	.word	0x4002a000
   13cd0:	000249f0 	.word	0x000249f0
   13cd4:	2000ce3e 	.word	0x2000ce3e
   13cd8:	2000ca78 	.word	0x2000ca78
   13cdc:	2000ce3c 	.word	0x2000ce3c
   13ce0:	2000ce46 	.word	0x2000ce46
   13ce4:	40005600 	.word	0x40005600
   13ce8:	2000ce45 	.word	0x2000ce45

00013cec <rpc_transport_ipc_ctrl_msg_send>:
   13cec:	b570      	push	{r4, r5, r6, lr}
   13cee:	4b16      	ldr	r3, [pc, #88]	; (13d48 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   13cf0:	6842      	ldr	r2, [r0, #4]
   13cf2:	681b      	ldr	r3, [r3, #0]
   13cf4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13cf8:	f042 0201 	orr.w	r2, r2, #1
   13cfc:	1ac3      	subs	r3, r0, r3
   13cfe:	6042      	str	r2, [r0, #4]
   13d00:	4812      	ldr	r0, [pc, #72]	; (13d4c <rpc_transport_ipc_ctrl_msg_send+0x60>)
   13d02:	4a13      	ldr	r2, [pc, #76]	; (13d50 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   13d04:	6801      	ldr	r1, [r0, #0]
   13d06:	f3c3 1389 	ubfx	r3, r3, #6, #10
   13d0a:	e8d2 4fdf 	ldaexh	r4, [r2]
   13d0e:	1c65      	adds	r5, r4, #1
   13d10:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   13d14:	2e00      	cmp	r6, #0
   13d16:	d1f8      	bne.n	13d0a <rpc_transport_ipc_ctrl_msg_send+0x1e>
   13d18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13d1c:	684a      	ldr	r2, [r1, #4]
   13d1e:	b292      	uxth	r2, r2
   13d20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   13d24:	604a      	str	r2, [r1, #4]
   13d26:	6802      	ldr	r2, [r0, #0]
   13d28:	2003      	movs	r0, #3
   13d2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13d2e:	6853      	ldr	r3, [r2, #4]
   13d30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13d34:	f043 0301 	orr.w	r3, r3, #1
   13d38:	6053      	str	r3, [r2, #4]
   13d3a:	f003 fc1e 	bl	1757a <nrf_modem_os_busywait>
   13d3e:	2201      	movs	r2, #1
   13d40:	4b04      	ldr	r3, [pc, #16]	; (13d54 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   13d42:	605a      	str	r2, [r3, #4]
   13d44:	bd70      	pop	{r4, r5, r6, pc}
   13d46:	bf00      	nop
   13d48:	2000ca68 	.word	0x2000ca68
   13d4c:	2000ca70 	.word	0x2000ca70
   13d50:	2000ce3e 	.word	0x2000ce3e
   13d54:	4002a000 	.word	0x4002a000

00013d58 <rpc_transport_ipc_request_shutdown>:
   13d58:	b510      	push	{r4, lr}
   13d5a:	f7ff fead 	bl	13ab8 <rpc_transport_ipc_ctrl_msg_alloc>
   13d5e:	2401      	movs	r4, #1
   13d60:	2200      	movs	r2, #0
   13d62:	2103      	movs	r1, #3
   13d64:	7004      	strb	r4, [r0, #0]
   13d66:	7081      	strb	r1, [r0, #2]
   13d68:	7042      	strb	r2, [r0, #1]
   13d6a:	70c2      	strb	r2, [r0, #3]
   13d6c:	f7ff ffbe 	bl	13cec <rpc_transport_ipc_ctrl_msg_send>
   13d70:	4b05      	ldr	r3, [pc, #20]	; (13d88 <rpc_transport_ipc_request_shutdown+0x30>)
   13d72:	701c      	strb	r4, [r3, #0]
   13d74:	f003 fd8f 	bl	17896 <rpc_transport_ipc_data_rx_suspend>
   13d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d7c:	4b03      	ldr	r3, [pc, #12]	; (13d8c <rpc_transport_ipc_request_shutdown+0x34>)
   13d7e:	f247 5130 	movw	r1, #30000	; 0x7530
   13d82:	6818      	ldr	r0, [r3, #0]
   13d84:	f003 bc8a 	b.w	1769c <nrf_modem_os_sem_take>
   13d88:	2000ce45 	.word	0x2000ce45
   13d8c:	2000ca64 	.word	0x2000ca64

00013d90 <rpc_transport_ipc_msg_data_rx_free>:
   13d90:	b510      	push	{r4, lr}
   13d92:	4b0a      	ldr	r3, [pc, #40]	; (13dbc <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   13d94:	4604      	mov	r4, r0
   13d96:	781b      	ldrb	r3, [r3, #0]
   13d98:	2b03      	cmp	r3, #3
   13d9a:	d00e      	beq.n	13dba <rpc_transport_ipc_msg_data_rx_free+0x2a>
   13d9c:	f7ff fe8c 	bl	13ab8 <rpc_transport_ipc_ctrl_msg_alloc>
   13da0:	b158      	cbz	r0, 13dba <rpc_transport_ipc_msg_data_rx_free+0x2a>
   13da2:	2101      	movs	r1, #1
   13da4:	2200      	movs	r2, #0
   13da6:	7001      	strb	r1, [r0, #0]
   13da8:	2102      	movs	r1, #2
   13daa:	6084      	str	r4, [r0, #8]
   13dac:	7042      	strb	r2, [r0, #1]
   13dae:	7081      	strb	r1, [r0, #2]
   13db0:	70c2      	strb	r2, [r0, #3]
   13db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13db6:	f7ff bf99 	b.w	13cec <rpc_transport_ipc_ctrl_msg_send>
   13dba:	bd10      	pop	{r4, pc}
   13dbc:	2000ce46 	.word	0x2000ce46

00013dc0 <at_cmd_send>:
   13dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13dc4:	4605      	mov	r5, r0
   13dc6:	2000      	movs	r0, #0
   13dc8:	4617      	mov	r7, r2
   13dca:	4688      	mov	r8, r1
   13dcc:	461e      	mov	r6, r3
   13dce:	f003 fd8e 	bl	178ee <rpc_client_msg_alloc>
   13dd2:	4602      	mov	r2, r0
   13dd4:	b940      	cbnz	r0, 13de8 <at_cmd_send+0x28>
   13dd6:	b115      	cbz	r5, 13dde <at_cmd_send+0x1e>
   13dd8:	4628      	mov	r0, r5
   13dda:	f003 fdb2 	bl	17942 <rpc_client_msg_data_tx_free>
   13dde:	f06f 000b 	mvn.w	r0, #11
   13de2:	b002      	add	sp, #8
   13de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13de8:	f06f 0358 	mvn.w	r3, #88	; 0x58
   13dec:	2400      	movs	r4, #0
   13dee:	7303      	strb	r3, [r0, #12]
   13df0:	2304      	movs	r3, #4
   13df2:	6005      	str	r5, [r0, #0]
   13df4:	4d0e      	ldr	r5, [pc, #56]	; (13e30 <at_cmd_send+0x70>)
   13df6:	7203      	strb	r3, [r0, #8]
   13df8:	7344      	strb	r4, [r0, #13]
   13dfa:	7384      	strb	r4, [r0, #14]
   13dfc:	73c4      	strb	r4, [r0, #15]
   13dfe:	7244      	strb	r4, [r0, #9]
   13e00:	7284      	strb	r4, [r0, #10]
   13e02:	72c4      	strb	r4, [r0, #11]
   13e04:	f8c0 8004 	str.w	r8, [r0, #4]
   13e08:	4639      	mov	r1, r7
   13e0a:	2003      	movs	r0, #3
   13e0c:	702c      	strb	r4, [r5, #0]
   13e0e:	f003 fd8a 	bl	17926 <rpc_client_msg_send>
   13e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e16:	9301      	str	r3, [sp, #4]
   13e18:	782b      	ldrb	r3, [r5, #0]
   13e1a:	42b3      	cmp	r3, r6
   13e1c:	d101      	bne.n	13e22 <at_cmd_send+0x62>
   13e1e:	2000      	movs	r0, #0
   13e20:	e7df      	b.n	13de2 <at_cmd_send+0x22>
   13e22:	2002      	movs	r0, #2
   13e24:	a901      	add	r1, sp, #4
   13e26:	f003 fbac 	bl	17582 <nrf_modem_os_timedwait>
   13e2a:	2800      	cmp	r0, #0
   13e2c:	d0f4      	beq.n	13e18 <at_cmd_send+0x58>
   13e2e:	e7d8      	b.n	13de2 <at_cmd_send+0x22>
   13e30:	2000ce47 	.word	0x2000ce47

00013e34 <at_response_match>:
   13e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e36:	4605      	mov	r5, r0
   13e38:	2400      	movs	r4, #0
   13e3a:	4f0f      	ldr	r7, [pc, #60]	; (13e78 <at_response_match+0x44>)
   13e3c:	f857 6b04 	ldr.w	r6, [r7], #4
   13e40:	4628      	mov	r0, r5
   13e42:	4631      	mov	r1, r6
   13e44:	f004 f9b2 	bl	181ac <strstr>
   13e48:	b928      	cbnz	r0, 13e56 <at_response_match+0x22>
   13e4a:	3401      	adds	r4, #1
   13e4c:	2c04      	cmp	r4, #4
   13e4e:	d1f5      	bne.n	13e3c <at_response_match+0x8>
   13e50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   13e54:	e00d      	b.n	13e72 <at_response_match+0x3e>
   13e56:	b16c      	cbz	r4, 13e74 <at_response_match+0x40>
   13e58:	1ea3      	subs	r3, r4, #2
   13e5a:	2b01      	cmp	r3, #1
   13e5c:	d8f8      	bhi.n	13e50 <at_response_match+0x1c>
   13e5e:	4630      	mov	r0, r6
   13e60:	f7fc fad8 	bl	10414 <strlen>
   13e64:	220a      	movs	r2, #10
   13e66:	2100      	movs	r1, #0
   13e68:	4428      	add	r0, r5
   13e6a:	f001 fd97 	bl	1599c <strtol>
   13e6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   13e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e74:	4620      	mov	r0, r4
   13e76:	e7fc      	b.n	13e72 <at_response_match+0x3e>
   13e78:	00018a38 	.word	0x00018a38

00013e7c <at_vsprintf>:
   13e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13e80:	2500      	movs	r5, #0
   13e82:	4681      	mov	r9, r0
   13e84:	460f      	mov	r7, r1
   13e86:	4810      	ldr	r0, [pc, #64]	; (13ec8 <at_vsprintf+0x4c>)
   13e88:	4629      	mov	r1, r5
   13e8a:	4690      	mov	r8, r2
   13e8c:	461e      	mov	r6, r3
   13e8e:	9301      	str	r3, [sp, #4]
   13e90:	f001 fd8e 	bl	159b0 <vsniprintf>
   13e94:	1e04      	subs	r4, r0, #0
   13e96:	db11      	blt.n	13ebc <at_vsprintf+0x40>
   13e98:	3401      	adds	r4, #1
   13e9a:	4620      	mov	r0, r4
   13e9c:	f003 fd4f 	bl	1793e <rpc_client_msg_data_tx_alloc>
   13ea0:	f8c9 0000 	str.w	r0, [r9]
   13ea4:	b168      	cbz	r0, 13ec2 <at_vsprintf+0x46>
   13ea6:	4633      	mov	r3, r6
   13ea8:	4642      	mov	r2, r8
   13eaa:	4621      	mov	r1, r4
   13eac:	9601      	str	r6, [sp, #4]
   13eae:	f001 fd7f 	bl	159b0 <vsniprintf>
   13eb2:	4628      	mov	r0, r5
   13eb4:	603c      	str	r4, [r7, #0]
   13eb6:	b003      	add	sp, #12
   13eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13ebc:	f06f 0015 	mvn.w	r0, #21
   13ec0:	e7f9      	b.n	13eb6 <at_vsprintf+0x3a>
   13ec2:	f06f 000b 	mvn.w	r0, #11
   13ec6:	e7f6      	b.n	13eb6 <at_vsprintf+0x3a>
   13ec8:	00018800 	.word	0x00018800

00013ecc <nrf_modem_at_printf>:
   13ecc:	b40f      	push	{r0, r1, r2, r3}
   13ece:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13ed0:	9c08      	ldr	r4, [sp, #32]
   13ed2:	f000 fb4b 	bl	1456c <nrf_modem_state_is_initialized>
   13ed6:	2800      	cmp	r0, #0
   13ed8:	d039      	beq.n	13f4e <nrf_modem_at_printf+0x82>
   13eda:	2c00      	cmp	r4, #0
   13edc:	d03a      	beq.n	13f54 <nrf_modem_at_printf+0x88>
   13ede:	4622      	mov	r2, r4
   13ee0:	ab09      	add	r3, sp, #36	; 0x24
   13ee2:	a903      	add	r1, sp, #12
   13ee4:	a802      	add	r0, sp, #8
   13ee6:	9301      	str	r3, [sp, #4]
   13ee8:	f7ff ffc8 	bl	13e7c <at_vsprintf>
   13eec:	4604      	mov	r4, r0
   13eee:	b960      	cbnz	r0, 13f0a <nrf_modem_at_printf+0x3e>
   13ef0:	4e1a      	ldr	r6, [pc, #104]	; (13f5c <nrf_modem_at_printf+0x90>)
   13ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13ef6:	6830      	ldr	r0, [r6, #0]
   13ef8:	f003 fbd0 	bl	1769c <nrf_modem_os_sem_take>
   13efc:	4603      	mov	r3, r0
   13efe:	9802      	ldr	r0, [sp, #8]
   13f00:	b14b      	cbz	r3, 13f16 <nrf_modem_at_printf+0x4a>
   13f02:	f003 fd1e 	bl	17942 <rpc_client_msg_data_tx_free>
   13f06:	f06f 040a 	mvn.w	r4, #10
   13f0a:	4620      	mov	r0, r4
   13f0c:	b004      	add	sp, #16
   13f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13f12:	b004      	add	sp, #16
   13f14:	4770      	bx	lr
   13f16:	2302      	movs	r3, #2
   13f18:	2201      	movs	r2, #1
   13f1a:	9903      	ldr	r1, [sp, #12]
   13f1c:	f7ff ff50 	bl	13dc0 <at_cmd_send>
   13f20:	4604      	mov	r4, r0
   13f22:	b118      	cbz	r0, 13f2c <nrf_modem_at_printf+0x60>
   13f24:	6830      	ldr	r0, [r6, #0]
   13f26:	f003 fbb5 	bl	17694 <nrf_modem_os_sem_give>
   13f2a:	e7ee      	b.n	13f0a <nrf_modem_at_printf+0x3e>
   13f2c:	4d0c      	ldr	r5, [pc, #48]	; (13f60 <nrf_modem_at_printf+0x94>)
   13f2e:	682b      	ldr	r3, [r5, #0]
   13f30:	6818      	ldr	r0, [r3, #0]
   13f32:	f7ff ff7f 	bl	13e34 <at_response_match>
   13f36:	4604      	mov	r4, r0
   13f38:	6830      	ldr	r0, [r6, #0]
   13f3a:	f003 fbab 	bl	17694 <nrf_modem_os_sem_give>
   13f3e:	682b      	ldr	r3, [r5, #0]
   13f40:	6818      	ldr	r0, [r3, #0]
   13f42:	f003 fcfa 	bl	1793a <rpc_client_msg_data_rx_free>
   13f46:	6828      	ldr	r0, [r5, #0]
   13f48:	f003 fcf4 	bl	17934 <rpc_client_msg_rx_free>
   13f4c:	e7dd      	b.n	13f0a <nrf_modem_at_printf+0x3e>
   13f4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f52:	e7da      	b.n	13f0a <nrf_modem_at_printf+0x3e>
   13f54:	f06f 040d 	mvn.w	r4, #13
   13f58:	e7d7      	b.n	13f0a <nrf_modem_at_printf+0x3e>
   13f5a:	bf00      	nop
   13f5c:	2000ca90 	.word	0x2000ca90
   13f60:	2000ca8c 	.word	0x2000ca8c

00013f64 <rpc_at_event_handler>:
   13f64:	b538      	push	{r3, r4, r5, lr}
   13f66:	68c3      	ldr	r3, [r0, #12]
   13f68:	4604      	mov	r4, r0
   13f6a:	2ba7      	cmp	r3, #167	; 0xa7
   13f6c:	d003      	beq.n	13f76 <rpc_at_event_handler+0x12>
   13f6e:	6820      	ldr	r0, [r4, #0]
   13f70:	f003 fce3 	bl	1793a <rpc_client_msg_data_rx_free>
   13f74:	e008      	b.n	13f88 <rpc_at_event_handler+0x24>
   13f76:	2903      	cmp	r1, #3
   13f78:	d008      	beq.n	13f8c <rpc_at_event_handler+0x28>
   13f7a:	2904      	cmp	r1, #4
   13f7c:	d021      	beq.n	13fc2 <rpc_at_event_handler+0x5e>
   13f7e:	2902      	cmp	r1, #2
   13f80:	bf02      	ittt	eq
   13f82:	2201      	moveq	r2, #1
   13f84:	4b12      	ldreq	r3, [pc, #72]	; (13fd0 <rpc_at_event_handler+0x6c>)
   13f86:	701a      	strbeq	r2, [r3, #0]
   13f88:	2000      	movs	r0, #0
   13f8a:	bd38      	pop	{r3, r4, r5, pc}
   13f8c:	4d11      	ldr	r5, [pc, #68]	; (13fd4 <rpc_at_event_handler+0x70>)
   13f8e:	682b      	ldr	r3, [r5, #0]
   13f90:	b13b      	cbz	r3, 13fa2 <rpc_at_event_handler+0x3e>
   13f92:	6800      	ldr	r0, [r0, #0]
   13f94:	4798      	blx	r3
   13f96:	2300      	movs	r3, #0
   13f98:	6820      	ldr	r0, [r4, #0]
   13f9a:	602b      	str	r3, [r5, #0]
   13f9c:	f003 fccd 	bl	1793a <rpc_client_msg_data_rx_free>
   13fa0:	e006      	b.n	13fb0 <rpc_at_event_handler+0x4c>
   13fa2:	4b0b      	ldr	r3, [pc, #44]	; (13fd0 <rpc_at_event_handler+0x6c>)
   13fa4:	781a      	ldrb	r2, [r3, #0]
   13fa6:	2a02      	cmp	r2, #2
   13fa8:	d105      	bne.n	13fb6 <rpc_at_event_handler+0x52>
   13faa:	6800      	ldr	r0, [r0, #0]
   13fac:	2800      	cmp	r0, #0
   13fae:	d1f5      	bne.n	13f9c <rpc_at_event_handler+0x38>
   13fb0:	2000      	movs	r0, #0
   13fb2:	b2c0      	uxtb	r0, r0
   13fb4:	e7e9      	b.n	13f8a <rpc_at_event_handler+0x26>
   13fb6:	4a08      	ldr	r2, [pc, #32]	; (13fd8 <rpc_at_event_handler+0x74>)
   13fb8:	6010      	str	r0, [r2, #0]
   13fba:	2202      	movs	r2, #2
   13fbc:	2001      	movs	r0, #1
   13fbe:	701a      	strb	r2, [r3, #0]
   13fc0:	e7f7      	b.n	13fb2 <rpc_at_event_handler+0x4e>
   13fc2:	4b06      	ldr	r3, [pc, #24]	; (13fdc <rpc_at_event_handler+0x78>)
   13fc4:	681b      	ldr	r3, [r3, #0]
   13fc6:	2b00      	cmp	r3, #0
   13fc8:	d0d1      	beq.n	13f6e <rpc_at_event_handler+0xa>
   13fca:	6800      	ldr	r0, [r0, #0]
   13fcc:	4798      	blx	r3
   13fce:	e7ce      	b.n	13f6e <rpc_at_event_handler+0xa>
   13fd0:	2000ce47 	.word	0x2000ce47
   13fd4:	2000ca84 	.word	0x2000ca84
   13fd8:	2000ca8c 	.word	0x2000ca8c
   13fdc:	2000ca88 	.word	0x2000ca88

00013fe0 <sock_find>:
   13fe0:	b530      	push	{r4, r5, lr}
   13fe2:	4602      	mov	r2, r0
   13fe4:	2300      	movs	r3, #0
   13fe6:	2564      	movs	r5, #100	; 0x64
   13fe8:	4905      	ldr	r1, [pc, #20]	; (14000 <sock_find+0x20>)
   13fea:	fb05 f403 	mul.w	r4, r5, r3
   13fee:	1860      	adds	r0, r4, r1
   13ff0:	590c      	ldr	r4, [r1, r4]
   13ff2:	4294      	cmp	r4, r2
   13ff4:	d003      	beq.n	13ffe <sock_find+0x1e>
   13ff6:	3301      	adds	r3, #1
   13ff8:	2b08      	cmp	r3, #8
   13ffa:	d1f6      	bne.n	13fea <sock_find+0xa>
   13ffc:	2000      	movs	r0, #0
   13ffe:	bd30      	pop	{r4, r5, pc}
   14000:	2000ca94 	.word	0x2000ca94

00014004 <sock_flow_control_set>:
   14004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14008:	1e02      	subs	r2, r0, #0
   1400a:	4c10      	ldr	r4, [pc, #64]	; (1404c <sock_flow_control_set+0x48>)
   1400c:	bf18      	it	ne
   1400e:	2201      	movne	r2, #1
   14010:	4606      	mov	r6, r0
   14012:	2500      	movs	r5, #0
   14014:	46a0      	mov	r8, r4
   14016:	f04f 0964 	mov.w	r9, #100	; 0x64
   1401a:	4b0d      	ldr	r3, [pc, #52]	; (14050 <sock_flow_control_set+0x4c>)
   1401c:	4f0d      	ldr	r7, [pc, #52]	; (14054 <sock_flow_control_set+0x50>)
   1401e:	701a      	strb	r2, [r3, #0]
   14020:	6823      	ldr	r3, [r4, #0]
   14022:	42bb      	cmp	r3, r7
   14024:	d00a      	beq.n	1403c <sock_flow_control_set+0x38>
   14026:	fb09 8305 	mla	r3, r9, r5, r8
   1402a:	7f1a      	ldrb	r2, [r3, #28]
   1402c:	f366 1286 	bfi	r2, r6, #6, #1
   14030:	771a      	strb	r2, [r3, #28]
   14032:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14034:	b113      	cbz	r3, 1403c <sock_flow_control_set+0x38>
   14036:	4620      	mov	r0, r4
   14038:	f003 fcc4 	bl	179c4 <sock_pollcb>
   1403c:	3501      	adds	r5, #1
   1403e:	2d08      	cmp	r5, #8
   14040:	f104 0464 	add.w	r4, r4, #100	; 0x64
   14044:	d1ec      	bne.n	14020 <sock_flow_control_set+0x1c>
   14046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1404a:	bf00      	nop
   1404c:	2000ca94 	.word	0x2000ca94
   14050:	2000ce48 	.word	0x2000ce48
   14054:	1badf11e 	.word	0x1badf11e

00014058 <on_getaddrinfo_res>:
   14058:	2301      	movs	r3, #1
   1405a:	4a03      	ldr	r2, [pc, #12]	; (14068 <on_getaddrinfo_res+0x10>)
   1405c:	7013      	strb	r3, [r2, #0]
   1405e:	4a03      	ldr	r2, [pc, #12]	; (1406c <on_getaddrinfo_res+0x14>)
   14060:	6010      	str	r0, [r2, #0]
   14062:	4618      	mov	r0, r3
   14064:	4770      	bx	lr
   14066:	bf00      	nop
   14068:	2000ce49 	.word	0x2000ce49
   1406c:	2000cdb4 	.word	0x2000cdb4

00014070 <rpc_ip_event_handler>:
   14070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14072:	f248 030f 	movw	r3, #32783	; 0x800f
   14076:	4299      	cmp	r1, r3
   14078:	4606      	mov	r6, r0
   1407a:	460d      	mov	r5, r1
   1407c:	d03b      	beq.n	140f6 <rpc_ip_event_handler+0x86>
   1407e:	d822      	bhi.n	140c6 <rpc_ip_event_handler+0x56>
   14080:	f248 030d 	movw	r3, #32781	; 0x800d
   14084:	4299      	cmp	r1, r3
   14086:	d02f      	beq.n	140e8 <rpc_ip_event_handler+0x78>
   14088:	f248 030e 	movw	r3, #32782	; 0x800e
   1408c:	4299      	cmp	r1, r3
   1408e:	d02f      	beq.n	140f0 <rpc_ip_event_handler+0x80>
   14090:	6900      	ldr	r0, [r0, #16]
   14092:	f7ff ffa5 	bl	13fe0 <sock_find>
   14096:	4604      	mov	r4, r0
   14098:	b308      	cbz	r0, 140de <rpc_ip_event_handler+0x6e>
   1409a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1409e:	d91e      	bls.n	140de <rpc_ip_event_handler+0x6e>
   140a0:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   140a4:	3d01      	subs	r5, #1
   140a6:	2d0b      	cmp	r5, #11
   140a8:	d819      	bhi.n	140de <rpc_ip_event_handler+0x6e>
   140aa:	e8df f015 	tbh	[pc, r5, lsl #1]
   140ae:	0090      	.short	0x0090
   140b0:	009400b3 	.word	0x009400b3
   140b4:	00940094 	.word	0x00940094
   140b8:	00ee00ee 	.word	0x00ee00ee
   140bc:	00990094 	.word	0x00990094
   140c0:	00180018 	.word	0x00180018
   140c4:	00d2      	.short	0x00d2
   140c6:	f249 0304 	movw	r3, #36868	; 0x9004
   140ca:	4299      	cmp	r1, r3
   140cc:	d016      	beq.n	140fc <rpc_ip_event_handler+0x8c>
   140ce:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   140d2:	d924      	bls.n	1411e <rpc_ip_event_handler+0xae>
   140d4:	68c0      	ldr	r0, [r0, #12]
   140d6:	f7ff ff83 	bl	13fe0 <sock_find>
   140da:	4604      	mov	r4, r0
   140dc:	bb70      	cbnz	r0, 1413c <rpc_ip_event_handler+0xcc>
   140de:	6830      	ldr	r0, [r6, #0]
   140e0:	b1b0      	cbz	r0, 14110 <rpc_ip_event_handler+0xa0>
   140e2:	f003 fc2a 	bl	1793a <rpc_client_msg_data_rx_free>
   140e6:	e013      	b.n	14110 <rpc_ip_event_handler+0xa0>
   140e8:	f7ff ffb6 	bl	14058 <on_getaddrinfo_res>
   140ec:	b2c0      	uxtb	r0, r0
   140ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140f0:	f003 fcf0 	bl	17ad4 <on_getifaddrs_res>
   140f4:	e7fa      	b.n	140ec <rpc_ip_event_handler+0x7c>
   140f6:	f003 fceb 	bl	17ad0 <on_conf_dnssrv_res>
   140fa:	e7f7      	b.n	140ec <rpc_ip_event_handler+0x7c>
   140fc:	6903      	ldr	r3, [r0, #16]
   140fe:	2b03      	cmp	r3, #3
   14100:	d806      	bhi.n	14110 <rpc_ip_event_handler+0xa0>
   14102:	e8df f003 	tbb	[pc, r3]
   14106:	0a02      	.short	0x0a02
   14108:	0702      	.short	0x0702
   1410a:	2000      	movs	r0, #0
   1410c:	f7ff ff7a 	bl	14004 <sock_flow_control_set>
   14110:	2000      	movs	r0, #0
   14112:	e7ec      	b.n	140ee <rpc_ip_event_handler+0x7e>
   14114:	2201      	movs	r2, #1
   14116:	4b65      	ldr	r3, [pc, #404]	; (142ac <rpc_ip_event_handler+0x23c>)
   14118:	701a      	strb	r2, [r3, #0]
   1411a:	2001      	movs	r0, #1
   1411c:	e7f6      	b.n	1410c <rpc_ip_event_handler+0x9c>
   1411e:	6900      	ldr	r0, [r0, #16]
   14120:	f7ff ff5e 	bl	13fe0 <sock_find>
   14124:	4604      	mov	r4, r0
   14126:	2800      	cmp	r0, #0
   14128:	d0d9      	beq.n	140de <rpc_ip_event_handler+0x6e>
   1412a:	f248 0381 	movw	r3, #32897	; 0x8081
   1412e:	429d      	cmp	r5, r3
   14130:	d1d5      	bne.n	140de <rpc_ip_event_handler+0x6e>
   14132:	4601      	mov	r1, r0
   14134:	4630      	mov	r0, r6
   14136:	f000 f8bb 	bl	142b0 <on_tls_attach_res>
   1413a:	e04f      	b.n	141dc <rpc_ip_event_handler+0x16c>
   1413c:	f249 0302 	movw	r3, #36866	; 0x9002
   14140:	429d      	cmp	r5, r3
   14142:	f000 809e 	beq.w	14282 <rpc_ip_event_handler+0x212>
   14146:	d835      	bhi.n	141b4 <rpc_ip_event_handler+0x144>
   14148:	f003 fc8b 	bl	17a62 <sock_has_stream_error>
   1414c:	4607      	mov	r7, r0
   1414e:	b9e0      	cbnz	r0, 1418a <rpc_ip_event_handler+0x11a>
   14150:	2010      	movs	r0, #16
   14152:	f7fe fc55 	bl	12a00 <nrf_modem_os_alloc>
   14156:	4605      	mov	r5, r0
   14158:	b1b8      	cbz	r0, 1418a <rpc_ip_event_handler+0x11a>
   1415a:	4639      	mov	r1, r7
   1415c:	2210      	movs	r2, #16
   1415e:	f003 fffe 	bl	1815e <memset>
   14162:	6833      	ldr	r3, [r6, #0]
   14164:	606b      	str	r3, [r5, #4]
   14166:	6873      	ldr	r3, [r6, #4]
   14168:	812b      	strh	r3, [r5, #8]
   1416a:	8a71      	ldrh	r1, [r6, #18]
   1416c:	2900      	cmp	r1, #0
   1416e:	f000 8097 	beq.w	142a0 <rpc_ip_event_handler+0x230>
   14172:	8a32      	ldrh	r2, [r6, #16]
   14174:	f106 0014 	add.w	r0, r6, #20
   14178:	f003 fbeb 	bl	17952 <sockaddr_init>
   1417c:	60e8      	str	r0, [r5, #12]
   1417e:	2800      	cmp	r0, #0
   14180:	f040 808e 	bne.w	142a0 <rpc_ip_event_handler+0x230>
   14184:	4628      	mov	r0, r5
   14186:	f7fe fc45 	bl	12a14 <nrf_modem_os_free>
   1418a:	6830      	ldr	r0, [r6, #0]
   1418c:	f003 fbd5 	bl	1793a <rpc_client_msg_data_rx_free>
   14190:	4620      	mov	r0, r4
   14192:	f003 fc39 	bl	17a08 <sock_is_stream>
   14196:	b148      	cbz	r0, 141ac <rpc_ip_event_handler+0x13c>
   14198:	4620      	mov	r0, r4
   1419a:	f003 fc62 	bl	17a62 <sock_has_stream_error>
   1419e:	b928      	cbnz	r0, 141ac <rpc_ip_event_handler+0x13c>
   141a0:	230c      	movs	r3, #12
   141a2:	61a3      	str	r3, [r4, #24]
   141a4:	7f23      	ldrb	r3, [r4, #28]
   141a6:	f063 037e 	orn	r3, r3, #126	; 0x7e
   141aa:	7723      	strb	r3, [r4, #28]
   141ac:	4620      	mov	r0, r4
   141ae:	f003 fc30 	bl	17a12 <sock_is_datagram>
   141b2:	e025      	b.n	14200 <rpc_ip_event_handler+0x190>
   141b4:	f249 0303 	movw	r3, #36867	; 0x9003
   141b8:	429d      	cmp	r5, r3
   141ba:	d018      	beq.n	141ee <rpc_ip_event_handler+0x17e>
   141bc:	f249 0382 	movw	r3, #36994	; 0x9082
   141c0:	429d      	cmp	r5, r3
   141c2:	d18c      	bne.n	140de <rpc_ip_event_handler+0x6e>
   141c4:	4601      	mov	r1, r0
   141c6:	4630      	mov	r0, r6
   141c8:	f000 f886 	bl	142d8 <on_tls_handshake_ntf>
   141cc:	e006      	b.n	141dc <rpc_ip_event_handler+0x16c>
   141ce:	6973      	ldr	r3, [r6, #20]
   141d0:	b90b      	cbnz	r3, 141d6 <rpc_ip_event_handler+0x166>
   141d2:	69b3      	ldr	r3, [r6, #24]
   141d4:	6003      	str	r3, [r0, #0]
   141d6:	4630      	mov	r0, r6
   141d8:	f003 fcc9 	bl	17b6e <res_forward>
   141dc:	4605      	mov	r5, r0
   141de:	e010      	b.n	14202 <rpc_ip_event_handler+0x192>
   141e0:	7f03      	ldrb	r3, [r0, #28]
   141e2:	f023 0303 	bic.w	r3, r3, #3
   141e6:	f043 0303 	orr.w	r3, r3, #3
   141ea:	7703      	strb	r3, [r0, #28]
   141ec:	e7f3      	b.n	141d6 <rpc_ip_event_handler+0x166>
   141ee:	7f03      	ldrb	r3, [r0, #28]
   141f0:	f043 0301 	orr.w	r3, r3, #1
   141f4:	7703      	strb	r3, [r0, #28]
   141f6:	6930      	ldr	r0, [r6, #16]
   141f8:	2869      	cmp	r0, #105	; 0x69
   141fa:	d112      	bne.n	14222 <rpc_ip_event_handler+0x1b2>
   141fc:	2368      	movs	r3, #104	; 0x68
   141fe:	61a3      	str	r3, [r4, #24]
   14200:	2500      	movs	r5, #0
   14202:	4620      	mov	r0, r4
   14204:	f003 fc37 	bl	17a76 <sock_has_pollcb>
   14208:	b110      	cbz	r0, 14210 <rpc_ip_event_handler+0x1a0>
   1420a:	4620      	mov	r0, r4
   1420c:	f003 fbda 	bl	179c4 <sock_pollcb>
   14210:	b2e8      	uxtb	r0, r5
   14212:	e76c      	b.n	140ee <rpc_ip_event_handler+0x7e>
   14214:	7f03      	ldrb	r3, [r0, #28]
   14216:	68f5      	ldr	r5, [r6, #12]
   14218:	f36f 0382 	bfc	r3, #2, #1
   1421c:	7703      	strb	r3, [r0, #28]
   1421e:	6970      	ldr	r0, [r6, #20]
   14220:	b118      	cbz	r0, 1422a <rpc_ip_event_handler+0x1ba>
   14222:	f000 f8eb 	bl	143fc <rpc_error_to_nrf_errno>
   14226:	61a0      	str	r0, [r4, #24]
   14228:	e7ea      	b.n	14200 <rpc_ip_event_handler+0x190>
   1422a:	4620      	mov	r0, r4
   1422c:	f003 fbf6 	bl	17a1c <sock_proto_is_secure>
   14230:	b918      	cbnz	r0, 1423a <rpc_ip_event_handler+0x1ca>
   14232:	7f23      	ldrb	r3, [r4, #28]
   14234:	f043 0308 	orr.w	r3, r3, #8
   14238:	7723      	strb	r3, [r4, #28]
   1423a:	4620      	mov	r0, r4
   1423c:	f003 fbee 	bl	17a1c <sock_proto_is_secure>
   14240:	2800      	cmp	r0, #0
   14242:	d0cb      	beq.n	141dc <rpc_ip_event_handler+0x16c>
   14244:	2d00      	cmp	r5, #0
   14246:	d0dc      	beq.n	14202 <rpc_ip_event_handler+0x192>
   14248:	2100      	movs	r1, #0
   1424a:	4620      	mov	r0, r4
   1424c:	f000 f85e 	bl	1430c <tls_attach>
   14250:	e7d6      	b.n	14200 <rpc_ip_event_handler+0x190>
   14252:	7f43      	ldrb	r3, [r0, #29]
   14254:	3b01      	subs	r3, #1
   14256:	7743      	strb	r3, [r0, #29]
   14258:	6973      	ldr	r3, [r6, #20]
   1425a:	2b00      	cmp	r3, #0
   1425c:	d1bb      	bne.n	141d6 <rpc_ip_event_handler+0x166>
   1425e:	4630      	mov	r0, r6
   14260:	f003 fc83 	bl	17b6a <res_cookie_get>
   14264:	69b2      	ldr	r2, [r6, #24]
   14266:	6843      	ldr	r3, [r0, #4]
   14268:	601a      	str	r2, [r3, #0]
   1426a:	6842      	ldr	r2, [r0, #4]
   1426c:	7f13      	ldrb	r3, [r2, #28]
   1426e:	f043 0308 	orr.w	r3, r3, #8
   14272:	7713      	strb	r3, [r2, #28]
   14274:	6843      	ldr	r3, [r0, #4]
   14276:	6922      	ldr	r2, [r4, #16]
   14278:	611a      	str	r2, [r3, #16]
   1427a:	6843      	ldr	r3, [r0, #4]
   1427c:	6962      	ldr	r2, [r4, #20]
   1427e:	615a      	str	r2, [r3, #20]
   14280:	e7a9      	b.n	141d6 <rpc_ip_event_handler+0x166>
   14282:	7f43      	ldrb	r3, [r0, #29]
   14284:	3301      	adds	r3, #1
   14286:	7743      	strb	r3, [r0, #29]
   14288:	e7ba      	b.n	14200 <rpc_ip_event_handler+0x190>
   1428a:	4630      	mov	r0, r6
   1428c:	f003 fc6d 	bl	17b6a <res_cookie_get>
   14290:	6973      	ldr	r3, [r6, #20]
   14292:	b913      	cbnz	r3, 1429a <rpc_ip_event_handler+0x22a>
   14294:	69b3      	ldr	r3, [r6, #24]
   14296:	6043      	str	r3, [r0, #4]
   14298:	e79d      	b.n	141d6 <rpc_ip_event_handler+0x166>
   1429a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1429e:	e7fa      	b.n	14296 <rpc_ip_event_handler+0x226>
   142a0:	4629      	mov	r1, r5
   142a2:	4620      	mov	r0, r4
   142a4:	f003 fba6 	bl	179f4 <sock_pkt_append>
   142a8:	e7aa      	b.n	14200 <rpc_ip_event_handler+0x190>
   142aa:	bf00      	nop
   142ac:	2000ce4a 	.word	0x2000ce4a

000142b0 <on_tls_attach_res>:
   142b0:	b510      	push	{r4, lr}
   142b2:	6943      	ldr	r3, [r0, #20]
   142b4:	460c      	mov	r4, r1
   142b6:	b15b      	cbz	r3, 142d0 <on_tls_attach_res+0x20>
   142b8:	7f0b      	ldrb	r3, [r1, #28]
   142ba:	f36f 1304 	bfc	r3, #4, #1
   142be:	770b      	strb	r3, [r1, #28]
   142c0:	6940      	ldr	r0, [r0, #20]
   142c2:	f000 f89b 	bl	143fc <rpc_error_to_nrf_errno>
   142c6:	4b03      	ldr	r3, [pc, #12]	; (142d4 <on_tls_attach_res+0x24>)
   142c8:	61a0      	str	r0, [r4, #24]
   142ca:	6818      	ldr	r0, [r3, #0]
   142cc:	f003 f9e2 	bl	17694 <nrf_modem_os_sem_give>
   142d0:	2000      	movs	r0, #0
   142d2:	bd10      	pop	{r4, pc}
   142d4:	2000cdb8 	.word	0x2000cdb8

000142d8 <on_tls_handshake_ntf>:
   142d8:	b510      	push	{r4, lr}
   142da:	7f0b      	ldrb	r3, [r1, #28]
   142dc:	460c      	mov	r4, r1
   142de:	f36f 1304 	bfc	r3, #4, #1
   142e2:	770b      	strb	r3, [r1, #28]
   142e4:	6900      	ldr	r0, [r0, #16]
   142e6:	b958      	cbnz	r0, 14300 <on_tls_handshake_ntf+0x28>
   142e8:	b2db      	uxtb	r3, r3
   142ea:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   142ee:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   142f2:	770b      	strb	r3, [r1, #28]
   142f4:	4b04      	ldr	r3, [pc, #16]	; (14308 <on_tls_handshake_ntf+0x30>)
   142f6:	6818      	ldr	r0, [r3, #0]
   142f8:	f003 f9cc 	bl	17694 <nrf_modem_os_sem_give>
   142fc:	2000      	movs	r0, #0
   142fe:	bd10      	pop	{r4, pc}
   14300:	f000 f87c 	bl	143fc <rpc_error_to_nrf_errno>
   14304:	61a0      	str	r0, [r4, #24]
   14306:	e7f5      	b.n	142f4 <on_tls_handshake_ntf+0x1c>
   14308:	2000cdb8 	.word	0x2000cdb8

0001430c <tls_attach>:
   1430c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14310:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 143f8 <tls_attach+0xec>
   14314:	4605      	mov	r5, r0
   14316:	f8d8 0000 	ldr.w	r0, [r8]
   1431a:	9101      	str	r1, [sp, #4]
   1431c:	f003 f9be 	bl	1769c <nrf_modem_os_sem_take>
   14320:	4607      	mov	r7, r0
   14322:	b150      	cbz	r0, 1433a <tls_attach+0x2e>
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	2b00      	cmp	r3, #0
   14328:	d163      	bne.n	143f2 <tls_attach+0xe6>
   1432a:	2310      	movs	r3, #16
   1432c:	61ab      	str	r3, [r5, #24]
   1432e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   14332:	4638      	mov	r0, r7
   14334:	b002      	add	sp, #8
   14336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1433a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1433c:	b1a8      	cbz	r0, 1436a <tls_attach+0x5e>
   1433e:	f7fc f869 	bl	10414 <strlen>
   14342:	1c46      	adds	r6, r0, #1
   14344:	4630      	mov	r0, r6
   14346:	f003 fad2 	bl	178ee <rpc_client_msg_alloc>
   1434a:	4604      	mov	r4, r0
   1434c:	b978      	cbnz	r0, 1436e <tls_attach+0x62>
   1434e:	4628      	mov	r0, r5
   14350:	f003 fb74 	bl	17a3c <sock_is_nonblock>
   14354:	b108      	cbz	r0, 1435a <tls_attach+0x4e>
   14356:	2369      	movs	r3, #105	; 0x69
   14358:	61ab      	str	r3, [r5, #24]
   1435a:	f8d8 0000 	ldr.w	r0, [r8]
   1435e:	f003 f999 	bl	17694 <nrf_modem_os_sem_give>
   14362:	2069      	movs	r0, #105	; 0x69
   14364:	f003 f98c 	bl	17680 <nrf_modem_os_errno_set>
   14368:	e7e1      	b.n	1432e <tls_attach+0x22>
   1436a:	463e      	mov	r6, r7
   1436c:	e7ea      	b.n	14344 <tls_attach+0x38>
   1436e:	682b      	ldr	r3, [r5, #0]
   14370:	2204      	movs	r2, #4
   14372:	6103      	str	r3, [r0, #16]
   14374:	2300      	movs	r3, #0
   14376:	7202      	strb	r2, [r0, #8]
   14378:	7243      	strb	r3, [r0, #9]
   1437a:	7283      	strb	r3, [r0, #10]
   1437c:	72c3      	strb	r3, [r0, #11]
   1437e:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   14382:	f105 0144 	add.w	r1, r5, #68	; 0x44
   14386:	3201      	adds	r2, #1
   14388:	0092      	lsls	r2, r2, #2
   1438a:	6082      	str	r2, [r0, #8]
   1438c:	3014      	adds	r0, #20
   1438e:	f003 fed9 	bl	18144 <memcpy>
   14392:	b1e6      	cbz	r6, 143ce <tls_attach+0xc2>
   14394:	4632      	mov	r2, r6
   14396:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14398:	6820      	ldr	r0, [r4, #0]
   1439a:	f003 fee8 	bl	1816e <strncpy>
   1439e:	6066      	str	r6, [r4, #4]
   143a0:	7f2b      	ldrb	r3, [r5, #28]
   143a2:	2004      	movs	r0, #4
   143a4:	f043 0310 	orr.w	r3, r3, #16
   143a8:	4622      	mov	r2, r4
   143aa:	f247 0181 	movw	r1, #28801	; 0x7081
   143ae:	772b      	strb	r3, [r5, #28]
   143b0:	f003 fab9 	bl	17926 <rpc_client_msg_send>
   143b4:	4628      	mov	r0, r5
   143b6:	f003 fb41 	bl	17a3c <sock_is_nonblock>
   143ba:	2800      	cmp	r0, #0
   143bc:	d1b9      	bne.n	14332 <tls_attach+0x26>
   143be:	4628      	mov	r0, r5
   143c0:	f003 fb38 	bl	17a34 <sock_is_attaching>
   143c4:	b940      	cbnz	r0, 143d8 <tls_attach+0xcc>
   143c6:	69a8      	ldr	r0, [r5, #24]
   143c8:	2800      	cmp	r0, #0
   143ca:	d0b2      	beq.n	14332 <tls_attach+0x26>
   143cc:	e7ca      	b.n	14364 <tls_attach+0x58>
   143ce:	7026      	strb	r6, [r4, #0]
   143d0:	7066      	strb	r6, [r4, #1]
   143d2:	70a6      	strb	r6, [r4, #2]
   143d4:	70e6      	strb	r6, [r4, #3]
   143d6:	e7e2      	b.n	1439e <tls_attach+0x92>
   143d8:	2002      	movs	r0, #2
   143da:	a901      	add	r1, sp, #4
   143dc:	f003 f8d1 	bl	17582 <nrf_modem_os_timedwait>
   143e0:	f110 0f0b 	cmn.w	r0, #11
   143e4:	d005      	beq.n	143f2 <tls_attach+0xe6>
   143e6:	2800      	cmp	r0, #0
   143e8:	d0e9      	beq.n	143be <tls_attach+0xb2>
   143ea:	2800      	cmp	r0, #0
   143ec:	bfb8      	it	lt
   143ee:	4240      	neglt	r0, r0
   143f0:	e7b8      	b.n	14364 <tls_attach+0x58>
   143f2:	2074      	movs	r0, #116	; 0x74
   143f4:	e7b6      	b.n	14364 <tls_attach+0x58>
   143f6:	bf00      	nop
   143f8:	2000cdb8 	.word	0x2000cdb8

000143fc <rpc_error_to_nrf_errno>:
   143fc:	2870      	cmp	r0, #112	; 0x70
   143fe:	bf9a      	itte	ls
   14400:	4b02      	ldrls	r3, [pc, #8]	; (1440c <rpc_error_to_nrf_errno+0x10>)
   14402:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   14406:	4802      	ldrhi	r0, [pc, #8]	; (14410 <rpc_error_to_nrf_errno+0x14>)
   14408:	4770      	bx	lr
   1440a:	bf00      	nop
   1440c:	00018a48 	.word	0x00018a48
   14410:	baadbaad 	.word	0xbaadbaad

00014414 <rpc_gnss_event_handler>:
   14414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14416:	6804      	ldr	r4, [r0, #0]
   14418:	4606      	mov	r6, r0
   1441a:	b13c      	cbz	r4, 1442c <rpc_gnss_event_handler+0x18>
   1441c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   14420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   14424:	d104      	bne.n	14430 <rpc_gnss_event_handler+0x1c>
   14426:	4b41      	ldr	r3, [pc, #260]	; (1452c <rpc_gnss_event_handler+0x118>)
   14428:	e9c3 1400 	strd	r1, r4, [r3]
   1442c:	2000      	movs	r0, #0
   1442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14430:	4d3f      	ldr	r5, [pc, #252]	; (14530 <rpc_gnss_event_handler+0x11c>)
   14432:	682b      	ldr	r3, [r5, #0]
   14434:	2b00      	cmp	r3, #0
   14436:	d06f      	beq.n	14518 <rpc_gnss_event_handler+0x104>
   14438:	f244 0204 	movw	r2, #16388	; 0x4004
   1443c:	4291      	cmp	r1, r2
   1443e:	d80b      	bhi.n	14458 <rpc_gnss_event_handler+0x44>
   14440:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   14444:	d968      	bls.n	14518 <rpc_gnss_event_handler+0x104>
   14446:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   1444a:	3902      	subs	r1, #2
   1444c:	2902      	cmp	r1, #2
   1444e:	d82a      	bhi.n	144a6 <rpc_gnss_event_handler+0x92>
   14450:	e8df f001 	tbb	[pc, r1]
   14454:	5047      	.short	0x5047
   14456:	59          	.byte	0x59
   14457:	00          	.byte	0x00
   14458:	f244 1301 	movw	r3, #16641	; 0x4101
   1445c:	4299      	cmp	r1, r3
   1445e:	d02e      	beq.n	144be <rpc_gnss_event_handler+0xaa>
   14460:	f244 2301 	movw	r3, #16897	; 0x4201
   14464:	4299      	cmp	r1, r3
   14466:	d157      	bne.n	14518 <rpc_gnss_event_handler+0x104>
   14468:	4e32      	ldr	r6, [pc, #200]	; (14534 <rpc_gnss_event_handler+0x120>)
   1446a:	6830      	ldr	r0, [r6, #0]
   1446c:	b108      	cbz	r0, 14472 <rpc_gnss_event_handler+0x5e>
   1446e:	f003 fa64 	bl	1793a <rpc_client_msg_data_rx_free>
   14472:	2202      	movs	r2, #2
   14474:	4b30      	ldr	r3, [pc, #192]	; (14538 <rpc_gnss_event_handler+0x124>)
   14476:	6034      	str	r4, [r6, #0]
   14478:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   1447c:	701a      	strb	r2, [r3, #0]
   1447e:	4e2f      	ldr	r6, [pc, #188]	; (1453c <rpc_gnss_event_handler+0x128>)
   14480:	f014 0708 	ands.w	r7, r4, #8
   14484:	682b      	ldr	r3, [r5, #0]
   14486:	7832      	ldrb	r2, [r6, #0]
   14488:	d025      	beq.n	144d6 <rpc_gnss_event_handler+0xc2>
   1448a:	b91a      	cbnz	r2, 14494 <rpc_gnss_event_handler+0x80>
   1448c:	2005      	movs	r0, #5
   1448e:	4798      	blx	r3
   14490:	2301      	movs	r3, #1
   14492:	7033      	strb	r3, [r6, #0]
   14494:	07e3      	lsls	r3, r4, #31
   14496:	d502      	bpl.n	1449e <rpc_gnss_event_handler+0x8a>
   14498:	2002      	movs	r0, #2
   1449a:	682b      	ldr	r3, [r5, #0]
   1449c:	4798      	blx	r3
   1449e:	2001      	movs	r0, #1
   144a0:	682b      	ldr	r3, [r5, #0]
   144a2:	4798      	blx	r3
   144a4:	e7c2      	b.n	1442c <rpc_gnss_event_handler+0x18>
   144a6:	4e23      	ldr	r6, [pc, #140]	; (14534 <rpc_gnss_event_handler+0x120>)
   144a8:	6830      	ldr	r0, [r6, #0]
   144aa:	b108      	cbz	r0, 144b0 <rpc_gnss_event_handler+0x9c>
   144ac:	f003 fa45 	bl	1793a <rpc_client_msg_data_rx_free>
   144b0:	2200      	movs	r2, #0
   144b2:	4b21      	ldr	r3, [pc, #132]	; (14538 <rpc_gnss_event_handler+0x124>)
   144b4:	6034      	str	r4, [r6, #0]
   144b6:	701a      	strb	r2, [r3, #0]
   144b8:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   144bc:	e7df      	b.n	1447e <rpc_gnss_event_handler+0x6a>
   144be:	4e1d      	ldr	r6, [pc, #116]	; (14534 <rpc_gnss_event_handler+0x120>)
   144c0:	6830      	ldr	r0, [r6, #0]
   144c2:	b108      	cbz	r0, 144c8 <rpc_gnss_event_handler+0xb4>
   144c4:	f003 fa39 	bl	1793a <rpc_client_msg_data_rx_free>
   144c8:	2201      	movs	r2, #1
   144ca:	4b1b      	ldr	r3, [pc, #108]	; (14538 <rpc_gnss_event_handler+0x124>)
   144cc:	6034      	str	r4, [r6, #0]
   144ce:	701a      	strb	r2, [r3, #0]
   144d0:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   144d4:	e7d3      	b.n	1447e <rpc_gnss_event_handler+0x6a>
   144d6:	2a00      	cmp	r2, #0
   144d8:	d0dc      	beq.n	14494 <rpc_gnss_event_handler+0x80>
   144da:	2006      	movs	r0, #6
   144dc:	4798      	blx	r3
   144de:	7037      	strb	r7, [r6, #0]
   144e0:	e7d8      	b.n	14494 <rpc_gnss_event_handler+0x80>
   144e2:	4e17      	ldr	r6, [pc, #92]	; (14540 <rpc_gnss_event_handler+0x12c>)
   144e4:	6830      	ldr	r0, [r6, #0]
   144e6:	b108      	cbz	r0, 144ec <rpc_gnss_event_handler+0xd8>
   144e8:	f003 fa27 	bl	1793a <rpc_client_msg_data_rx_free>
   144ec:	2003      	movs	r0, #3
   144ee:	682b      	ldr	r3, [r5, #0]
   144f0:	6034      	str	r4, [r6, #0]
   144f2:	e7d6      	b.n	144a2 <rpc_gnss_event_handler+0x8e>
   144f4:	4e13      	ldr	r6, [pc, #76]	; (14544 <rpc_gnss_event_handler+0x130>)
   144f6:	6830      	ldr	r0, [r6, #0]
   144f8:	b108      	cbz	r0, 144fe <rpc_gnss_event_handler+0xea>
   144fa:	f003 fa1e 	bl	1793a <rpc_client_msg_data_rx_free>
   144fe:	2004      	movs	r0, #4
   14500:	682b      	ldr	r3, [r5, #0]
   14502:	6034      	str	r4, [r6, #0]
   14504:	e7cd      	b.n	144a2 <rpc_gnss_event_handler+0x8e>
   14506:	7822      	ldrb	r2, [r4, #0]
   14508:	2a03      	cmp	r2, #3
   1450a:	d805      	bhi.n	14518 <rpc_gnss_event_handler+0x104>
   1450c:	e8df f002 	tbb	[pc, r2]
   14510:	0c0a0802 	.word	0x0c0a0802
   14514:	2007      	movs	r0, #7
   14516:	4798      	blx	r3
   14518:	6830      	ldr	r0, [r6, #0]
   1451a:	f003 fa0e 	bl	1793a <rpc_client_msg_data_rx_free>
   1451e:	e785      	b.n	1442c <rpc_gnss_event_handler+0x18>
   14520:	2008      	movs	r0, #8
   14522:	e7f8      	b.n	14516 <rpc_gnss_event_handler+0x102>
   14524:	2009      	movs	r0, #9
   14526:	e7f6      	b.n	14516 <rpc_gnss_event_handler+0x102>
   14528:	200a      	movs	r0, #10
   1452a:	e7f4      	b.n	14516 <rpc_gnss_event_handler+0x102>
   1452c:	2000cdcc 	.word	0x2000cdcc
   14530:	2000cdbc 	.word	0x2000cdbc
   14534:	2000cdc8 	.word	0x2000cdc8
   14538:	2000ce4b 	.word	0x2000ce4b
   1453c:	2000ce4c 	.word	0x2000ce4c
   14540:	2000cdc4 	.word	0x2000cdc4
   14544:	2000cdc0 	.word	0x2000cdc0

00014548 <nrf_modem_fault_handler_internal>:
   14548:	b507      	push	{r0, r1, r2, lr}
   1454a:	4b04      	ldr	r3, [pc, #16]	; (1455c <nrf_modem_fault_handler_internal+0x14>)
   1454c:	e9cd 0100 	strd	r0, r1, [sp]
   14550:	681b      	ldr	r3, [r3, #0]
   14552:	4668      	mov	r0, sp
   14554:	4798      	blx	r3
   14556:	b003      	add	sp, #12
   14558:	f85d fb04 	ldr.w	pc, [sp], #4
   1455c:	2000cdd4 	.word	0x2000cdd4

00014560 <nrf_modem_state_set>:
   14560:	4b01      	ldr	r3, [pc, #4]	; (14568 <nrf_modem_state_set+0x8>)
   14562:	7018      	strb	r0, [r3, #0]
   14564:	4770      	bx	lr
   14566:	bf00      	nop
   14568:	2000ce4d 	.word	0x2000ce4d

0001456c <nrf_modem_state_is_initialized>:
   1456c:	4b02      	ldr	r3, [pc, #8]	; (14578 <nrf_modem_state_is_initialized+0xc>)
   1456e:	7818      	ldrb	r0, [r3, #0]
   14570:	1e43      	subs	r3, r0, #1
   14572:	4258      	negs	r0, r3
   14574:	4158      	adcs	r0, r3
   14576:	4770      	bx	lr
   14578:	2000ce4d 	.word	0x2000ce4d

0001457c <ipc_trace_init>:
   1457c:	2100      	movs	r1, #0
   1457e:	4b07      	ldr	r3, [pc, #28]	; (1459c <ipc_trace_init+0x20>)
   14580:	2201      	movs	r2, #1
   14582:	7019      	strb	r1, [r3, #0]
   14584:	4b06      	ldr	r3, [pc, #24]	; (145a0 <ipc_trace_init+0x24>)
   14586:	7019      	strb	r1, [r3, #0]
   14588:	4b06      	ldr	r3, [pc, #24]	; (145a4 <ipc_trace_init+0x28>)
   1458a:	6019      	str	r1, [r3, #0]
   1458c:	4b06      	ldr	r3, [pc, #24]	; (145a8 <ipc_trace_init+0x2c>)
   1458e:	6019      	str	r1, [r3, #0]
   14590:	4b06      	ldr	r3, [pc, #24]	; (145ac <ipc_trace_init+0x30>)
   14592:	6018      	str	r0, [r3, #0]
   14594:	4806      	ldr	r0, [pc, #24]	; (145b0 <ipc_trace_init+0x34>)
   14596:	f7fe b9f5 	b.w	12984 <nrf_modem_os_sem_init>
   1459a:	bf00      	nop
   1459c:	2000ce4e 	.word	0x2000ce4e
   145a0:	2000ce4f 	.word	0x2000ce4f
   145a4:	2000cddc 	.word	0x2000cddc
   145a8:	2000cde0 	.word	0x2000cde0
   145ac:	2000cdf0 	.word	0x2000cdf0
   145b0:	2000cdd8 	.word	0x2000cdd8

000145b4 <ipc_trace_handler>:
   145b4:	b470      	push	{r4, r5, r6}
   145b6:	4b2d      	ldr	r3, [pc, #180]	; (1466c <ipc_trace_handler+0xb8>)
   145b8:	681b      	ldr	r3, [r3, #0]
   145ba:	6919      	ldr	r1, [r3, #16]
   145bc:	6958      	ldr	r0, [r3, #20]
   145be:	7c1a      	ldrb	r2, [r3, #16]
   145c0:	2200      	movs	r2, #0
   145c2:	741a      	strb	r2, [r3, #16]
   145c4:	7c5c      	ldrb	r4, [r3, #17]
   145c6:	745a      	strb	r2, [r3, #17]
   145c8:	7c9c      	ldrb	r4, [r3, #18]
   145ca:	749a      	strb	r2, [r3, #18]
   145cc:	7cdc      	ldrb	r4, [r3, #19]
   145ce:	74da      	strb	r2, [r3, #19]
   145d0:	7d1c      	ldrb	r4, [r3, #20]
   145d2:	751a      	strb	r2, [r3, #20]
   145d4:	7d5c      	ldrb	r4, [r3, #21]
   145d6:	755a      	strb	r2, [r3, #21]
   145d8:	7d9c      	ldrb	r4, [r3, #22]
   145da:	2903      	cmp	r1, #3
   145dc:	759a      	strb	r2, [r3, #22]
   145de:	7ddc      	ldrb	r4, [r3, #23]
   145e0:	75da      	strb	r2, [r3, #23]
   145e2:	d029      	beq.n	14638 <ipc_trace_handler+0x84>
   145e4:	2904      	cmp	r1, #4
   145e6:	d033      	beq.n	14650 <ipc_trace_handler+0x9c>
   145e8:	2901      	cmp	r1, #1
   145ea:	d12f      	bne.n	1464c <ipc_trace_handler+0x98>
   145ec:	6885      	ldr	r5, [r0, #8]
   145ee:	4e20      	ldr	r6, [pc, #128]	; (14670 <ipc_trace_handler+0xbc>)
   145f0:	4295      	cmp	r5, r2
   145f2:	d110      	bne.n	14616 <ipc_trace_handler+0x62>
   145f4:	2101      	movs	r1, #1
   145f6:	7a1a      	ldrb	r2, [r3, #8]
   145f8:	2200      	movs	r2, #0
   145fa:	7219      	strb	r1, [r3, #8]
   145fc:	7a59      	ldrb	r1, [r3, #9]
   145fe:	725a      	strb	r2, [r3, #9]
   14600:	7a99      	ldrb	r1, [r3, #10]
   14602:	729a      	strb	r2, [r3, #10]
   14604:	7ada      	ldrb	r2, [r3, #11]
   14606:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1460a:	72da      	strb	r2, [r3, #11]
   1460c:	4b19      	ldr	r3, [pc, #100]	; (14674 <ipc_trace_handler+0xc0>)
   1460e:	bc70      	pop	{r4, r5, r6}
   14610:	6818      	ldr	r0, [r3, #0]
   14612:	f003 b83f 	b.w	17694 <nrf_modem_os_sem_give>
   14616:	1c91      	adds	r1, r2, #2
   14618:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1461c:	684c      	ldr	r4, [r1, #4]
   1461e:	7821      	ldrb	r1, [r4, #0]
   14620:	2962      	cmp	r1, #98	; 0x62
   14622:	d007      	beq.n	14634 <ipc_trace_handler+0x80>
   14624:	3963      	subs	r1, #99	; 0x63
   14626:	bf18      	it	ne
   14628:	2101      	movne	r1, #1
   1462a:	0049      	lsls	r1, r1, #1
   1462c:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   14630:	3201      	adds	r2, #1
   14632:	e7dd      	b.n	145f0 <ipc_trace_handler+0x3c>
   14634:	2101      	movs	r1, #1
   14636:	e7f9      	b.n	1462c <ipc_trace_handler+0x78>
   14638:	7a18      	ldrb	r0, [r3, #8]
   1463a:	7219      	strb	r1, [r3, #8]
   1463c:	7a59      	ldrb	r1, [r3, #9]
   1463e:	725a      	strb	r2, [r3, #9]
   14640:	7a99      	ldrb	r1, [r3, #10]
   14642:	729a      	strb	r2, [r3, #10]
   14644:	7ada      	ldrb	r2, [r3, #11]
   14646:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1464a:	72da      	strb	r2, [r3, #11]
   1464c:	bc70      	pop	{r4, r5, r6}
   1464e:	4770      	bx	lr
   14650:	7a18      	ldrb	r0, [r3, #8]
   14652:	7219      	strb	r1, [r3, #8]
   14654:	7a59      	ldrb	r1, [r3, #9]
   14656:	725a      	strb	r2, [r3, #9]
   14658:	7a99      	ldrb	r1, [r3, #10]
   1465a:	729a      	strb	r2, [r3, #10]
   1465c:	7ada      	ldrb	r2, [r3, #11]
   1465e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   14662:	72da      	strb	r2, [r3, #11]
   14664:	2201      	movs	r2, #1
   14666:	4b04      	ldr	r3, [pc, #16]	; (14678 <ipc_trace_handler+0xc4>)
   14668:	701a      	strb	r2, [r3, #0]
   1466a:	e7ef      	b.n	1464c <ipc_trace_handler+0x98>
   1466c:	2000cdf0 	.word	0x2000cdf0
   14670:	2000cde4 	.word	0x2000cde4
   14674:	2000cdd8 	.word	0x2000cdd8
   14678:	2000ce4f 	.word	0x2000ce4f

0001467c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1467c:	4b03      	ldr	r3, [pc, #12]	; (1468c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1467e:	e000      	b.n	14682 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   14680:	3318      	adds	r3, #24
	while (dev < __device_end) {
   14682:	4a03      	ldr	r2, [pc, #12]	; (14690 <z_device_state_init+0x14>)
   14684:	4293      	cmp	r3, r2
   14686:	d3fb      	bcc.n	14680 <z_device_state_init+0x4>
	}
}
   14688:	4770      	bx	lr
   1468a:	bf00      	nop
   1468c:	000184d4 	.word	0x000184d4
   14690:	00018534 	.word	0x00018534

00014694 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   14694:	4b01      	ldr	r3, [pc, #4]	; (1469c <z_impl_z_errno+0x8>)
   14696:	6898      	ldr	r0, [r3, #8]
}
   14698:	3094      	adds	r0, #148	; 0x94
   1469a:	4770      	bx	lr
   1469c:	2000cdf4 	.word	0x2000cdf4

000146a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   146a0:	b570      	push	{r4, r5, r6, lr}
   146a2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   146a4:	4b12      	ldr	r3, [pc, #72]	; (146f0 <z_sys_init_run_level+0x50>)
   146a6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   146aa:	e009      	b.n	146c0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   146ac:	4243      	negs	r3, r0
   146ae:	e017      	b.n	146e0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   146b0:	68ea      	ldr	r2, [r5, #12]
   146b2:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   146b4:	68ea      	ldr	r2, [r5, #12]
   146b6:	7853      	ldrb	r3, [r2, #1]
   146b8:	f043 0301 	orr.w	r3, r3, #1
   146bc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   146be:	3408      	adds	r4, #8
   146c0:	1c73      	adds	r3, r6, #1
   146c2:	4a0b      	ldr	r2, [pc, #44]	; (146f0 <z_sys_init_run_level+0x50>)
   146c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c8:	42a3      	cmp	r3, r4
   146ca:	d910      	bls.n	146ee <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   146cc:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   146ce:	b15d      	cbz	r5, 146e8 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   146d0:	6823      	ldr	r3, [r4, #0]
   146d2:	4628      	mov	r0, r5
   146d4:	4798      	blx	r3
			if (rc != 0) {
   146d6:	4603      	mov	r3, r0
   146d8:	2800      	cmp	r0, #0
   146da:	d0eb      	beq.n	146b4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   146dc:	2800      	cmp	r0, #0
   146de:	dbe5      	blt.n	146ac <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   146e0:	2bff      	cmp	r3, #255	; 0xff
   146e2:	dde5      	ble.n	146b0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   146e4:	23ff      	movs	r3, #255	; 0xff
   146e6:	e7e3      	b.n	146b0 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   146e8:	6823      	ldr	r3, [r4, #0]
   146ea:	4798      	blx	r3
   146ec:	e7e7      	b.n	146be <z_sys_init_run_level+0x1e>
		}
	}
}
   146ee:	bd70      	pop	{r4, r5, r6, pc}
   146f0:	00018c20 	.word	0x00018c20

000146f4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   146f4:	b510      	push	{r4, lr}
   146f6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   146f8:	23b8      	movs	r3, #184	; 0xb8
   146fa:	4c10      	ldr	r4, [pc, #64]	; (1473c <init_idle_thread+0x48>)
   146fc:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   14700:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14704:	4b0e      	ldr	r3, [pc, #56]	; (14740 <init_idle_thread+0x4c>)
   14706:	eb03 038c 	add.w	r3, r3, ip, lsl #2
	z_setup_new_thread(thread, stack,
   1470a:	4a0e      	ldr	r2, [pc, #56]	; (14744 <init_idle_thread+0x50>)
   1470c:	9205      	str	r2, [sp, #20]
   1470e:	2201      	movs	r2, #1
   14710:	9204      	str	r2, [sp, #16]
   14712:	220f      	movs	r2, #15
   14714:	9203      	str	r2, [sp, #12]
   14716:	2200      	movs	r2, #0
   14718:	9202      	str	r2, [sp, #8]
   1471a:	9201      	str	r2, [sp, #4]
   1471c:	9300      	str	r3, [sp, #0]
   1471e:	4b0a      	ldr	r3, [pc, #40]	; (14748 <init_idle_thread+0x54>)
   14720:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14724:	4909      	ldr	r1, [pc, #36]	; (1474c <init_idle_thread+0x58>)
   14726:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   1472a:	4620      	mov	r0, r4
   1472c:	f000 f918 	bl	14960 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14730:	7b63      	ldrb	r3, [r4, #13]
   14732:	f023 0304 	bic.w	r3, r3, #4
   14736:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   14738:	b006      	add	sp, #24
   1473a:	bd10      	pop	{r4, pc}
   1473c:	2000c708 	.word	0x2000c708
   14740:	2000cdf4 	.word	0x2000cdf4
   14744:	00018c10 	.word	0x00018c10
   14748:	00014abd 	.word	0x00014abd
   1474c:	2000d658 	.word	0x2000d658

00014750 <bg_thread_main>:
{
   14750:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   14752:	4b0a      	ldr	r3, [pc, #40]	; (1477c <bg_thread_main+0x2c>)
   14754:	2201      	movs	r2, #1
   14756:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   14758:	2003      	movs	r0, #3
   1475a:	f7ff ffa1 	bl	146a0 <z_sys_init_run_level>
	boot_banner();
   1475e:	f000 ffe3 	bl	15728 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   14762:	2004      	movs	r0, #4
   14764:	f7ff ff9c 	bl	146a0 <z_sys_init_run_level>
	z_init_static_threads();
   14768:	f000 f95e 	bl	14a28 <z_init_static_threads>
	(void)main();
   1476c:	f7fb fe5a 	bl	10424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14770:	4a03      	ldr	r2, [pc, #12]	; (14780 <bg_thread_main+0x30>)
   14772:	7b13      	ldrb	r3, [r2, #12]
   14774:	f023 0301 	bic.w	r3, r3, #1
   14778:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1477a:	bd08      	pop	{r3, pc}
   1477c:	2000ce50 	.word	0x2000ce50
   14780:	2000c7c0 	.word	0x2000c7c0

00014784 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   14784:	b508      	push	{r3, lr}
   14786:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14788:	4a01      	ldr	r2, [pc, #4]	; (14790 <switch_to_main_thread+0xc>)
   1478a:	4802      	ldr	r0, [pc, #8]	; (14794 <switch_to_main_thread+0x10>)
   1478c:	f7fc fd34 	bl	111f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14790:	00014751 	.word	0x00014751
   14794:	2000c7c0 	.word	0x2000c7c0

00014798 <z_bss_zero>:
{
   14798:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1479a:	4803      	ldr	r0, [pc, #12]	; (147a8 <z_bss_zero+0x10>)
   1479c:	4a03      	ldr	r2, [pc, #12]	; (147ac <z_bss_zero+0x14>)
   1479e:	1a12      	subs	r2, r2, r0
   147a0:	2100      	movs	r1, #0
   147a2:	f003 fa1f 	bl	17be4 <z_early_memset>
}
   147a6:	bd08      	pop	{r3, pc}
   147a8:	2000c6e8 	.word	0x2000c6e8
   147ac:	2000ce54 	.word	0x2000ce54

000147b0 <z_init_cpu>:
{
   147b0:	b510      	push	{r4, lr}
   147b2:	4604      	mov	r4, r0
	init_idle_thread(id);
   147b4:	f7ff ff9e 	bl	146f4 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   147b8:	23b8      	movs	r3, #184	; 0xb8
   147ba:	490a      	ldr	r1, [pc, #40]	; (147e4 <z_init_cpu+0x34>)
   147bc:	fb03 1104 	mla	r1, r3, r4, r1
   147c0:	4a09      	ldr	r2, [pc, #36]	; (147e8 <z_init_cpu+0x38>)
   147c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   147c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   147ca:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   147cc:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   147ce:	4b07      	ldr	r3, [pc, #28]	; (147ec <z_init_cpu+0x3c>)
   147d0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   147d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   147d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   147dc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   147e0:	6053      	str	r3, [r2, #4]
}
   147e2:	bd10      	pop	{r4, pc}
   147e4:	2000c708 	.word	0x2000c708
   147e8:	2000cdf4 	.word	0x2000cdf4
   147ec:	2000ce58 	.word	0x2000ce58

000147f0 <prepare_multithreading>:
{
   147f0:	b570      	push	{r4, r5, r6, lr}
   147f2:	b086      	sub	sp, #24
	z_sched_init();
   147f4:	f000 fd50 	bl	15298 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   147f8:	4d10      	ldr	r5, [pc, #64]	; (1483c <prepare_multithreading+0x4c>)
   147fa:	4b11      	ldr	r3, [pc, #68]	; (14840 <prepare_multithreading+0x50>)
   147fc:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   147fe:	4b11      	ldr	r3, [pc, #68]	; (14844 <prepare_multithreading+0x54>)
   14800:	9305      	str	r3, [sp, #20]
   14802:	2301      	movs	r3, #1
   14804:	9304      	str	r3, [sp, #16]
   14806:	2400      	movs	r4, #0
   14808:	9403      	str	r4, [sp, #12]
   1480a:	9402      	str	r4, [sp, #8]
   1480c:	9401      	str	r4, [sp, #4]
   1480e:	9400      	str	r4, [sp, #0]
   14810:	4b0d      	ldr	r3, [pc, #52]	; (14848 <prepare_multithreading+0x58>)
   14812:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14816:	490d      	ldr	r1, [pc, #52]	; (1484c <prepare_multithreading+0x5c>)
   14818:	4628      	mov	r0, r5
   1481a:	f000 f8a1 	bl	14960 <z_setup_new_thread>
   1481e:	4606      	mov	r6, r0
   14820:	7b6b      	ldrb	r3, [r5, #13]
   14822:	f023 0304 	bic.w	r3, r3, #4
   14826:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   14828:	4628      	mov	r0, r5
   1482a:	f003 fb18 	bl	17e5e <z_ready_thread>
	z_init_cpu(0);
   1482e:	4620      	mov	r0, r4
   14830:	f7ff ffbe 	bl	147b0 <z_init_cpu>
}
   14834:	4630      	mov	r0, r6
   14836:	b006      	add	sp, #24
   14838:	bd70      	pop	{r4, r5, r6, pc}
   1483a:	bf00      	nop
   1483c:	2000c7c0 	.word	0x2000c7c0
   14840:	2000cdf4 	.word	0x2000cdf4
   14844:	00018c18 	.word	0x00018c18
   14848:	00014751 	.word	0x00014751
   1484c:	2000d798 	.word	0x2000d798

00014850 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   14850:	b500      	push	{lr}
   14852:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   14854:	2000      	movs	r0, #0
   14856:	f7ff ff23 	bl	146a0 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1485a:	4b1e      	ldr	r3, [pc, #120]	; (148d4 <z_cstart+0x84>)
	uint32_t msp =
   1485c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14860:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   14864:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14868:	4c1b      	ldr	r4, [pc, #108]	; (148d8 <z_cstart+0x88>)
   1486a:	23e0      	movs	r3, #224	; 0xe0
   1486c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   14870:	2500      	movs	r5, #0
   14872:	77e5      	strb	r5, [r4, #31]
   14874:	7625      	strb	r5, [r4, #24]
   14876:	7665      	strb	r5, [r4, #25]
   14878:	76a5      	strb	r5, [r4, #26]
   1487a:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1487e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14880:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14884:	6263      	str	r3, [r4, #36]	; 0x24
   14886:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1488a:	f7fc fe67 	bl	1155c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1488e:	f7fc fbbf 	bl	11010 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14896:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14898:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1489a:	f7fd f895 	bl	119c8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1489e:	f7fc ff2b 	bl	116f8 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   148a2:	2401      	movs	r4, #1
   148a4:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   148a8:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   148ac:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   148ae:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   148b0:	4668      	mov	r0, sp
   148b2:	f000 ff33 	bl	1571c <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   148b6:	4b09      	ldr	r3, [pc, #36]	; (148dc <z_cstart+0x8c>)
   148b8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   148bc:	f7ff fede 	bl	1467c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   148c0:	4620      	mov	r0, r4
   148c2:	f7ff feed 	bl	146a0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   148c6:	2002      	movs	r0, #2
   148c8:	f7ff feea 	bl	146a0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   148cc:	f7ff ff90 	bl	147f0 <prepare_multithreading>
   148d0:	f7ff ff58 	bl	14784 <switch_to_main_thread>
   148d4:	2000ce58 	.word	0x2000ce58
   148d8:	e000ed00 	.word	0xe000ed00
   148dc:	2000cdf4 	.word	0x2000cdf4

000148e0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   148e0:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   148e2:	4c06      	ldr	r4, [pc, #24]	; (148fc <statics_init+0x1c>)
   148e4:	e005      	b.n	148f2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   148e6:	68a2      	ldr	r2, [r4, #8]
   148e8:	6861      	ldr	r1, [r4, #4]
   148ea:	4620      	mov	r0, r4
   148ec:	f003 f982 	bl	17bf4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   148f0:	3414      	adds	r4, #20
   148f2:	4b03      	ldr	r3, [pc, #12]	; (14900 <statics_init+0x20>)
   148f4:	429c      	cmp	r4, r3
   148f6:	d3f6      	bcc.n	148e6 <statics_init+0x6>
		}
	}
	return 0;
}
   148f8:	2000      	movs	r0, #0
   148fa:	bd10      	pop	{r4, pc}
   148fc:	2000c6a8 	.word	0x2000c6a8
   14900:	2000c6bc 	.word	0x2000c6bc

00014904 <z_thread_monitor_exit>:
	__asm__ volatile(
   14904:	f04f 0320 	mov.w	r3, #32
   14908:	f3ef 8111 	mrs	r1, BASEPRI
   1490c:	f383 8812 	msr	BASEPRI_MAX, r3
   14910:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   14914:	4b0a      	ldr	r3, [pc, #40]	; (14940 <z_thread_monitor_exit+0x3c>)
   14916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14918:	4283      	cmp	r3, r0
   1491a:	d104      	bne.n	14926 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1491c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1491e:	4b08      	ldr	r3, [pc, #32]	; (14940 <z_thread_monitor_exit+0x3c>)
   14920:	625a      	str	r2, [r3, #36]	; 0x24
   14922:	e007      	b.n	14934 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   14924:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   14926:	b113      	cbz	r3, 1492e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   14928:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   1492a:	4282      	cmp	r2, r0
   1492c:	d1fa      	bne.n	14924 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1492e:	b10b      	cbz	r3, 14934 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   14930:	6f02      	ldr	r2, [r0, #112]	; 0x70
   14932:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   14934:	f381 8811 	msr	BASEPRI, r1
   14938:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1493c:	4770      	bx	lr
   1493e:	bf00      	nop
   14940:	2000cdf4 	.word	0x2000cdf4

00014944 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   14944:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14946:	ea53 0102 	orrs.w	r1, r3, r2
   1494a:	d102      	bne.n	14952 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   1494c:	f003 f9ea 	bl	17d24 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   14950:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14952:	4902      	ldr	r1, [pc, #8]	; (1495c <schedule_new_thread+0x18>)
   14954:	3018      	adds	r0, #24
   14956:	f000 fddd 	bl	15514 <z_add_timeout>
   1495a:	e7f9      	b.n	14950 <schedule_new_thread+0xc>
   1495c:	00017eeb 	.word	0x00017eeb

00014960 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   14960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14964:	b085      	sub	sp, #20
   14966:	4604      	mov	r4, r0
   14968:	460f      	mov	r7, r1
   1496a:	4615      	mov	r5, r2
   1496c:	461e      	mov	r6, r3
   1496e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   14972:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   14976:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1497a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1497e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   14982:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   14984:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   14986:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14988:	2204      	movs	r2, #4
   1498a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1498c:	f003 f9ce 	bl	17d2c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   14990:	462a      	mov	r2, r5
   14992:	4639      	mov	r1, r7
   14994:	4620      	mov	r0, r4
   14996:	f003 f9b3 	bl	17d00 <setup_thread_stack>
   1499a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1499c:	f8cd 8008 	str.w	r8, [sp, #8]
   149a0:	f8cd 9004 	str.w	r9, [sp, #4]
   149a4:	f8cd a000 	str.w	sl, [sp]
   149a8:	4633      	mov	r3, r6
   149aa:	4602      	mov	r2, r0
   149ac:	4639      	mov	r1, r7
   149ae:	4620      	mov	r0, r4
   149b0:	f7fc fbfc 	bl	111ac <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   149b4:	2300      	movs	r3, #0
   149b6:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   149b8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   149ba:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   149be:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   149c2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   149c6:	f04f 0320 	mov.w	r3, #32
   149ca:	f3ef 8211 	mrs	r2, BASEPRI
   149ce:	f383 8812 	msr	BASEPRI_MAX, r3
   149d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   149d6:	4b13      	ldr	r3, [pc, #76]	; (14a24 <z_setup_new_thread+0xc4>)
   149d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   149da:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   149dc:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   149de:	f382 8811 	msr	BASEPRI, r2
   149e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   149e6:	f1bb 0f00 	cmp.w	fp, #0
   149ea:	d013      	beq.n	14a14 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   149ec:	221f      	movs	r2, #31
   149ee:	4659      	mov	r1, fp
   149f0:	f104 0074 	add.w	r0, r4, #116	; 0x74
   149f4:	f003 fbbb 	bl	1816e <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   149f8:	2300      	movs	r3, #0
   149fa:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   149fe:	4b09      	ldr	r3, [pc, #36]	; (14a24 <z_setup_new_thread+0xc4>)
   14a00:	689b      	ldr	r3, [r3, #8]
   14a02:	b15b      	cbz	r3, 14a1c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   14a08:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   14a0c:	4628      	mov	r0, r5
   14a0e:	b005      	add	sp, #20
   14a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   14a14:	2300      	movs	r3, #0
   14a16:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   14a1a:	e7f0      	b.n	149fe <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   14a1c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   14a20:	e7f4      	b.n	14a0c <z_setup_new_thread+0xac>
   14a22:	bf00      	nop
   14a24:	2000cdf4 	.word	0x2000cdf4

00014a28 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   14a28:	b530      	push	{r4, r5, lr}
   14a2a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   14a2c:	4c21      	ldr	r4, [pc, #132]	; (14ab4 <z_init_static_threads+0x8c>)
   14a2e:	e014      	b.n	14a5a <z_init_static_threads+0x32>
		z_setup_new_thread(
   14a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a32:	9305      	str	r3, [sp, #20]
   14a34:	6a23      	ldr	r3, [r4, #32]
   14a36:	9304      	str	r3, [sp, #16]
   14a38:	69e3      	ldr	r3, [r4, #28]
   14a3a:	9303      	str	r3, [sp, #12]
   14a3c:	69a3      	ldr	r3, [r4, #24]
   14a3e:	9302      	str	r3, [sp, #8]
   14a40:	6963      	ldr	r3, [r4, #20]
   14a42:	9301      	str	r3, [sp, #4]
   14a44:	6923      	ldr	r3, [r4, #16]
   14a46:	9300      	str	r3, [sp, #0]
   14a48:	68e3      	ldr	r3, [r4, #12]
   14a4a:	68a2      	ldr	r2, [r4, #8]
   14a4c:	6861      	ldr	r1, [r4, #4]
   14a4e:	6820      	ldr	r0, [r4, #0]
   14a50:	f7ff ff86 	bl	14960 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   14a54:	6823      	ldr	r3, [r4, #0]
   14a56:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   14a58:	342c      	adds	r4, #44	; 0x2c
   14a5a:	4b17      	ldr	r3, [pc, #92]	; (14ab8 <z_init_static_threads+0x90>)
   14a5c:	429c      	cmp	r4, r3
   14a5e:	d3e7      	bcc.n	14a30 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   14a60:	f000 f9dc 	bl	14e1c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   14a64:	4c13      	ldr	r4, [pc, #76]	; (14ab4 <z_init_static_threads+0x8c>)
   14a66:	e000      	b.n	14a6a <z_init_static_threads+0x42>
   14a68:	342c      	adds	r4, #44	; 0x2c
   14a6a:	4b13      	ldr	r3, [pc, #76]	; (14ab8 <z_init_static_threads+0x90>)
   14a6c:	429c      	cmp	r4, r3
   14a6e:	d21c      	bcs.n	14aaa <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14a70:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14a72:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14a76:	d0f7      	beq.n	14a68 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   14a78:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   14a7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   14a7e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   14a80:	03c9      	lsls	r1, r1, #15
   14a82:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   14a86:	03c0      	lsls	r0, r0, #15
   14a88:	f240 33e7 	movw	r3, #999	; 0x3e7
   14a8c:	18c0      	adds	r0, r0, r3
   14a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a92:	f04f 0300 	mov.w	r3, #0
   14a96:	f141 0100 	adc.w	r1, r1, #0
   14a9a:	f7fb fb53 	bl	10144 <__aeabi_uldivmod>
   14a9e:	4602      	mov	r2, r0
   14aa0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   14aa2:	4628      	mov	r0, r5
   14aa4:	f7ff ff4e 	bl	14944 <schedule_new_thread>
   14aa8:	e7de      	b.n	14a68 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   14aaa:	f000 fba3 	bl	151f4 <k_sched_unlock>
}
   14aae:	b007      	add	sp, #28
   14ab0:	bd30      	pop	{r4, r5, pc}
   14ab2:	bf00      	nop
   14ab4:	0001873c 	.word	0x0001873c
   14ab8:	0001873c 	.word	0x0001873c

00014abc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   14abc:	b508      	push	{r3, lr}
   14abe:	e001      	b.n	14ac4 <idle+0x8>
	arch_cpu_idle();
   14ac0:	f7fc faac 	bl	1101c <arch_cpu_idle>
	__asm__ volatile(
   14ac4:	f04f 0220 	mov.w	r2, #32
   14ac8:	f3ef 8311 	mrs	r3, BASEPRI
   14acc:	f382 8812 	msr	BASEPRI_MAX, r2
   14ad0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   14ad4:	f003 fae3 	bl	1809e <z_get_next_timeout_expiry>
   14ad8:	4b05      	ldr	r3, [pc, #20]	; (14af0 <idle+0x34>)
   14ada:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   14adc:	4b05      	ldr	r3, [pc, #20]	; (14af4 <idle+0x38>)
   14ade:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14ae0:	2b00      	cmp	r3, #0
   14ae2:	d0ed      	beq.n	14ac0 <idle+0x4>
   14ae4:	f7fc f9be 	bl	10e64 <pm_system_suspend>
   14ae8:	2800      	cmp	r0, #0
   14aea:	d1eb      	bne.n	14ac4 <idle+0x8>
   14aec:	e7e8      	b.n	14ac0 <idle+0x4>
   14aee:	bf00      	nop
   14af0:	2000cdf4 	.word	0x2000cdf4
   14af4:	2000ce50 	.word	0x2000ce50

00014af8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14afc:	b082      	sub	sp, #8
   14afe:	4604      	mov	r4, r0
   14b00:	461e      	mov	r6, r3
   14b02:	f04f 0320 	mov.w	r3, #32
   14b06:	f3ef 8511 	mrs	r5, BASEPRI
   14b0a:	f383 8812 	msr	BASEPRI_MAX, r3
   14b0e:	f3bf 8f6f 	isb	sy
   14b12:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14b14:	68c1      	ldr	r1, [r0, #12]
   14b16:	b999      	cbnz	r1, 14b40 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   14b18:	2900      	cmp	r1, #0
   14b1a:	d151      	bne.n	14bc0 <z_impl_k_mutex_lock+0xc8>
   14b1c:	4a36      	ldr	r2, [pc, #216]	; (14bf8 <z_impl_k_mutex_lock+0x100>)
   14b1e:	6892      	ldr	r2, [r2, #8]
   14b20:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14b24:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   14b26:	3101      	adds	r1, #1
   14b28:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   14b2a:	4a33      	ldr	r2, [pc, #204]	; (14bf8 <z_impl_k_mutex_lock+0x100>)
   14b2c:	6892      	ldr	r2, [r2, #8]
   14b2e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   14b30:	f383 8811 	msr	BASEPRI, r3
   14b34:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   14b38:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   14b3a:	b002      	add	sp, #8
   14b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b40:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14b42:	6880      	ldr	r0, [r0, #8]
   14b44:	4a2c      	ldr	r2, [pc, #176]	; (14bf8 <z_impl_k_mutex_lock+0x100>)
   14b46:	6892      	ldr	r2, [r2, #8]
   14b48:	4290      	cmp	r0, r2
   14b4a:	d0e5      	beq.n	14b18 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   14b4c:	ea56 0107 	orrs.w	r1, r6, r7
   14b50:	d038      	beq.n	14bc4 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   14b52:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   14b56:	4641      	mov	r1, r8
   14b58:	f992 000e 	ldrsb.w	r0, [r2, #14]
   14b5c:	f003 f8f7 	bl	17d4e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14b60:	4580      	cmp	r8, r0
   14b62:	dc36      	bgt.n	14bd2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   14b64:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14b68:	9700      	str	r7, [sp, #0]
   14b6a:	9601      	str	r6, [sp, #4]
   14b6c:	4622      	mov	r2, r4
   14b6e:	4629      	mov	r1, r5
   14b70:	4822      	ldr	r0, [pc, #136]	; (14bfc <z_impl_k_mutex_lock+0x104>)
   14b72:	f000 fa8b 	bl	1508c <z_pend_curr>
	if (got_mutex == 0) {
   14b76:	2800      	cmp	r0, #0
   14b78:	d0df      	beq.n	14b3a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   14b7a:	f04f 0320 	mov.w	r3, #32
   14b7e:	f3ef 8511 	mrs	r5, BASEPRI
   14b82:	f383 8812 	msr	BASEPRI_MAX, r3
   14b86:	f3bf 8f6f 	isb	sy
   14b8a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   14b8c:	68a3      	ldr	r3, [r4, #8]
   14b8e:	b343      	cbz	r3, 14be2 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14b90:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b92:	429c      	cmp	r4, r3
   14b94:	d023      	beq.n	14bde <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14b96:	b313      	cbz	r3, 14bde <z_impl_k_mutex_lock+0xe6>
   14b98:	6921      	ldr	r1, [r4, #16]
   14b9a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   14b9e:	f003 f8d6 	bl	17d4e <new_prio_for_inheritance>
   14ba2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   14ba4:	4620      	mov	r0, r4
   14ba6:	f003 f8dd 	bl	17d64 <adjust_owner_prio>
   14baa:	b9e8      	cbnz	r0, 14be8 <z_impl_k_mutex_lock+0xf0>
   14bac:	f1b8 0f00 	cmp.w	r8, #0
   14bb0:	d11a      	bne.n	14be8 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   14bb2:	f386 8811 	msr	BASEPRI, r6
   14bb6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   14bba:	f06f 000a 	mvn.w	r0, #10
   14bbe:	e7bc      	b.n	14b3a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   14bc0:	6922      	ldr	r2, [r4, #16]
   14bc2:	e7af      	b.n	14b24 <z_impl_k_mutex_lock+0x2c>
   14bc4:	f385 8811 	msr	BASEPRI, r5
   14bc8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   14bcc:	f06f 000f 	mvn.w	r0, #15
   14bd0:	e7b3      	b.n	14b3a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   14bd2:	4601      	mov	r1, r0
   14bd4:	4620      	mov	r0, r4
   14bd6:	f003 f8c5 	bl	17d64 <adjust_owner_prio>
   14bda:	4680      	mov	r8, r0
   14bdc:	e7c4      	b.n	14b68 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14bde:	6921      	ldr	r1, [r4, #16]
   14be0:	e7e0      	b.n	14ba4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   14be2:	f1b8 0f00 	cmp.w	r8, #0
   14be6:	d0e4      	beq.n	14bb2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   14be8:	4629      	mov	r1, r5
   14bea:	4804      	ldr	r0, [pc, #16]	; (14bfc <z_impl_k_mutex_lock+0x104>)
   14bec:	f000 f900 	bl	14df0 <z_reschedule>
	return -EAGAIN;
   14bf0:	f06f 000a 	mvn.w	r0, #10
   14bf4:	e7a1      	b.n	14b3a <z_impl_k_mutex_lock+0x42>
   14bf6:	bf00      	nop
   14bf8:	2000cdf4 	.word	0x2000cdf4
   14bfc:	2000ce1c 	.word	0x2000ce1c

00014c00 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   14c00:	6883      	ldr	r3, [r0, #8]
   14c02:	b38b      	cbz	r3, 14c68 <z_impl_k_mutex_unlock+0x68>
{
   14c04:	b570      	push	{r4, r5, r6, lr}
   14c06:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   14c08:	4a1a      	ldr	r2, [pc, #104]	; (14c74 <z_impl_k_mutex_unlock+0x74>)
   14c0a:	6892      	ldr	r2, [r2, #8]
   14c0c:	4293      	cmp	r3, r2
   14c0e:	d12e      	bne.n	14c6e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   14c10:	68c3      	ldr	r3, [r0, #12]
   14c12:	2b01      	cmp	r3, #1
   14c14:	d903      	bls.n	14c1e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   14c16:	3b01      	subs	r3, #1
   14c18:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   14c1a:	2000      	movs	r0, #0
}
   14c1c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   14c1e:	f04f 0320 	mov.w	r3, #32
   14c22:	f3ef 8511 	mrs	r5, BASEPRI
   14c26:	f383 8812 	msr	BASEPRI_MAX, r3
   14c2a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14c2e:	6901      	ldr	r1, [r0, #16]
   14c30:	f003 f898 	bl	17d64 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14c34:	4620      	mov	r0, r4
   14c36:	f003 f9aa 	bl	17f8e <z_unpend_first_thread>
	mutex->owner = new_owner;
   14c3a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   14c3c:	b168      	cbz	r0, 14c5a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   14c3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14c42:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14c44:	2400      	movs	r4, #0
   14c46:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   14c4a:	f003 f908 	bl	17e5e <z_ready_thread>
		z_reschedule(&lock, key);
   14c4e:	4629      	mov	r1, r5
   14c50:	4809      	ldr	r0, [pc, #36]	; (14c78 <z_impl_k_mutex_unlock+0x78>)
   14c52:	f000 f8cd 	bl	14df0 <z_reschedule>
	return 0;
   14c56:	4620      	mov	r0, r4
   14c58:	e7e0      	b.n	14c1c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   14c5a:	2000      	movs	r0, #0
   14c5c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14c5e:	f385 8811 	msr	BASEPRI, r5
   14c62:	f3bf 8f6f 	isb	sy
   14c66:	e7d9      	b.n	14c1c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   14c68:	f06f 0015 	mvn.w	r0, #21
}
   14c6c:	4770      	bx	lr
		return -EPERM;
   14c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c72:	e7d3      	b.n	14c1c <z_impl_k_mutex_unlock+0x1c>
   14c74:	2000cdf4 	.word	0x2000cdf4
   14c78:	2000ce1c 	.word	0x2000ce1c

00014c7c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   14c7c:	b538      	push	{r3, r4, r5, lr}
   14c7e:	4604      	mov	r4, r0
	__asm__ volatile(
   14c80:	f04f 0320 	mov.w	r3, #32
   14c84:	f3ef 8511 	mrs	r5, BASEPRI
   14c88:	f383 8812 	msr	BASEPRI_MAX, r3
   14c8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   14c90:	f003 f97d 	bl	17f8e <z_unpend_first_thread>

	if (thread != NULL) {
   14c94:	b148      	cbz	r0, 14caa <z_impl_k_sem_give+0x2e>
   14c96:	2200      	movs	r2, #0
   14c98:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14c9c:	f003 f8df 	bl	17e5e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14ca0:	4629      	mov	r1, r5
   14ca2:	4807      	ldr	r0, [pc, #28]	; (14cc0 <z_impl_k_sem_give+0x44>)
   14ca4:	f000 f8a4 	bl	14df0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   14ca8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14caa:	68a3      	ldr	r3, [r4, #8]
   14cac:	68e2      	ldr	r2, [r4, #12]
   14cae:	4293      	cmp	r3, r2
   14cb0:	d003      	beq.n	14cba <z_impl_k_sem_give+0x3e>
   14cb2:	2201      	movs	r2, #1
   14cb4:	4413      	add	r3, r2
   14cb6:	60a3      	str	r3, [r4, #8]
}
   14cb8:	e7f2      	b.n	14ca0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14cba:	2200      	movs	r2, #0
   14cbc:	e7fa      	b.n	14cb4 <z_impl_k_sem_give+0x38>
   14cbe:	bf00      	nop
   14cc0:	2000ce1c 	.word	0x2000ce1c

00014cc4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14cc4:	b510      	push	{r4, lr}
   14cc6:	b082      	sub	sp, #8
   14cc8:	f04f 0420 	mov.w	r4, #32
   14ccc:	f3ef 8111 	mrs	r1, BASEPRI
   14cd0:	f384 8812 	msr	BASEPRI_MAX, r4
   14cd4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   14cd8:	6884      	ldr	r4, [r0, #8]
   14cda:	b144      	cbz	r4, 14cee <z_impl_k_sem_take+0x2a>
		sem->count--;
   14cdc:	3c01      	subs	r4, #1
   14cde:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   14ce0:	f381 8811 	msr	BASEPRI, r1
   14ce4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   14ce8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   14cea:	b002      	add	sp, #8
   14cec:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14cee:	ea53 0402 	orrs.w	r4, r3, r2
   14cf2:	d006      	beq.n	14d02 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14cf4:	9200      	str	r2, [sp, #0]
   14cf6:	9301      	str	r3, [sp, #4]
   14cf8:	4602      	mov	r2, r0
   14cfa:	4805      	ldr	r0, [pc, #20]	; (14d10 <z_impl_k_sem_take+0x4c>)
   14cfc:	f000 f9c6 	bl	1508c <z_pend_curr>
	return ret;
   14d00:	e7f3      	b.n	14cea <z_impl_k_sem_take+0x26>
   14d02:	f381 8811 	msr	BASEPRI, r1
   14d06:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   14d0a:	f06f 000f 	mvn.w	r0, #15
   14d0e:	e7ec      	b.n	14cea <z_impl_k_sem_take+0x26>
   14d10:	2000ce1c 	.word	0x2000ce1c

00014d14 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14d14:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   14d16:	2b7f      	cmp	r3, #127	; 0x7f
   14d18:	d811      	bhi.n	14d3e <sliceable+0x2a>
	int ret = slice_ticks;
   14d1a:	4b0e      	ldr	r3, [pc, #56]	; (14d54 <sliceable+0x40>)
   14d1c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   14d1e:	b17b      	cbz	r3, 14d40 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14d20:	f990 200e 	ldrsb.w	r2, [r0, #14]
   14d24:	4b0c      	ldr	r3, [pc, #48]	; (14d58 <sliceable+0x44>)
   14d26:	681b      	ldr	r3, [r3, #0]
   14d28:	429a      	cmp	r2, r3
   14d2a:	db0c      	blt.n	14d46 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   14d2c:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   14d2e:	f013 0f1f 	tst.w	r3, #31
   14d32:	d10a      	bne.n	14d4a <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   14d34:	4b09      	ldr	r3, [pc, #36]	; (14d5c <sliceable+0x48>)
   14d36:	4298      	cmp	r0, r3
   14d38:	d009      	beq.n	14d4e <sliceable+0x3a>
   14d3a:	2301      	movs	r3, #1
   14d3c:	e000      	b.n	14d40 <sliceable+0x2c>
   14d3e:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   14d40:	f003 0001 	and.w	r0, r3, #1
   14d44:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   14d46:	2300      	movs	r3, #0
   14d48:	e7fa      	b.n	14d40 <sliceable+0x2c>
   14d4a:	2300      	movs	r3, #0
   14d4c:	e7f8      	b.n	14d40 <sliceable+0x2c>
   14d4e:	2300      	movs	r3, #0
   14d50:	e7f6      	b.n	14d40 <sliceable+0x2c>
   14d52:	bf00      	nop
   14d54:	2000ce28 	.word	0x2000ce28
   14d58:	2000ce24 	.word	0x2000ce24
   14d5c:	2000c708 	.word	0x2000c708

00014d60 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   14d60:	4b04      	ldr	r3, [pc, #16]	; (14d74 <slice_timeout+0x14>)
   14d62:	1ac0      	subs	r0, r0, r3
   14d64:	10c0      	asrs	r0, r0, #3
   14d66:	4b04      	ldr	r3, [pc, #16]	; (14d78 <slice_timeout+0x18>)
   14d68:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   14d6c:	4b03      	ldr	r3, [pc, #12]	; (14d7c <slice_timeout+0x1c>)
   14d6e:	2201      	movs	r2, #1
   14d70:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   14d72:	4770      	bx	lr
   14d74:	2000c878 	.word	0x2000c878
   14d78:	aaaaaaab 	.word	0xaaaaaaab
   14d7c:	2000ce20 	.word	0x2000ce20

00014d80 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14d84:	bf08      	it	eq
   14d86:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   14d8a:	d100      	bne.n	14d8e <add_thread_timeout+0xe>
   14d8c:	4770      	bx	lr
{
   14d8e:	b508      	push	{r3, lr}
   14d90:	4902      	ldr	r1, [pc, #8]	; (14d9c <add_thread_timeout+0x1c>)
   14d92:	3018      	adds	r0, #24
   14d94:	f000 fbbe 	bl	15514 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   14d98:	bd08      	pop	{r3, pc}
   14d9a:	bf00      	nop
   14d9c:	00017eeb 	.word	0x00017eeb

00014da0 <z_reset_time_slice>:
{
   14da0:	b570      	push	{r4, r5, r6, lr}
   14da2:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   14da4:	4b0d      	ldr	r3, [pc, #52]	; (14ddc <z_reset_time_slice+0x3c>)
   14da6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   14da8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   14dac:	4c0c      	ldr	r4, [pc, #48]	; (14de0 <z_reset_time_slice+0x40>)
   14dae:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   14db2:	4620      	mov	r0, r4
   14db4:	f003 f955 	bl	18062 <z_abort_timeout>
	slice_expired[cpu] = false;
   14db8:	4b0a      	ldr	r3, [pc, #40]	; (14de4 <z_reset_time_slice+0x44>)
   14dba:	2200      	movs	r2, #0
   14dbc:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   14dbe:	4628      	mov	r0, r5
   14dc0:	f7ff ffa8 	bl	14d14 <sliceable>
   14dc4:	b900      	cbnz	r0, 14dc8 <z_reset_time_slice+0x28>
}
   14dc6:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   14dc8:	4b07      	ldr	r3, [pc, #28]	; (14de8 <z_reset_time_slice+0x48>)
   14dca:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   14dcc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   14dce:	17d3      	asrs	r3, r2, #31
   14dd0:	4906      	ldr	r1, [pc, #24]	; (14dec <z_reset_time_slice+0x4c>)
   14dd2:	4620      	mov	r0, r4
   14dd4:	f000 fb9e 	bl	15514 <z_add_timeout>
}
   14dd8:	e7f5      	b.n	14dc6 <z_reset_time_slice+0x26>
   14dda:	bf00      	nop
   14ddc:	2000cdf4 	.word	0x2000cdf4
   14de0:	2000c878 	.word	0x2000c878
   14de4:	2000ce20 	.word	0x2000ce20
   14de8:	2000ce28 	.word	0x2000ce28
   14dec:	00014d61 	.word	0x00014d61

00014df0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   14df0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   14df2:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14df4:	b959      	cbnz	r1, 14e0e <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14df6:	f3ef 8205 	mrs	r2, IPSR
   14dfa:	b942      	cbnz	r2, 14e0e <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   14dfc:	4a06      	ldr	r2, [pc, #24]	; (14e18 <z_reschedule+0x28>)
   14dfe:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   14e00:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   14e02:	4290      	cmp	r0, r2
   14e04:	d003      	beq.n	14e0e <z_reschedule+0x1e>
	ret = arch_swap(key);
   14e06:	4608      	mov	r0, r1
   14e08:	f7fc f972 	bl	110f0 <arch_swap>
		z_swap(lock, key);
   14e0c:	e003      	b.n	14e16 <z_reschedule+0x26>
   14e0e:	f383 8811 	msr	BASEPRI, r3
   14e12:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   14e16:	bd08      	pop	{r3, pc}
   14e18:	2000cdf4 	.word	0x2000cdf4

00014e1c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   14e1c:	2300      	movs	r3, #0
	__asm__ volatile(
   14e1e:	f04f 0220 	mov.w	r2, #32
   14e22:	f3ef 8111 	mrs	r1, BASEPRI
   14e26:	f382 8812 	msr	BASEPRI_MAX, r2
   14e2a:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   14e2e:	e009      	b.n	14e44 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   14e30:	4b06      	ldr	r3, [pc, #24]	; (14e4c <k_sched_lock+0x30>)
   14e32:	689a      	ldr	r2, [r3, #8]
   14e34:	7bd3      	ldrb	r3, [r2, #15]
   14e36:	3b01      	subs	r3, #1
   14e38:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   14e3a:	f381 8811 	msr	BASEPRI, r1
   14e3e:	f3bf 8f6f 	isb	sy
   14e42:	2301      	movs	r3, #1
   14e44:	2b00      	cmp	r3, #0
   14e46:	d0f3      	beq.n	14e30 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   14e48:	4770      	bx	lr
   14e4a:	bf00      	nop
   14e4c:	2000cdf4 	.word	0x2000cdf4

00014e50 <update_cache>:
{
   14e50:	b538      	push	{r3, r4, r5, lr}
   14e52:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   14e54:	4810      	ldr	r0, [pc, #64]	; (14e98 <update_cache+0x48>)
   14e56:	f002 fffb 	bl	17e50 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14e5a:	4605      	mov	r5, r0
   14e5c:	b170      	cbz	r0, 14e7c <update_cache+0x2c>
	if (preempt_ok != 0) {
   14e5e:	b984      	cbnz	r4, 14e82 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   14e60:	4b0e      	ldr	r3, [pc, #56]	; (14e9c <update_cache+0x4c>)
   14e62:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   14e64:	7b5a      	ldrb	r2, [r3, #13]
   14e66:	f012 0f1f 	tst.w	r2, #31
   14e6a:	d10a      	bne.n	14e82 <update_cache+0x32>
	return node->next != NULL;
   14e6c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14e6e:	b942      	cbnz	r2, 14e82 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14e70:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   14e72:	2a7f      	cmp	r2, #127	; 0x7f
   14e74:	d905      	bls.n	14e82 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   14e76:	4a09      	ldr	r2, [pc, #36]	; (14e9c <update_cache+0x4c>)
   14e78:	6193      	str	r3, [r2, #24]
   14e7a:	e00b      	b.n	14e94 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14e7c:	4b07      	ldr	r3, [pc, #28]	; (14e9c <update_cache+0x4c>)
   14e7e:	68dd      	ldr	r5, [r3, #12]
   14e80:	e7ed      	b.n	14e5e <update_cache+0xe>
		if (thread != _current) {
   14e82:	4b06      	ldr	r3, [pc, #24]	; (14e9c <update_cache+0x4c>)
   14e84:	689b      	ldr	r3, [r3, #8]
   14e86:	42ab      	cmp	r3, r5
   14e88:	d002      	beq.n	14e90 <update_cache+0x40>
			z_reset_time_slice(thread);
   14e8a:	4628      	mov	r0, r5
   14e8c:	f7ff ff88 	bl	14da0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   14e90:	4b02      	ldr	r3, [pc, #8]	; (14e9c <update_cache+0x4c>)
   14e92:	619d      	str	r5, [r3, #24]
}
   14e94:	bd38      	pop	{r3, r4, r5, pc}
   14e96:	bf00      	nop
   14e98:	2000ce10 	.word	0x2000ce10
   14e9c:	2000cdf4 	.word	0x2000cdf4

00014ea0 <move_thread_to_end_of_prio_q>:
{
   14ea0:	b538      	push	{r3, r4, r5, lr}
   14ea2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   14ea4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   14ea6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	db0a      	blt.n	14ec4 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   14eae:	7b6b      	ldrb	r3, [r5, #13]
   14eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14eb4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   14eb6:	4b1b      	ldr	r3, [pc, #108]	; (14f24 <move_thread_to_end_of_prio_q+0x84>)
   14eb8:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ebc:	429c      	cmp	r4, r3
   14ebe:	d110      	bne.n	14ee2 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ec0:	2400      	movs	r4, #0
   14ec2:	e00e      	b.n	14ee2 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   14ec8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14eca:	4601      	mov	r1, r0
   14ecc:	4816      	ldr	r0, [pc, #88]	; (14f28 <move_thread_to_end_of_prio_q+0x88>)
   14ece:	f002 ff8b 	bl	17de8 <z_priq_dumb_remove>
}
   14ed2:	e7ec      	b.n	14eae <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   14ed4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   14ed6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14ed8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   14eda:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14edc:	6065      	str	r5, [r4, #4]
}
   14ede:	e017      	b.n	14f10 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ee0:	2400      	movs	r4, #0
   14ee2:	b16c      	cbz	r4, 14f00 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14ee4:	4621      	mov	r1, r4
   14ee6:	4628      	mov	r0, r5
   14ee8:	f002 ff5a 	bl	17da0 <z_sched_prio_cmp>
   14eec:	2800      	cmp	r0, #0
   14eee:	dcf1      	bgt.n	14ed4 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14ef0:	2c00      	cmp	r4, #0
   14ef2:	d0f6      	beq.n	14ee2 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   14ef4:	4b0b      	ldr	r3, [pc, #44]	; (14f24 <move_thread_to_end_of_prio_q+0x84>)
   14ef6:	6a1b      	ldr	r3, [r3, #32]
   14ef8:	429c      	cmp	r4, r3
   14efa:	d0f1      	beq.n	14ee0 <move_thread_to_end_of_prio_q+0x40>
   14efc:	6824      	ldr	r4, [r4, #0]
   14efe:	e7f0      	b.n	14ee2 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   14f00:	4b08      	ldr	r3, [pc, #32]	; (14f24 <move_thread_to_end_of_prio_q+0x84>)
   14f02:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14f04:	f103 011c 	add.w	r1, r3, #28
   14f08:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   14f0a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   14f0c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14f0e:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   14f10:	4b04      	ldr	r3, [pc, #16]	; (14f24 <move_thread_to_end_of_prio_q+0x84>)
   14f12:	6898      	ldr	r0, [r3, #8]
   14f14:	42a8      	cmp	r0, r5
   14f16:	bf14      	ite	ne
   14f18:	2000      	movne	r0, #0
   14f1a:	2001      	moveq	r0, #1
   14f1c:	f7ff ff98 	bl	14e50 <update_cache>
}
   14f20:	bd38      	pop	{r3, r4, r5, pc}
   14f22:	bf00      	nop
   14f24:	2000cdf4 	.word	0x2000cdf4
   14f28:	2000ce10 	.word	0x2000ce10

00014f2c <z_time_slice>:
{
   14f2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14f2e:	f04f 0220 	mov.w	r2, #32
   14f32:	f3ef 8311 	mrs	r3, BASEPRI
   14f36:	f382 8812 	msr	BASEPRI_MAX, r2
   14f3a:	f3bf 8f6f 	isb	sy
   14f3e:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   14f40:	4b14      	ldr	r3, [pc, #80]	; (14f94 <z_time_slice+0x68>)
   14f42:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   14f44:	4b14      	ldr	r3, [pc, #80]	; (14f98 <z_time_slice+0x6c>)
   14f46:	681b      	ldr	r3, [r3, #0]
   14f48:	42a3      	cmp	r3, r4
   14f4a:	d017      	beq.n	14f7c <z_time_slice+0x50>
	pending_current = NULL;
   14f4c:	4b12      	ldr	r3, [pc, #72]	; (14f98 <z_time_slice+0x6c>)
   14f4e:	2200      	movs	r2, #0
   14f50:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   14f52:	4b10      	ldr	r3, [pc, #64]	; (14f94 <z_time_slice+0x68>)
   14f54:	7c1b      	ldrb	r3, [r3, #16]
   14f56:	4a11      	ldr	r2, [pc, #68]	; (14f9c <z_time_slice+0x70>)
   14f58:	5cd3      	ldrb	r3, [r2, r3]
   14f5a:	b153      	cbz	r3, 14f72 <z_time_slice+0x46>
   14f5c:	4620      	mov	r0, r4
   14f5e:	f7ff fed9 	bl	14d14 <sliceable>
   14f62:	b130      	cbz	r0, 14f72 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   14f64:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   14f66:	f013 0f1f 	tst.w	r3, #31
   14f6a:	d00f      	beq.n	14f8c <z_time_slice+0x60>
		z_reset_time_slice(curr);
   14f6c:	4620      	mov	r0, r4
   14f6e:	f7ff ff17 	bl	14da0 <z_reset_time_slice>
	__asm__ volatile(
   14f72:	f385 8811 	msr	BASEPRI, r5
   14f76:	f3bf 8f6f 	isb	sy
}
   14f7a:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   14f7c:	4620      	mov	r0, r4
   14f7e:	f7ff ff0f 	bl	14da0 <z_reset_time_slice>
   14f82:	f385 8811 	msr	BASEPRI, r5
   14f86:	f3bf 8f6f 	isb	sy
		return;
   14f8a:	e7f6      	b.n	14f7a <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   14f8c:	4620      	mov	r0, r4
   14f8e:	f7ff ff87 	bl	14ea0 <move_thread_to_end_of_prio_q>
   14f92:	e7eb      	b.n	14f6c <z_time_slice+0x40>
   14f94:	2000cdf4 	.word	0x2000cdf4
   14f98:	2000ce1c 	.word	0x2000ce1c
   14f9c:	2000ce20 	.word	0x2000ce20

00014fa0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   14fa0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14fa2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	db33      	blt.n	15012 <ready_thread+0x72>
{
   14faa:	b570      	push	{r4, r5, r6, lr}
   14fac:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14fae:	f012 0f1f 	tst.w	r2, #31
   14fb2:	d101      	bne.n	14fb8 <ready_thread+0x18>
	return node->next != NULL;
   14fb4:	6986      	ldr	r6, [r0, #24]
   14fb6:	b106      	cbz	r6, 14fba <ready_thread+0x1a>
}
   14fb8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   14fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14fbe:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   14fc0:	4b14      	ldr	r3, [pc, #80]	; (15014 <ready_thread+0x74>)
   14fc2:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14fc6:	429d      	cmp	r5, r3
   14fc8:	d108      	bne.n	14fdc <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14fca:	4635      	mov	r5, r6
   14fcc:	e006      	b.n	14fdc <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   14fce:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   14fd0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   14fd2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   14fd4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14fd6:	606c      	str	r4, [r5, #4]
}
   14fd8:	e017      	b.n	1500a <ready_thread+0x6a>
   14fda:	4635      	mov	r5, r6
   14fdc:	b16d      	cbz	r5, 14ffa <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14fde:	4629      	mov	r1, r5
   14fe0:	4620      	mov	r0, r4
   14fe2:	f002 fedd 	bl	17da0 <z_sched_prio_cmp>
   14fe6:	2800      	cmp	r0, #0
   14fe8:	dcf1      	bgt.n	14fce <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14fea:	2d00      	cmp	r5, #0
   14fec:	d0f6      	beq.n	14fdc <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   14fee:	4b09      	ldr	r3, [pc, #36]	; (15014 <ready_thread+0x74>)
   14ff0:	6a1b      	ldr	r3, [r3, #32]
   14ff2:	429d      	cmp	r5, r3
   14ff4:	d0f1      	beq.n	14fda <ready_thread+0x3a>
   14ff6:	682d      	ldr	r5, [r5, #0]
   14ff8:	e7f0      	b.n	14fdc <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   14ffa:	4b06      	ldr	r3, [pc, #24]	; (15014 <ready_thread+0x74>)
   14ffc:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   14ffe:	f103 011c 	add.w	r1, r3, #28
   15002:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   15004:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15006:	6014      	str	r4, [r2, #0]
	list->tail = node;
   15008:	621c      	str	r4, [r3, #32]
		update_cache(0);
   1500a:	2000      	movs	r0, #0
   1500c:	f7ff ff20 	bl	14e50 <update_cache>
}
   15010:	e7d2      	b.n	14fb8 <ready_thread+0x18>
   15012:	4770      	bx	lr
   15014:	2000cdf4 	.word	0x2000cdf4

00015018 <z_sched_start>:
{
   15018:	b510      	push	{r4, lr}
	__asm__ volatile(
   1501a:	f04f 0320 	mov.w	r3, #32
   1501e:	f3ef 8411 	mrs	r4, BASEPRI
   15022:	f383 8812 	msr	BASEPRI_MAX, r3
   15026:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1502a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1502c:	f013 0f04 	tst.w	r3, #4
   15030:	d104      	bne.n	1503c <z_sched_start+0x24>
	__asm__ volatile(
   15032:	f384 8811 	msr	BASEPRI, r4
   15036:	f3bf 8f6f 	isb	sy
}
   1503a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1503c:	f023 0304 	bic.w	r3, r3, #4
   15040:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   15042:	f7ff ffad 	bl	14fa0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15046:	4621      	mov	r1, r4
   15048:	4801      	ldr	r0, [pc, #4]	; (15050 <z_sched_start+0x38>)
   1504a:	f7ff fed1 	bl	14df0 <z_reschedule>
   1504e:	e7f4      	b.n	1503a <z_sched_start+0x22>
   15050:	2000ce2c 	.word	0x2000ce2c

00015054 <unready_thread>:
{
   15054:	b510      	push	{r4, lr}
   15056:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   15058:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1505a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1505e:	2b00      	cmp	r3, #0
   15060:	db08      	blt.n	15074 <unready_thread+0x20>
	update_cache(thread == _current);
   15062:	4b08      	ldr	r3, [pc, #32]	; (15084 <unready_thread+0x30>)
   15064:	6898      	ldr	r0, [r3, #8]
   15066:	42a0      	cmp	r0, r4
   15068:	bf14      	ite	ne
   1506a:	2000      	movne	r0, #0
   1506c:	2001      	moveq	r0, #1
   1506e:	f7ff feef 	bl	14e50 <update_cache>
}
   15072:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15078:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1507a:	4601      	mov	r1, r0
   1507c:	4802      	ldr	r0, [pc, #8]	; (15088 <unready_thread+0x34>)
   1507e:	f002 feb3 	bl	17de8 <z_priq_dumb_remove>
}
   15082:	e7ee      	b.n	15062 <unready_thread+0xe>
   15084:	2000cdf4 	.word	0x2000cdf4
   15088:	2000ce10 	.word	0x2000ce10

0001508c <z_pend_curr>:
{
   1508c:	b510      	push	{r4, lr}
   1508e:	460c      	mov	r4, r1
   15090:	4611      	mov	r1, r2
	pending_current = _current;
   15092:	480a      	ldr	r0, [pc, #40]	; (150bc <z_pend_curr+0x30>)
   15094:	6882      	ldr	r2, [r0, #8]
   15096:	4b0a      	ldr	r3, [pc, #40]	; (150c0 <z_pend_curr+0x34>)
   15098:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   1509a:	f04f 0220 	mov.w	r2, #32
   1509e:	f3ef 8311 	mrs	r3, BASEPRI
   150a2:	f382 8812 	msr	BASEPRI_MAX, r2
   150a6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   150aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   150ae:	6880      	ldr	r0, [r0, #8]
   150b0:	f002 ff61 	bl	17f76 <pend_locked>
   150b4:	4620      	mov	r0, r4
   150b6:	f7fc f81b 	bl	110f0 <arch_swap>
}
   150ba:	bd10      	pop	{r4, pc}
   150bc:	2000cdf4 	.word	0x2000cdf4
   150c0:	2000ce1c 	.word	0x2000ce1c

000150c4 <z_set_prio>:
{
   150c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   150c8:	4605      	mov	r5, r0
   150ca:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   150cc:	2300      	movs	r3, #0
   150ce:	f04f 0220 	mov.w	r2, #32
   150d2:	f3ef 8611 	mrs	r6, BASEPRI
   150d6:	f382 8812 	msr	BASEPRI_MAX, r2
   150da:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   150de:	4618      	mov	r0, r3
   150e0:	e029      	b.n	15136 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   150e2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   150e4:	606b      	str	r3, [r5, #4]
	node->next = successor;
   150e6:	602c      	str	r4, [r5, #0]
	prev->next = node;
   150e8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   150ea:	6065      	str	r5, [r4, #4]
}
   150ec:	e017      	b.n	1511e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   150ee:	4644      	mov	r4, r8
   150f0:	b16c      	cbz	r4, 1510e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   150f2:	4621      	mov	r1, r4
   150f4:	4628      	mov	r0, r5
   150f6:	f002 fe53 	bl	17da0 <z_sched_prio_cmp>
   150fa:	2800      	cmp	r0, #0
   150fc:	dcf1      	bgt.n	150e2 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   150fe:	2c00      	cmp	r4, #0
   15100:	d0f6      	beq.n	150f0 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   15102:	4b1d      	ldr	r3, [pc, #116]	; (15178 <z_set_prio+0xb4>)
   15104:	6a1b      	ldr	r3, [r3, #32]
   15106:	429c      	cmp	r4, r3
   15108:	d0f1      	beq.n	150ee <z_set_prio+0x2a>
   1510a:	6824      	ldr	r4, [r4, #0]
   1510c:	e7f0      	b.n	150f0 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   1510e:	4b1a      	ldr	r3, [pc, #104]	; (15178 <z_set_prio+0xb4>)
   15110:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   15112:	f103 011c 	add.w	r1, r3, #28
   15116:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   15118:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1511a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1511c:	621d      	str	r5, [r3, #32]
			update_cache(1);
   1511e:	2001      	movs	r0, #1
   15120:	f7ff fe96 	bl	14e50 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15124:	2001      	movs	r0, #1
   15126:	e001      	b.n	1512c <z_set_prio+0x68>
			thread->base.prio = prio;
   15128:	73af      	strb	r7, [r5, #14]
   1512a:	2000      	movs	r0, #0
	__asm__ volatile(
   1512c:	f386 8811 	msr	BASEPRI, r6
   15130:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15134:	2301      	movs	r3, #1
   15136:	b9e3      	cbnz	r3, 15172 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   15138:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1513a:	f013 0f1f 	tst.w	r3, #31
   1513e:	d1f3      	bne.n	15128 <z_set_prio+0x64>
	return node->next != NULL;
   15140:	f8d5 8018 	ldr.w	r8, [r5, #24]
   15144:	f1b8 0f00 	cmp.w	r8, #0
   15148:	d1ee      	bne.n	15128 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1514e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15150:	f8df 9028 	ldr.w	r9, [pc, #40]	; 1517c <z_set_prio+0xb8>
   15154:	4629      	mov	r1, r5
   15156:	4648      	mov	r0, r9
   15158:	f002 fe46 	bl	17de8 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1515c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1515e:	7b6b      	ldrb	r3, [r5, #13]
   15160:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15164:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   15166:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1516a:	454c      	cmp	r4, r9
   1516c:	d1c0      	bne.n	150f0 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1516e:	4644      	mov	r4, r8
   15170:	e7be      	b.n	150f0 <z_set_prio+0x2c>
}
   15172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15176:	bf00      	nop
   15178:	2000cdf4 	.word	0x2000cdf4
   1517c:	2000ce10 	.word	0x2000ce10

00015180 <z_impl_k_thread_suspend>:
{
   15180:	b538      	push	{r3, r4, r5, lr}
   15182:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15184:	3018      	adds	r0, #24
   15186:	f002 ff6c 	bl	18062 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1518a:	2300      	movs	r3, #0
	__asm__ volatile(
   1518c:	f04f 0220 	mov.w	r2, #32
   15190:	f3ef 8511 	mrs	r5, BASEPRI
   15194:	f382 8812 	msr	BASEPRI_MAX, r2
   15198:	f3bf 8f6f 	isb	sy
   1519c:	e010      	b.n	151c0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1519e:	7b63      	ldrb	r3, [r4, #13]
   151a0:	f043 0310 	orr.w	r3, r3, #16
   151a4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   151a6:	4b11      	ldr	r3, [pc, #68]	; (151ec <z_impl_k_thread_suspend+0x6c>)
   151a8:	6898      	ldr	r0, [r3, #8]
   151aa:	42a0      	cmp	r0, r4
   151ac:	bf14      	ite	ne
   151ae:	2000      	movne	r0, #0
   151b0:	2001      	moveq	r0, #1
   151b2:	f7ff fe4d 	bl	14e50 <update_cache>
	__asm__ volatile(
   151b6:	f385 8811 	msr	BASEPRI, r5
   151ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   151be:	2301      	movs	r3, #1
   151c0:	b963      	cbnz	r3, 151dc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   151c2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   151c4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   151c8:	2b00      	cmp	r3, #0
   151ca:	dae8      	bge.n	1519e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   151cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   151d0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   151d2:	4621      	mov	r1, r4
   151d4:	4806      	ldr	r0, [pc, #24]	; (151f0 <z_impl_k_thread_suspend+0x70>)
   151d6:	f002 fe07 	bl	17de8 <z_priq_dumb_remove>
}
   151da:	e7e0      	b.n	1519e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   151dc:	4b03      	ldr	r3, [pc, #12]	; (151ec <z_impl_k_thread_suspend+0x6c>)
   151de:	689b      	ldr	r3, [r3, #8]
   151e0:	42a3      	cmp	r3, r4
   151e2:	d000      	beq.n	151e6 <z_impl_k_thread_suspend+0x66>
}
   151e4:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   151e6:	f002 fdf3 	bl	17dd0 <z_reschedule_unlocked>
}
   151ea:	e7fb      	b.n	151e4 <z_impl_k_thread_suspend+0x64>
   151ec:	2000cdf4 	.word	0x2000cdf4
   151f0:	2000ce10 	.word	0x2000ce10

000151f4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   151f4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   151f6:	2300      	movs	r3, #0
	__asm__ volatile(
   151f8:	f04f 0220 	mov.w	r2, #32
   151fc:	f3ef 8411 	mrs	r4, BASEPRI
   15200:	f382 8812 	msr	BASEPRI_MAX, r2
   15204:	f3bf 8f6f 	isb	sy
   15208:	e00c      	b.n	15224 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1520a:	4b09      	ldr	r3, [pc, #36]	; (15230 <k_sched_unlock+0x3c>)
   1520c:	689a      	ldr	r2, [r3, #8]
   1520e:	7bd3      	ldrb	r3, [r2, #15]
   15210:	3301      	adds	r3, #1
   15212:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   15214:	2000      	movs	r0, #0
   15216:	f7ff fe1b 	bl	14e50 <update_cache>
	__asm__ volatile(
   1521a:	f384 8811 	msr	BASEPRI, r4
   1521e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15222:	2301      	movs	r3, #1
   15224:	2b00      	cmp	r3, #0
   15226:	d0f0      	beq.n	1520a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   15228:	f002 fdd2 	bl	17dd0 <z_reschedule_unlocked>
}
   1522c:	bd10      	pop	{r4, pc}
   1522e:	bf00      	nop
   15230:	2000cdf4 	.word	0x2000cdf4

00015234 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   15234:	7b43      	ldrb	r3, [r0, #13]
   15236:	f013 0f08 	tst.w	r3, #8
   1523a:	d12a      	bne.n	15292 <end_thread+0x5e>
{
   1523c:	b510      	push	{r4, lr}
   1523e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   15240:	f043 0208 	orr.w	r2, r3, #8
   15244:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15246:	f023 0220 	bic.w	r2, r3, #32
   1524a:	f042 0208 	orr.w	r2, r2, #8
   1524e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   15250:	f012 0f80 	tst.w	r2, #128	; 0x80
   15254:	d113      	bne.n	1527e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   15256:	68a3      	ldr	r3, [r4, #8]
   15258:	b113      	cbz	r3, 15260 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   1525a:	4620      	mov	r0, r4
   1525c:	f002 fdcc 	bl	17df8 <unpend_thread_no_timeout>
   15260:	f104 0018 	add.w	r0, r4, #24
   15264:	f002 fefd 	bl	18062 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   15268:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1526c:	f002 fe43 	bl	17ef6 <unpend_all>
		update_cache(1);
   15270:	2001      	movs	r0, #1
   15272:	f7ff fded 	bl	14e50 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   15276:	4620      	mov	r0, r4
   15278:	f7ff fb44 	bl	14904 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1527c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1527e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   15282:	f043 0308 	orr.w	r3, r3, #8
   15286:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15288:	4601      	mov	r1, r0
   1528a:	4802      	ldr	r0, [pc, #8]	; (15294 <end_thread+0x60>)
   1528c:	f002 fdac 	bl	17de8 <z_priq_dumb_remove>
}
   15290:	e7e1      	b.n	15256 <end_thread+0x22>
   15292:	4770      	bx	lr
   15294:	2000ce10 	.word	0x2000ce10

00015298 <z_sched_init>:
{
   15298:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1529a:	4802      	ldr	r0, [pc, #8]	; (152a4 <z_sched_init+0xc>)
   1529c:	f002 fea9 	bl	17ff2 <init_ready_q>
}
   152a0:	bd08      	pop	{r3, pc}
   152a2:	bf00      	nop
   152a4:	2000ce0c 	.word	0x2000ce0c

000152a8 <z_impl_k_yield>:
{
   152a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   152aa:	f04f 0320 	mov.w	r3, #32
   152ae:	f3ef 8611 	mrs	r6, BASEPRI
   152b2:	f383 8812 	msr	BASEPRI_MAX, r3
   152b6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   152ba:	4c1d      	ldr	r4, [pc, #116]	; (15330 <z_impl_k_yield+0x88>)
   152bc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   152be:	7b4b      	ldrb	r3, [r1, #13]
   152c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   152c4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   152c6:	f104 071c 	add.w	r7, r4, #28
   152ca:	4638      	mov	r0, r7
   152cc:	f002 fd8c 	bl	17de8 <z_priq_dumb_remove>
	queue_thread(_current);
   152d0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   152d2:	7b6b      	ldrb	r3, [r5, #13]
   152d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   152d8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   152da:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   152dc:	42bc      	cmp	r4, r7
   152de:	d108      	bne.n	152f2 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   152e0:	2400      	movs	r4, #0
   152e2:	e006      	b.n	152f2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   152e4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   152e6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   152e8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   152ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   152ec:	6065      	str	r5, [r4, #4]
}
   152ee:	e017      	b.n	15320 <z_impl_k_yield+0x78>
   152f0:	2400      	movs	r4, #0
   152f2:	b16c      	cbz	r4, 15310 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   152f4:	4621      	mov	r1, r4
   152f6:	4628      	mov	r0, r5
   152f8:	f002 fd52 	bl	17da0 <z_sched_prio_cmp>
   152fc:	2800      	cmp	r0, #0
   152fe:	dcf1      	bgt.n	152e4 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15300:	2c00      	cmp	r4, #0
   15302:	d0f6      	beq.n	152f2 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   15304:	4b0a      	ldr	r3, [pc, #40]	; (15330 <z_impl_k_yield+0x88>)
   15306:	6a1b      	ldr	r3, [r3, #32]
   15308:	429c      	cmp	r4, r3
   1530a:	d0f1      	beq.n	152f0 <z_impl_k_yield+0x48>
   1530c:	6824      	ldr	r4, [r4, #0]
   1530e:	e7f0      	b.n	152f2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   15310:	4b07      	ldr	r3, [pc, #28]	; (15330 <z_impl_k_yield+0x88>)
   15312:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   15314:	f103 011c 	add.w	r1, r3, #28
   15318:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1531a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1531c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1531e:	621d      	str	r5, [r3, #32]
	update_cache(1);
   15320:	2001      	movs	r0, #1
   15322:	f7ff fd95 	bl	14e50 <update_cache>
   15326:	4630      	mov	r0, r6
   15328:	f7fb fee2 	bl	110f0 <arch_swap>
}
   1532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1532e:	bf00      	nop
   15330:	2000cdf4 	.word	0x2000cdf4

00015334 <z_tick_sleep>:
{
   15334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   15338:	ea50 0301 	orrs.w	r3, r0, r1
   1533c:	d038      	beq.n	153b0 <z_tick_sleep+0x7c>
   1533e:	4604      	mov	r4, r0
   15340:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   15342:	f06f 0301 	mvn.w	r3, #1
   15346:	1a1b      	subs	r3, r3, r0
   15348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1534c:	eb62 0201 	sbc.w	r2, r2, r1
   15350:	2b01      	cmp	r3, #1
   15352:	f172 0200 	sbcs.w	r2, r2, #0
   15356:	db2f      	blt.n	153b8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   15358:	f06f 0501 	mvn.w	r5, #1
   1535c:	1a2d      	subs	r5, r5, r0
   1535e:	f04f 0320 	mov.w	r3, #32
   15362:	f3ef 8811 	mrs	r8, BASEPRI
   15366:	f383 8812 	msr	BASEPRI_MAX, r3
   1536a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1536e:	4f14      	ldr	r7, [pc, #80]	; (153c0 <z_tick_sleep+0x8c>)
   15370:	68b8      	ldr	r0, [r7, #8]
   15372:	4b14      	ldr	r3, [pc, #80]	; (153c4 <z_tick_sleep+0x90>)
   15374:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   15376:	f7ff fe6d 	bl	15054 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1537a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1537c:	4622      	mov	r2, r4
   1537e:	4633      	mov	r3, r6
   15380:	4911      	ldr	r1, [pc, #68]	; (153c8 <z_tick_sleep+0x94>)
   15382:	3018      	adds	r0, #24
   15384:	f000 f8c6 	bl	15514 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15388:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1538a:	7b53      	ldrb	r3, [r2, #13]
   1538c:	f043 0310 	orr.w	r3, r3, #16
   15390:	7353      	strb	r3, [r2, #13]
   15392:	4640      	mov	r0, r8
   15394:	f7fb feac 	bl	110f0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   15398:	f002 fe98 	bl	180cc <sys_clock_tick_get_32>
   1539c:	1a28      	subs	r0, r5, r0
   1539e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   153a2:	2801      	cmp	r0, #1
   153a4:	f173 0300 	sbcs.w	r3, r3, #0
   153a8:	da00      	bge.n	153ac <z_tick_sleep+0x78>
	return 0;
   153aa:	2000      	movs	r0, #0
}
   153ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   153b0:	f7ff ff7a 	bl	152a8 <z_impl_k_yield>
		return 0;
   153b4:	2000      	movs	r0, #0
   153b6:	e7f9      	b.n	153ac <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   153b8:	f002 fe88 	bl	180cc <sys_clock_tick_get_32>
   153bc:	1905      	adds	r5, r0, r4
   153be:	e7ce      	b.n	1535e <z_tick_sleep+0x2a>
   153c0:	2000cdf4 	.word	0x2000cdf4
   153c4:	2000ce1c 	.word	0x2000ce1c
   153c8:	00017eeb 	.word	0x00017eeb

000153cc <z_impl_k_sleep>:
{
   153cc:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   153ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   153d2:	bf08      	it	eq
   153d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   153d8:	d018      	beq.n	1540c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   153da:	f7ff ffab 	bl	15334 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   153de:	17c2      	asrs	r2, r0, #31
   153e0:	0151      	lsls	r1, r2, #5
   153e2:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   153e6:	0143      	lsls	r3, r0, #5
   153e8:	1a1b      	subs	r3, r3, r0
   153ea:	eb61 0102 	sbc.w	r1, r1, r2
   153ee:	0089      	lsls	r1, r1, #2
   153f0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   153f4:	009b      	lsls	r3, r3, #2
   153f6:	181b      	adds	r3, r3, r0
   153f8:	eb42 0201 	adc.w	r2, r2, r1
   153fc:	00d2      	lsls	r2, r2, #3
   153fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   15402:	f3c3 3310 	ubfx	r3, r3, #12, #17
   15406:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   1540a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   1540c:	4b03      	ldr	r3, [pc, #12]	; (1541c <z_impl_k_sleep+0x50>)
   1540e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   15410:	f7ff feb6 	bl	15180 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   15414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15418:	e7f7      	b.n	1540a <z_impl_k_sleep+0x3e>
   1541a:	bf00      	nop
   1541c:	2000cdf4 	.word	0x2000cdf4

00015420 <z_impl_z_current_get>:
}
   15420:	4b01      	ldr	r3, [pc, #4]	; (15428 <z_impl_z_current_get+0x8>)
   15422:	6898      	ldr	r0, [r3, #8]
   15424:	4770      	bx	lr
   15426:	bf00      	nop
   15428:	2000cdf4 	.word	0x2000cdf4

0001542c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1542c:	b570      	push	{r4, r5, r6, lr}
   1542e:	f04f 0320 	mov.w	r3, #32
   15432:	f3ef 8511 	mrs	r5, BASEPRI
   15436:	f383 8812 	msr	BASEPRI_MAX, r3
   1543a:	f3bf 8f6f 	isb	sy
   1543e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   15440:	7b03      	ldrb	r3, [r0, #12]
   15442:	f013 0f01 	tst.w	r3, #1
   15446:	d109      	bne.n	1545c <z_thread_abort+0x30>
   15448:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1544a:	7b43      	ldrb	r3, [r0, #13]
   1544c:	f013 0f08 	tst.w	r3, #8
   15450:	d00f      	beq.n	15472 <z_thread_abort+0x46>
	__asm__ volatile(
   15452:	f385 8811 	msr	BASEPRI, r5
   15456:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   1545a:	e009      	b.n	15470 <z_thread_abort+0x44>
   1545c:	f385 8811 	msr	BASEPRI, r5
   15460:	f3bf 8f6f 	isb	sy
		k_panic();
   15464:	4040      	eors	r0, r0
   15466:	f380 8811 	msr	BASEPRI, r0
   1546a:	f04f 0004 	mov.w	r0, #4
   1546e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15470:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   15472:	f7ff fedf 	bl	15234 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   15476:	4b08      	ldr	r3, [pc, #32]	; (15498 <z_thread_abort+0x6c>)
   15478:	689b      	ldr	r3, [r3, #8]
   1547a:	42a3      	cmp	r3, r4
   1547c:	d004      	beq.n	15488 <z_thread_abort+0x5c>
   1547e:	f386 8811 	msr	BASEPRI, r6
   15482:	f3bf 8f6f 	isb	sy
   15486:	e7f3      	b.n	15470 <z_thread_abort+0x44>
   15488:	f3ef 8305 	mrs	r3, IPSR
   1548c:	2b00      	cmp	r3, #0
   1548e:	d1f6      	bne.n	1547e <z_thread_abort+0x52>
   15490:	4628      	mov	r0, r5
   15492:	f7fb fe2d 	bl	110f0 <arch_swap>
	return ret;
   15496:	e7f2      	b.n	1547e <z_thread_abort+0x52>
   15498:	2000cdf4 	.word	0x2000cdf4

0001549c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1549c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1549e:	4806      	ldr	r0, [pc, #24]	; (154b8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   154a0:	4a06      	ldr	r2, [pc, #24]	; (154bc <z_data_copy+0x20>)
   154a2:	1a12      	subs	r2, r2, r0
   154a4:	4906      	ldr	r1, [pc, #24]	; (154c0 <z_data_copy+0x24>)
   154a6:	f002 fba1 	bl	17bec <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   154aa:	4a06      	ldr	r2, [pc, #24]	; (154c4 <z_data_copy+0x28>)
   154ac:	4906      	ldr	r1, [pc, #24]	; (154c8 <z_data_copy+0x2c>)
   154ae:	4807      	ldr	r0, [pc, #28]	; (154cc <z_data_copy+0x30>)
   154b0:	f002 fb9c 	bl	17bec <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   154b4:	bd08      	pop	{r3, pc}
   154b6:	bf00      	nop
   154b8:	2000c580 	.word	0x2000c580
   154bc:	2000c6e4 	.word	0x2000c6e4
   154c0:	00018e48 	.word	0x00018e48
   154c4:	00000000 	.word	0x00000000
   154c8:	00018e30 	.word	0x00018e30
   154cc:	2000c580 	.word	0x2000c580

000154d0 <first>:
	return list->head == list;
   154d0:	4b03      	ldr	r3, [pc, #12]	; (154e0 <first+0x10>)
   154d2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   154d4:	4298      	cmp	r0, r3
   154d6:	d000      	beq.n	154da <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   154d8:	4770      	bx	lr
   154da:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   154dc:	e7fc      	b.n	154d8 <first+0x8>
   154de:	bf00      	nop
   154e0:	2000c634 	.word	0x2000c634

000154e4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   154e4:	b130      	cbz	r0, 154f4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   154e6:	4a04      	ldr	r2, [pc, #16]	; (154f8 <next+0x14>)
   154e8:	6852      	ldr	r2, [r2, #4]
   154ea:	4290      	cmp	r0, r2
   154ec:	d001      	beq.n	154f2 <next+0xe>
   154ee:	6800      	ldr	r0, [r0, #0]
   154f0:	4770      	bx	lr
   154f2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   154f4:	4770      	bx	lr
   154f6:	bf00      	nop
   154f8:	2000c634 	.word	0x2000c634

000154fc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   154fc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   154fe:	4b04      	ldr	r3, [pc, #16]	; (15510 <elapsed+0x14>)
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	b10b      	cbz	r3, 15508 <elapsed+0xc>
   15504:	2000      	movs	r0, #0
}
   15506:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   15508:	f7fd f9a6 	bl	12858 <sys_clock_elapsed>
   1550c:	e7fb      	b.n	15506 <elapsed+0xa>
   1550e:	bf00      	nop
   15510:	2000ce2c 	.word	0x2000ce2c

00015514 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15518:	bf08      	it	eq
   1551a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1551e:	d074      	beq.n	1560a <z_add_timeout+0xf6>
{
   15520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15524:	4604      	mov	r4, r0
   15526:	4692      	mov	sl, r2
   15528:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1552a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1552c:	2300      	movs	r3, #0
	__asm__ volatile(
   1552e:	f04f 0220 	mov.w	r2, #32
   15532:	f3ef 8711 	mrs	r7, BASEPRI
   15536:	f382 8812 	msr	BASEPRI_MAX, r2
   1553a:	f3bf 8f6f 	isb	sy
   1553e:	e026      	b.n	1558e <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   15540:	f11a 0801 	adds.w	r8, sl, #1
   15544:	f145 0900 	adc.w	r9, r5, #0
   15548:	f7ff ffd8 	bl	154fc <elapsed>
   1554c:	eb18 0300 	adds.w	r3, r8, r0
   15550:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   15554:	6123      	str	r3, [r4, #16]
   15556:	6160      	str	r0, [r4, #20]
   15558:	e03b      	b.n	155d2 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1555a:	1a52      	subs	r2, r2, r1
   1555c:	eb66 0303 	sbc.w	r3, r6, r3
   15560:	6102      	str	r2, [r0, #16]
   15562:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   15564:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   15566:	6063      	str	r3, [r4, #4]
	node->next = successor;
   15568:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1556a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1556c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1556e:	e005      	b.n	1557c <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   15570:	4b26      	ldr	r3, [pc, #152]	; (1560c <z_add_timeout+0xf8>)
   15572:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15574:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   15576:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15578:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1557a:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1557c:	f7ff ffa8 	bl	154d0 <first>
   15580:	4284      	cmp	r4, r0
   15582:	d03a      	beq.n	155fa <z_add_timeout+0xe6>
	__asm__ volatile(
   15584:	f387 8811 	msr	BASEPRI, r7
   15588:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1558c:	2301      	movs	r3, #1
   1558e:	2b00      	cmp	r3, #0
   15590:	d139      	bne.n	15606 <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   15592:	4653      	mov	r3, sl
   15594:	f06f 0101 	mvn.w	r1, #1
   15598:	ebb1 010a 	subs.w	r1, r1, sl
   1559c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155a0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   155a4:	2a00      	cmp	r2, #0
   155a6:	dbcb      	blt.n	15540 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   155a8:	4a19      	ldr	r2, [pc, #100]	; (15610 <z_add_timeout+0xfc>)
   155aa:	6811      	ldr	r1, [r2, #0]
   155ac:	6852      	ldr	r2, [r2, #4]
   155ae:	185b      	adds	r3, r3, r1
   155b0:	eb42 0205 	adc.w	r2, r2, r5
   155b4:	f06f 0101 	mvn.w	r1, #1
   155b8:	1ac9      	subs	r1, r1, r3
   155ba:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   155be:	4608      	mov	r0, r1
   155c0:	461a      	mov	r2, r3
   155c2:	2901      	cmp	r1, #1
   155c4:	f173 0300 	sbcs.w	r3, r3, #0
   155c8:	da01      	bge.n	155ce <z_add_timeout+0xba>
   155ca:	2001      	movs	r0, #1
   155cc:	2200      	movs	r2, #0
   155ce:	6120      	str	r0, [r4, #16]
   155d0:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   155d2:	f7ff ff7d 	bl	154d0 <first>
   155d6:	2800      	cmp	r0, #0
   155d8:	d0ca      	beq.n	15570 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   155da:	6902      	ldr	r2, [r0, #16]
   155dc:	6946      	ldr	r6, [r0, #20]
   155de:	6921      	ldr	r1, [r4, #16]
   155e0:	6963      	ldr	r3, [r4, #20]
   155e2:	4291      	cmp	r1, r2
   155e4:	eb73 0e06 	sbcs.w	lr, r3, r6
   155e8:	dbb7      	blt.n	1555a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   155ea:	1a89      	subs	r1, r1, r2
   155ec:	eb63 0306 	sbc.w	r3, r3, r6
   155f0:	6121      	str	r1, [r4, #16]
   155f2:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   155f4:	f7ff ff76 	bl	154e4 <next>
   155f8:	e7ed      	b.n	155d6 <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   155fa:	f002 fd15 	bl	18028 <next_timeout>
   155fe:	2100      	movs	r1, #0
   15600:	f7fd f8ee 	bl	127e0 <sys_clock_set_timeout>
   15604:	e7be      	b.n	15584 <z_add_timeout+0x70>
		}
	}
}
   15606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1560a:	4770      	bx	lr
   1560c:	2000c634 	.word	0x2000c634
   15610:	2000c890 	.word	0x2000c890

00015614 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   15614:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   15616:	f04f 0320 	mov.w	r3, #32
   1561a:	f3ef 8611 	mrs	r6, BASEPRI
   1561e:	f383 8812 	msr	BASEPRI_MAX, r3
   15622:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   15626:	4b2b      	ldr	r3, [pc, #172]	; (156d4 <sys_clock_announce+0xc0>)
   15628:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   1562a:	f7ff ff51 	bl	154d0 <first>
   1562e:	4604      	mov	r4, r0

	for (t = first();
   15630:	e024      	b.n	1567c <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   15632:	4a29      	ldr	r2, [pc, #164]	; (156d8 <sys_clock_announce+0xc4>)
   15634:	6813      	ldr	r3, [r2, #0]
   15636:	6851      	ldr	r1, [r2, #4]
   15638:	195b      	adds	r3, r3, r5
   1563a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1563e:	6013      	str	r3, [r2, #0]
   15640:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   15642:	2200      	movs	r2, #0
   15644:	2300      	movs	r3, #0
   15646:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1564a:	4620      	mov	r0, r4
   1564c:	f002 fcd5 	bl	17ffa <remove_timeout>
	__asm__ volatile(
   15650:	f386 8811 	msr	BASEPRI, r6
   15654:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   15658:	68a3      	ldr	r3, [r4, #8]
   1565a:	4620      	mov	r0, r4
   1565c:	4798      	blx	r3
	__asm__ volatile(
   1565e:	f04f 0320 	mov.w	r3, #32
   15662:	f3ef 8611 	mrs	r6, BASEPRI
   15666:	f383 8812 	msr	BASEPRI_MAX, r3
   1566a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1566e:	4a19      	ldr	r2, [pc, #100]	; (156d4 <sys_clock_announce+0xc0>)
   15670:	6813      	ldr	r3, [r2, #0]
   15672:	1b5b      	subs	r3, r3, r5
   15674:	6013      	str	r3, [r2, #0]
	     t = first()) {
   15676:	f7ff ff2b 	bl	154d0 <first>
   1567a:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   1567c:	b13c      	cbz	r4, 1568e <sys_clock_announce+0x7a>
   1567e:	6925      	ldr	r5, [r4, #16]
   15680:	6961      	ldr	r1, [r4, #20]
   15682:	4b14      	ldr	r3, [pc, #80]	; (156d4 <sys_clock_announce+0xc0>)
   15684:	681a      	ldr	r2, [r3, #0]
   15686:	17d3      	asrs	r3, r2, #31
   15688:	42aa      	cmp	r2, r5
   1568a:	418b      	sbcs	r3, r1
   1568c:	dad1      	bge.n	15632 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   1568e:	b144      	cbz	r4, 156a2 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   15690:	6923      	ldr	r3, [r4, #16]
   15692:	6962      	ldr	r2, [r4, #20]
   15694:	490f      	ldr	r1, [pc, #60]	; (156d4 <sys_clock_announce+0xc0>)
   15696:	6809      	ldr	r1, [r1, #0]
   15698:	1a5b      	subs	r3, r3, r1
   1569a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1569e:	6123      	str	r3, [r4, #16]
   156a0:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   156a2:	4a0d      	ldr	r2, [pc, #52]	; (156d8 <sys_clock_announce+0xc4>)
   156a4:	4d0b      	ldr	r5, [pc, #44]	; (156d4 <sys_clock_announce+0xc0>)
   156a6:	6828      	ldr	r0, [r5, #0]
   156a8:	6813      	ldr	r3, [r2, #0]
   156aa:	6851      	ldr	r1, [r2, #4]
   156ac:	181b      	adds	r3, r3, r0
   156ae:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   156b2:	6013      	str	r3, [r2, #0]
   156b4:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   156b6:	2400      	movs	r4, #0
   156b8:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   156ba:	f002 fcb5 	bl	18028 <next_timeout>
   156be:	4621      	mov	r1, r4
   156c0:	f7fd f88e 	bl	127e0 <sys_clock_set_timeout>
	__asm__ volatile(
   156c4:	f386 8811 	msr	BASEPRI, r6
   156c8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   156cc:	f7ff fc2e 	bl	14f2c <z_time_slice>
#endif
}
   156d0:	bd70      	pop	{r4, r5, r6, pc}
   156d2:	bf00      	nop
   156d4:	2000ce2c 	.word	0x2000ce2c
   156d8:	2000c890 	.word	0x2000c890

000156dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   156dc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   156de:	2200      	movs	r2, #0
	__asm__ volatile(
   156e0:	f04f 0320 	mov.w	r3, #32
   156e4:	f3ef 8411 	mrs	r4, BASEPRI
   156e8:	f383 8812 	msr	BASEPRI_MAX, r3
   156ec:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   156f0:	4613      	mov	r3, r2
   156f2:	4611      	mov	r1, r2
   156f4:	e00c      	b.n	15710 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   156f6:	f7ff ff01 	bl	154fc <elapsed>
   156fa:	4a07      	ldr	r2, [pc, #28]	; (15718 <sys_clock_tick_get+0x3c>)
   156fc:	6813      	ldr	r3, [r2, #0]
   156fe:	6851      	ldr	r1, [r2, #4]
   15700:	18c3      	adds	r3, r0, r3
   15702:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   15706:	f384 8811 	msr	BASEPRI, r4
   1570a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1570e:	2201      	movs	r2, #1
   15710:	2a00      	cmp	r2, #0
   15712:	d0f0      	beq.n	156f6 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   15714:	4618      	mov	r0, r3
   15716:	bd10      	pop	{r4, pc}
   15718:	2000c890 	.word	0x2000c890

0001571c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1571c:	4b01      	ldr	r3, [pc, #4]	; (15724 <k_thread_system_pool_assign+0x8>)
   1571e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   15722:	4770      	bx	lr
   15724:	2000c6a8 	.word	0x2000c6a8

00015728 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   15728:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1572a:	4802      	ldr	r0, [pc, #8]	; (15734 <boot_banner+0xc>)
   1572c:	f000 fc08 	bl	15f40 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   15730:	bd08      	pop	{r3, pc}
   15732:	bf00      	nop
   15734:	00018c3c 	.word	0x00018c3c

00015738 <_free_r>:
   15738:	b538      	push	{r3, r4, r5, lr}
   1573a:	4605      	mov	r5, r0
   1573c:	2900      	cmp	r1, #0
   1573e:	d041      	beq.n	157c4 <_free_r+0x8c>
   15740:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15744:	1f0c      	subs	r4, r1, #4
   15746:	2b00      	cmp	r3, #0
   15748:	bfb8      	it	lt
   1574a:	18e4      	addlt	r4, r4, r3
   1574c:	f000 f93e 	bl	159cc <__malloc_lock>
   15750:	4a1d      	ldr	r2, [pc, #116]	; (157c8 <_free_r+0x90>)
   15752:	6813      	ldr	r3, [r2, #0]
   15754:	b933      	cbnz	r3, 15764 <_free_r+0x2c>
   15756:	6063      	str	r3, [r4, #4]
   15758:	6014      	str	r4, [r2, #0]
   1575a:	4628      	mov	r0, r5
   1575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15760:	f000 b93a 	b.w	159d8 <__malloc_unlock>
   15764:	42a3      	cmp	r3, r4
   15766:	d908      	bls.n	1577a <_free_r+0x42>
   15768:	6820      	ldr	r0, [r4, #0]
   1576a:	1821      	adds	r1, r4, r0
   1576c:	428b      	cmp	r3, r1
   1576e:	bf01      	itttt	eq
   15770:	6819      	ldreq	r1, [r3, #0]
   15772:	685b      	ldreq	r3, [r3, #4]
   15774:	1809      	addeq	r1, r1, r0
   15776:	6021      	streq	r1, [r4, #0]
   15778:	e7ed      	b.n	15756 <_free_r+0x1e>
   1577a:	461a      	mov	r2, r3
   1577c:	685b      	ldr	r3, [r3, #4]
   1577e:	b10b      	cbz	r3, 15784 <_free_r+0x4c>
   15780:	42a3      	cmp	r3, r4
   15782:	d9fa      	bls.n	1577a <_free_r+0x42>
   15784:	6811      	ldr	r1, [r2, #0]
   15786:	1850      	adds	r0, r2, r1
   15788:	42a0      	cmp	r0, r4
   1578a:	d10b      	bne.n	157a4 <_free_r+0x6c>
   1578c:	6820      	ldr	r0, [r4, #0]
   1578e:	4401      	add	r1, r0
   15790:	1850      	adds	r0, r2, r1
   15792:	6011      	str	r1, [r2, #0]
   15794:	4283      	cmp	r3, r0
   15796:	d1e0      	bne.n	1575a <_free_r+0x22>
   15798:	6818      	ldr	r0, [r3, #0]
   1579a:	685b      	ldr	r3, [r3, #4]
   1579c:	4408      	add	r0, r1
   1579e:	6053      	str	r3, [r2, #4]
   157a0:	6010      	str	r0, [r2, #0]
   157a2:	e7da      	b.n	1575a <_free_r+0x22>
   157a4:	d902      	bls.n	157ac <_free_r+0x74>
   157a6:	230c      	movs	r3, #12
   157a8:	602b      	str	r3, [r5, #0]
   157aa:	e7d6      	b.n	1575a <_free_r+0x22>
   157ac:	6820      	ldr	r0, [r4, #0]
   157ae:	1821      	adds	r1, r4, r0
   157b0:	428b      	cmp	r3, r1
   157b2:	bf02      	ittt	eq
   157b4:	6819      	ldreq	r1, [r3, #0]
   157b6:	685b      	ldreq	r3, [r3, #4]
   157b8:	1809      	addeq	r1, r1, r0
   157ba:	6063      	str	r3, [r4, #4]
   157bc:	bf08      	it	eq
   157be:	6021      	streq	r1, [r4, #0]
   157c0:	6054      	str	r4, [r2, #4]
   157c2:	e7ca      	b.n	1575a <_free_r+0x22>
   157c4:	bd38      	pop	{r3, r4, r5, pc}
   157c6:	bf00      	nop
   157c8:	2000ce34 	.word	0x2000ce34

000157cc <_malloc_r>:
   157cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157ce:	1ccd      	adds	r5, r1, #3
   157d0:	4606      	mov	r6, r0
   157d2:	f025 0503 	bic.w	r5, r5, #3
   157d6:	3508      	adds	r5, #8
   157d8:	2d0c      	cmp	r5, #12
   157da:	bf38      	it	cc
   157dc:	250c      	movcc	r5, #12
   157de:	2d00      	cmp	r5, #0
   157e0:	db01      	blt.n	157e6 <_malloc_r+0x1a>
   157e2:	42a9      	cmp	r1, r5
   157e4:	d903      	bls.n	157ee <_malloc_r+0x22>
   157e6:	230c      	movs	r3, #12
   157e8:	6033      	str	r3, [r6, #0]
   157ea:	2000      	movs	r0, #0
   157ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157ee:	f000 f8ed 	bl	159cc <__malloc_lock>
   157f2:	4921      	ldr	r1, [pc, #132]	; (15878 <_malloc_r+0xac>)
   157f4:	680a      	ldr	r2, [r1, #0]
   157f6:	4614      	mov	r4, r2
   157f8:	b99c      	cbnz	r4, 15822 <_malloc_r+0x56>
   157fa:	4f20      	ldr	r7, [pc, #128]	; (1587c <_malloc_r+0xb0>)
   157fc:	683b      	ldr	r3, [r7, #0]
   157fe:	b923      	cbnz	r3, 1580a <_malloc_r+0x3e>
   15800:	4621      	mov	r1, r4
   15802:	4630      	mov	r0, r6
   15804:	f000 f83c 	bl	15880 <_sbrk_r>
   15808:	6038      	str	r0, [r7, #0]
   1580a:	4629      	mov	r1, r5
   1580c:	4630      	mov	r0, r6
   1580e:	f000 f837 	bl	15880 <_sbrk_r>
   15812:	1c43      	adds	r3, r0, #1
   15814:	d123      	bne.n	1585e <_malloc_r+0x92>
   15816:	230c      	movs	r3, #12
   15818:	4630      	mov	r0, r6
   1581a:	6033      	str	r3, [r6, #0]
   1581c:	f000 f8dc 	bl	159d8 <__malloc_unlock>
   15820:	e7e3      	b.n	157ea <_malloc_r+0x1e>
   15822:	6823      	ldr	r3, [r4, #0]
   15824:	1b5b      	subs	r3, r3, r5
   15826:	d417      	bmi.n	15858 <_malloc_r+0x8c>
   15828:	2b0b      	cmp	r3, #11
   1582a:	d903      	bls.n	15834 <_malloc_r+0x68>
   1582c:	6023      	str	r3, [r4, #0]
   1582e:	441c      	add	r4, r3
   15830:	6025      	str	r5, [r4, #0]
   15832:	e004      	b.n	1583e <_malloc_r+0x72>
   15834:	6863      	ldr	r3, [r4, #4]
   15836:	42a2      	cmp	r2, r4
   15838:	bf0c      	ite	eq
   1583a:	600b      	streq	r3, [r1, #0]
   1583c:	6053      	strne	r3, [r2, #4]
   1583e:	4630      	mov	r0, r6
   15840:	f000 f8ca 	bl	159d8 <__malloc_unlock>
   15844:	f104 000b 	add.w	r0, r4, #11
   15848:	1d23      	adds	r3, r4, #4
   1584a:	f020 0007 	bic.w	r0, r0, #7
   1584e:	1ac2      	subs	r2, r0, r3
   15850:	bf1c      	itt	ne
   15852:	1a1b      	subne	r3, r3, r0
   15854:	50a3      	strne	r3, [r4, r2]
   15856:	e7c9      	b.n	157ec <_malloc_r+0x20>
   15858:	4622      	mov	r2, r4
   1585a:	6864      	ldr	r4, [r4, #4]
   1585c:	e7cc      	b.n	157f8 <_malloc_r+0x2c>
   1585e:	1cc4      	adds	r4, r0, #3
   15860:	f024 0403 	bic.w	r4, r4, #3
   15864:	42a0      	cmp	r0, r4
   15866:	d0e3      	beq.n	15830 <_malloc_r+0x64>
   15868:	1a21      	subs	r1, r4, r0
   1586a:	4630      	mov	r0, r6
   1586c:	f000 f808 	bl	15880 <_sbrk_r>
   15870:	3001      	adds	r0, #1
   15872:	d1dd      	bne.n	15830 <_malloc_r+0x64>
   15874:	e7cf      	b.n	15816 <_malloc_r+0x4a>
   15876:	bf00      	nop
   15878:	2000ce34 	.word	0x2000ce34
   1587c:	2000ce30 	.word	0x2000ce30

00015880 <_sbrk_r>:
   15880:	b538      	push	{r3, r4, r5, lr}
   15882:	2300      	movs	r3, #0
   15884:	4d05      	ldr	r5, [pc, #20]	; (1589c <_sbrk_r+0x1c>)
   15886:	4604      	mov	r4, r0
   15888:	4608      	mov	r0, r1
   1588a:	602b      	str	r3, [r5, #0]
   1588c:	f7fc f8c4 	bl	11a18 <_sbrk>
   15890:	1c43      	adds	r3, r0, #1
   15892:	d102      	bne.n	1589a <_sbrk_r+0x1a>
   15894:	682b      	ldr	r3, [r5, #0]
   15896:	b103      	cbz	r3, 1589a <_sbrk_r+0x1a>
   15898:	6023      	str	r3, [r4, #0]
   1589a:	bd38      	pop	{r3, r4, r5, pc}
   1589c:	2000ce38 	.word	0x2000ce38

000158a0 <_strtol_l.constprop.0>:
   158a0:	2b24      	cmp	r3, #36	; 0x24
   158a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158a6:	4686      	mov	lr, r0
   158a8:	4690      	mov	r8, r2
   158aa:	d801      	bhi.n	158b0 <_strtol_l.constprop.0+0x10>
   158ac:	2b01      	cmp	r3, #1
   158ae:	d106      	bne.n	158be <_strtol_l.constprop.0+0x1e>
   158b0:	f001 f9ee 	bl	16c90 <__errno>
   158b4:	2316      	movs	r3, #22
   158b6:	6003      	str	r3, [r0, #0]
   158b8:	2000      	movs	r0, #0
   158ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   158be:	460d      	mov	r5, r1
   158c0:	4835      	ldr	r0, [pc, #212]	; (15998 <_strtol_l.constprop.0+0xf8>)
   158c2:	462a      	mov	r2, r5
   158c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   158c8:	5d06      	ldrb	r6, [r0, r4]
   158ca:	f016 0608 	ands.w	r6, r6, #8
   158ce:	d1f8      	bne.n	158c2 <_strtol_l.constprop.0+0x22>
   158d0:	2c2d      	cmp	r4, #45	; 0x2d
   158d2:	d124      	bne.n	1591e <_strtol_l.constprop.0+0x7e>
   158d4:	782c      	ldrb	r4, [r5, #0]
   158d6:	2601      	movs	r6, #1
   158d8:	1c95      	adds	r5, r2, #2
   158da:	bb2b      	cbnz	r3, 15928 <_strtol_l.constprop.0+0x88>
   158dc:	2c30      	cmp	r4, #48	; 0x30
   158de:	d030      	beq.n	15942 <_strtol_l.constprop.0+0xa2>
   158e0:	230a      	movs	r3, #10
   158e2:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   158e6:	2200      	movs	r2, #0
   158e8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   158ec:	4610      	mov	r0, r2
   158ee:	fbbc f9f3 	udiv	r9, ip, r3
   158f2:	fb03 ca19 	mls	sl, r3, r9, ip
   158f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   158fa:	2f09      	cmp	r7, #9
   158fc:	d828      	bhi.n	15950 <_strtol_l.constprop.0+0xb0>
   158fe:	463c      	mov	r4, r7
   15900:	42a3      	cmp	r3, r4
   15902:	dd34      	ble.n	1596e <_strtol_l.constprop.0+0xce>
   15904:	1c57      	adds	r7, r2, #1
   15906:	d007      	beq.n	15918 <_strtol_l.constprop.0+0x78>
   15908:	4581      	cmp	r9, r0
   1590a:	d32d      	bcc.n	15968 <_strtol_l.constprop.0+0xc8>
   1590c:	d101      	bne.n	15912 <_strtol_l.constprop.0+0x72>
   1590e:	45a2      	cmp	sl, r4
   15910:	db2a      	blt.n	15968 <_strtol_l.constprop.0+0xc8>
   15912:	fb00 4003 	mla	r0, r0, r3, r4
   15916:	2201      	movs	r2, #1
   15918:	f815 4b01 	ldrb.w	r4, [r5], #1
   1591c:	e7eb      	b.n	158f6 <_strtol_l.constprop.0+0x56>
   1591e:	2c2b      	cmp	r4, #43	; 0x2b
   15920:	bf04      	itt	eq
   15922:	782c      	ldrbeq	r4, [r5, #0]
   15924:	1c95      	addeq	r5, r2, #2
   15926:	e7d8      	b.n	158da <_strtol_l.constprop.0+0x3a>
   15928:	2b10      	cmp	r3, #16
   1592a:	d1da      	bne.n	158e2 <_strtol_l.constprop.0+0x42>
   1592c:	2c30      	cmp	r4, #48	; 0x30
   1592e:	d1d8      	bne.n	158e2 <_strtol_l.constprop.0+0x42>
   15930:	782a      	ldrb	r2, [r5, #0]
   15932:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   15936:	2a58      	cmp	r2, #88	; 0x58
   15938:	d1d3      	bne.n	158e2 <_strtol_l.constprop.0+0x42>
   1593a:	786c      	ldrb	r4, [r5, #1]
   1593c:	2310      	movs	r3, #16
   1593e:	3502      	adds	r5, #2
   15940:	e7cf      	b.n	158e2 <_strtol_l.constprop.0+0x42>
   15942:	782b      	ldrb	r3, [r5, #0]
   15944:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15948:	2b58      	cmp	r3, #88	; 0x58
   1594a:	d0f6      	beq.n	1593a <_strtol_l.constprop.0+0x9a>
   1594c:	2308      	movs	r3, #8
   1594e:	e7c8      	b.n	158e2 <_strtol_l.constprop.0+0x42>
   15950:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   15954:	2f19      	cmp	r7, #25
   15956:	d801      	bhi.n	1595c <_strtol_l.constprop.0+0xbc>
   15958:	3c37      	subs	r4, #55	; 0x37
   1595a:	e7d1      	b.n	15900 <_strtol_l.constprop.0+0x60>
   1595c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   15960:	2f19      	cmp	r7, #25
   15962:	d804      	bhi.n	1596e <_strtol_l.constprop.0+0xce>
   15964:	3c57      	subs	r4, #87	; 0x57
   15966:	e7cb      	b.n	15900 <_strtol_l.constprop.0+0x60>
   15968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1596c:	e7d4      	b.n	15918 <_strtol_l.constprop.0+0x78>
   1596e:	1c53      	adds	r3, r2, #1
   15970:	d108      	bne.n	15984 <_strtol_l.constprop.0+0xe4>
   15972:	2322      	movs	r3, #34	; 0x22
   15974:	4660      	mov	r0, ip
   15976:	f8ce 3000 	str.w	r3, [lr]
   1597a:	f1b8 0f00 	cmp.w	r8, #0
   1597e:	d09c      	beq.n	158ba <_strtol_l.constprop.0+0x1a>
   15980:	1e69      	subs	r1, r5, #1
   15982:	e006      	b.n	15992 <_strtol_l.constprop.0+0xf2>
   15984:	b106      	cbz	r6, 15988 <_strtol_l.constprop.0+0xe8>
   15986:	4240      	negs	r0, r0
   15988:	f1b8 0f00 	cmp.w	r8, #0
   1598c:	d095      	beq.n	158ba <_strtol_l.constprop.0+0x1a>
   1598e:	2a00      	cmp	r2, #0
   15990:	d1f6      	bne.n	15980 <_strtol_l.constprop.0+0xe0>
   15992:	f8c8 1000 	str.w	r1, [r8]
   15996:	e790      	b.n	158ba <_strtol_l.constprop.0+0x1a>
   15998:	00018cf2 	.word	0x00018cf2

0001599c <strtol>:
   1599c:	4613      	mov	r3, r2
   1599e:	460a      	mov	r2, r1
   159a0:	4601      	mov	r1, r0
   159a2:	4802      	ldr	r0, [pc, #8]	; (159ac <strtol+0x10>)
   159a4:	6800      	ldr	r0, [r0, #0]
   159a6:	f7ff bf7b 	b.w	158a0 <_strtol_l.constprop.0>
   159aa:	bf00      	nop
   159ac:	2000c63c 	.word	0x2000c63c

000159b0 <vsniprintf>:
   159b0:	b507      	push	{r0, r1, r2, lr}
   159b2:	9300      	str	r3, [sp, #0]
   159b4:	4613      	mov	r3, r2
   159b6:	460a      	mov	r2, r1
   159b8:	4601      	mov	r1, r0
   159ba:	4803      	ldr	r0, [pc, #12]	; (159c8 <vsniprintf+0x18>)
   159bc:	6800      	ldr	r0, [r0, #0]
   159be:	f002 fc0b 	bl	181d8 <_vsniprintf_r>
   159c2:	b003      	add	sp, #12
   159c4:	f85d fb04 	ldr.w	pc, [sp], #4
   159c8:	2000c63c 	.word	0x2000c63c

000159cc <__malloc_lock>:
   159cc:	4801      	ldr	r0, [pc, #4]	; (159d4 <__malloc_lock+0x8>)
   159ce:	f001 b953 	b.w	16c78 <__retarget_lock_acquire_recursive>
   159d2:	bf00      	nop
   159d4:	2000c6bc 	.word	0x2000c6bc

000159d8 <__malloc_unlock>:
   159d8:	4801      	ldr	r0, [pc, #4]	; (159e0 <__malloc_unlock+0x8>)
   159da:	f001 b955 	b.w	16c88 <__retarget_lock_release_recursive>
   159de:	bf00      	nop
   159e0:	2000c6bc 	.word	0x2000c6bc

000159e4 <_svfiprintf_r>:
   159e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159e8:	4698      	mov	r8, r3
   159ea:	898b      	ldrh	r3, [r1, #12]
   159ec:	b09d      	sub	sp, #116	; 0x74
   159ee:	4607      	mov	r7, r0
   159f0:	061b      	lsls	r3, r3, #24
   159f2:	460d      	mov	r5, r1
   159f4:	4614      	mov	r4, r2
   159f6:	d510      	bpl.n	15a1a <_svfiprintf_r+0x36>
   159f8:	690b      	ldr	r3, [r1, #16]
   159fa:	b973      	cbnz	r3, 15a1a <_svfiprintf_r+0x36>
   159fc:	2140      	movs	r1, #64	; 0x40
   159fe:	f7ff fee5 	bl	157cc <_malloc_r>
   15a02:	6028      	str	r0, [r5, #0]
   15a04:	6128      	str	r0, [r5, #16]
   15a06:	b930      	cbnz	r0, 15a16 <_svfiprintf_r+0x32>
   15a08:	230c      	movs	r3, #12
   15a0a:	603b      	str	r3, [r7, #0]
   15a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15a10:	b01d      	add	sp, #116	; 0x74
   15a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a16:	2340      	movs	r3, #64	; 0x40
   15a18:	616b      	str	r3, [r5, #20]
   15a1a:	2300      	movs	r3, #0
   15a1c:	f8cd 800c 	str.w	r8, [sp, #12]
   15a20:	f04f 0901 	mov.w	r9, #1
   15a24:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 15bc8 <_svfiprintf_r+0x1e4>
   15a28:	9309      	str	r3, [sp, #36]	; 0x24
   15a2a:	2320      	movs	r3, #32
   15a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   15a30:	2330      	movs	r3, #48	; 0x30
   15a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   15a36:	4623      	mov	r3, r4
   15a38:	469a      	mov	sl, r3
   15a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   15a3e:	b10a      	cbz	r2, 15a44 <_svfiprintf_r+0x60>
   15a40:	2a25      	cmp	r2, #37	; 0x25
   15a42:	d1f9      	bne.n	15a38 <_svfiprintf_r+0x54>
   15a44:	ebba 0b04 	subs.w	fp, sl, r4
   15a48:	d00b      	beq.n	15a62 <_svfiprintf_r+0x7e>
   15a4a:	465b      	mov	r3, fp
   15a4c:	4622      	mov	r2, r4
   15a4e:	4629      	mov	r1, r5
   15a50:	4638      	mov	r0, r7
   15a52:	f002 fbec 	bl	1822e <__ssputs_r>
   15a56:	3001      	adds	r0, #1
   15a58:	f000 80a7 	beq.w	15baa <_svfiprintf_r+0x1c6>
   15a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15a5e:	445a      	add	r2, fp
   15a60:	9209      	str	r2, [sp, #36]	; 0x24
   15a62:	f89a 3000 	ldrb.w	r3, [sl]
   15a66:	2b00      	cmp	r3, #0
   15a68:	f000 809f 	beq.w	15baa <_svfiprintf_r+0x1c6>
   15a6c:	2300      	movs	r3, #0
   15a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a72:	f10a 0a01 	add.w	sl, sl, #1
   15a76:	9304      	str	r3, [sp, #16]
   15a78:	9307      	str	r3, [sp, #28]
   15a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   15a7e:	931a      	str	r3, [sp, #104]	; 0x68
   15a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
   15a84:	4654      	mov	r4, sl
   15a86:	2205      	movs	r2, #5
   15a88:	484f      	ldr	r0, [pc, #316]	; (15bc8 <_svfiprintf_r+0x1e4>)
   15a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   15a8e:	f002 fc9b 	bl	183c8 <memchr>
   15a92:	9a04      	ldr	r2, [sp, #16]
   15a94:	b9d8      	cbnz	r0, 15ace <_svfiprintf_r+0xea>
   15a96:	06d0      	lsls	r0, r2, #27
   15a98:	bf44      	itt	mi
   15a9a:	2320      	movmi	r3, #32
   15a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   15aa0:	0711      	lsls	r1, r2, #28
   15aa2:	bf44      	itt	mi
   15aa4:	232b      	movmi	r3, #43	; 0x2b
   15aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   15aaa:	f89a 3000 	ldrb.w	r3, [sl]
   15aae:	2b2a      	cmp	r3, #42	; 0x2a
   15ab0:	d015      	beq.n	15ade <_svfiprintf_r+0xfa>
   15ab2:	9a07      	ldr	r2, [sp, #28]
   15ab4:	4654      	mov	r4, sl
   15ab6:	2000      	movs	r0, #0
   15ab8:	f04f 0c0a 	mov.w	ip, #10
   15abc:	4621      	mov	r1, r4
   15abe:	f811 3b01 	ldrb.w	r3, [r1], #1
   15ac2:	3b30      	subs	r3, #48	; 0x30
   15ac4:	2b09      	cmp	r3, #9
   15ac6:	d94b      	bls.n	15b60 <_svfiprintf_r+0x17c>
   15ac8:	b1b0      	cbz	r0, 15af8 <_svfiprintf_r+0x114>
   15aca:	9207      	str	r2, [sp, #28]
   15acc:	e014      	b.n	15af8 <_svfiprintf_r+0x114>
   15ace:	eba0 0308 	sub.w	r3, r0, r8
   15ad2:	46a2      	mov	sl, r4
   15ad4:	fa09 f303 	lsl.w	r3, r9, r3
   15ad8:	4313      	orrs	r3, r2
   15ada:	9304      	str	r3, [sp, #16]
   15adc:	e7d2      	b.n	15a84 <_svfiprintf_r+0xa0>
   15ade:	9b03      	ldr	r3, [sp, #12]
   15ae0:	1d19      	adds	r1, r3, #4
   15ae2:	681b      	ldr	r3, [r3, #0]
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	9103      	str	r1, [sp, #12]
   15ae8:	bfbb      	ittet	lt
   15aea:	425b      	neglt	r3, r3
   15aec:	f042 0202 	orrlt.w	r2, r2, #2
   15af0:	9307      	strge	r3, [sp, #28]
   15af2:	9307      	strlt	r3, [sp, #28]
   15af4:	bfb8      	it	lt
   15af6:	9204      	strlt	r2, [sp, #16]
   15af8:	7823      	ldrb	r3, [r4, #0]
   15afa:	2b2e      	cmp	r3, #46	; 0x2e
   15afc:	d10a      	bne.n	15b14 <_svfiprintf_r+0x130>
   15afe:	7863      	ldrb	r3, [r4, #1]
   15b00:	2b2a      	cmp	r3, #42	; 0x2a
   15b02:	d132      	bne.n	15b6a <_svfiprintf_r+0x186>
   15b04:	9b03      	ldr	r3, [sp, #12]
   15b06:	3402      	adds	r4, #2
   15b08:	1d1a      	adds	r2, r3, #4
   15b0a:	681b      	ldr	r3, [r3, #0]
   15b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   15b10:	9203      	str	r2, [sp, #12]
   15b12:	9305      	str	r3, [sp, #20]
   15b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 15bcc <_svfiprintf_r+0x1e8>
   15b18:	2203      	movs	r2, #3
   15b1a:	7821      	ldrb	r1, [r4, #0]
   15b1c:	4650      	mov	r0, sl
   15b1e:	f002 fc53 	bl	183c8 <memchr>
   15b22:	b138      	cbz	r0, 15b34 <_svfiprintf_r+0x150>
   15b24:	eba0 000a 	sub.w	r0, r0, sl
   15b28:	2240      	movs	r2, #64	; 0x40
   15b2a:	9b04      	ldr	r3, [sp, #16]
   15b2c:	3401      	adds	r4, #1
   15b2e:	4082      	lsls	r2, r0
   15b30:	4313      	orrs	r3, r2
   15b32:	9304      	str	r3, [sp, #16]
   15b34:	f814 1b01 	ldrb.w	r1, [r4], #1
   15b38:	2206      	movs	r2, #6
   15b3a:	4825      	ldr	r0, [pc, #148]	; (15bd0 <_svfiprintf_r+0x1ec>)
   15b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   15b40:	f002 fc42 	bl	183c8 <memchr>
   15b44:	2800      	cmp	r0, #0
   15b46:	d036      	beq.n	15bb6 <_svfiprintf_r+0x1d2>
   15b48:	4b22      	ldr	r3, [pc, #136]	; (15bd4 <_svfiprintf_r+0x1f0>)
   15b4a:	bb1b      	cbnz	r3, 15b94 <_svfiprintf_r+0x1b0>
   15b4c:	9b03      	ldr	r3, [sp, #12]
   15b4e:	3307      	adds	r3, #7
   15b50:	f023 0307 	bic.w	r3, r3, #7
   15b54:	3308      	adds	r3, #8
   15b56:	9303      	str	r3, [sp, #12]
   15b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b5a:	4433      	add	r3, r6
   15b5c:	9309      	str	r3, [sp, #36]	; 0x24
   15b5e:	e76a      	b.n	15a36 <_svfiprintf_r+0x52>
   15b60:	fb0c 3202 	mla	r2, ip, r2, r3
   15b64:	460c      	mov	r4, r1
   15b66:	2001      	movs	r0, #1
   15b68:	e7a8      	b.n	15abc <_svfiprintf_r+0xd8>
   15b6a:	2300      	movs	r3, #0
   15b6c:	3401      	adds	r4, #1
   15b6e:	f04f 0c0a 	mov.w	ip, #10
   15b72:	4619      	mov	r1, r3
   15b74:	9305      	str	r3, [sp, #20]
   15b76:	4620      	mov	r0, r4
   15b78:	f810 2b01 	ldrb.w	r2, [r0], #1
   15b7c:	3a30      	subs	r2, #48	; 0x30
   15b7e:	2a09      	cmp	r2, #9
   15b80:	d903      	bls.n	15b8a <_svfiprintf_r+0x1a6>
   15b82:	2b00      	cmp	r3, #0
   15b84:	d0c6      	beq.n	15b14 <_svfiprintf_r+0x130>
   15b86:	9105      	str	r1, [sp, #20]
   15b88:	e7c4      	b.n	15b14 <_svfiprintf_r+0x130>
   15b8a:	fb0c 2101 	mla	r1, ip, r1, r2
   15b8e:	4604      	mov	r4, r0
   15b90:	2301      	movs	r3, #1
   15b92:	e7f0      	b.n	15b76 <_svfiprintf_r+0x192>
   15b94:	ab03      	add	r3, sp, #12
   15b96:	462a      	mov	r2, r5
   15b98:	a904      	add	r1, sp, #16
   15b9a:	4638      	mov	r0, r7
   15b9c:	9300      	str	r3, [sp, #0]
   15b9e:	4b0e      	ldr	r3, [pc, #56]	; (15bd8 <_svfiprintf_r+0x1f4>)
   15ba0:	f3af 8000 	nop.w
   15ba4:	1c42      	adds	r2, r0, #1
   15ba6:	4606      	mov	r6, r0
   15ba8:	d1d6      	bne.n	15b58 <_svfiprintf_r+0x174>
   15baa:	89ab      	ldrh	r3, [r5, #12]
   15bac:	065b      	lsls	r3, r3, #25
   15bae:	f53f af2d 	bmi.w	15a0c <_svfiprintf_r+0x28>
   15bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   15bb4:	e72c      	b.n	15a10 <_svfiprintf_r+0x2c>
   15bb6:	ab03      	add	r3, sp, #12
   15bb8:	462a      	mov	r2, r5
   15bba:	a904      	add	r1, sp, #16
   15bbc:	4638      	mov	r0, r7
   15bbe:	9300      	str	r3, [sp, #0]
   15bc0:	4b05      	ldr	r3, [pc, #20]	; (15bd8 <_svfiprintf_r+0x1f4>)
   15bc2:	f000 f80b 	bl	15bdc <_printf_i>
   15bc6:	e7ed      	b.n	15ba4 <_svfiprintf_r+0x1c0>
   15bc8:	00018df2 	.word	0x00018df2
   15bcc:	00018df8 	.word	0x00018df8
   15bd0:	00018dfc 	.word	0x00018dfc
   15bd4:	00000000 	.word	0x00000000
   15bd8:	0001822f 	.word	0x0001822f

00015bdc <_printf_i>:
   15bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15be0:	7e0f      	ldrb	r7, [r1, #24]
   15be2:	4691      	mov	r9, r2
   15be4:	4680      	mov	r8, r0
   15be6:	460c      	mov	r4, r1
   15be8:	2f78      	cmp	r7, #120	; 0x78
   15bea:	469a      	mov	sl, r3
   15bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
   15bf2:	d807      	bhi.n	15c04 <_printf_i+0x28>
   15bf4:	2f62      	cmp	r7, #98	; 0x62
   15bf6:	d80a      	bhi.n	15c0e <_printf_i+0x32>
   15bf8:	2f00      	cmp	r7, #0
   15bfa:	f000 80e0 	beq.w	15dbe <_printf_i+0x1e2>
   15bfe:	2f58      	cmp	r7, #88	; 0x58
   15c00:	f000 80bb 	beq.w	15d7a <_printf_i+0x19e>
   15c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
   15c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   15c0c:	e03a      	b.n	15c84 <_printf_i+0xa8>
   15c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   15c12:	2b15      	cmp	r3, #21
   15c14:	d8f6      	bhi.n	15c04 <_printf_i+0x28>
   15c16:	a101      	add	r1, pc, #4	; (adr r1, 15c1c <_printf_i+0x40>)
   15c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15c1c:	00015c75 	.word	0x00015c75
   15c20:	00015c89 	.word	0x00015c89
   15c24:	00015c05 	.word	0x00015c05
   15c28:	00015c05 	.word	0x00015c05
   15c2c:	00015c05 	.word	0x00015c05
   15c30:	00015c05 	.word	0x00015c05
   15c34:	00015c89 	.word	0x00015c89
   15c38:	00015c05 	.word	0x00015c05
   15c3c:	00015c05 	.word	0x00015c05
   15c40:	00015c05 	.word	0x00015c05
   15c44:	00015c05 	.word	0x00015c05
   15c48:	00015da5 	.word	0x00015da5
   15c4c:	00015d19 	.word	0x00015d19
   15c50:	00015d5b 	.word	0x00015d5b
   15c54:	00015c05 	.word	0x00015c05
   15c58:	00015c05 	.word	0x00015c05
   15c5c:	00015dc7 	.word	0x00015dc7
   15c60:	00015c05 	.word	0x00015c05
   15c64:	00015d19 	.word	0x00015d19
   15c68:	00015c05 	.word	0x00015c05
   15c6c:	00015c05 	.word	0x00015c05
   15c70:	00015d63 	.word	0x00015d63
   15c74:	682b      	ldr	r3, [r5, #0]
   15c76:	f104 0642 	add.w	r6, r4, #66	; 0x42
   15c7a:	1d1a      	adds	r2, r3, #4
   15c7c:	681b      	ldr	r3, [r3, #0]
   15c7e:	602a      	str	r2, [r5, #0]
   15c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   15c84:	2301      	movs	r3, #1
   15c86:	e0ab      	b.n	15de0 <_printf_i+0x204>
   15c88:	6823      	ldr	r3, [r4, #0]
   15c8a:	6829      	ldr	r1, [r5, #0]
   15c8c:	061f      	lsls	r7, r3, #24
   15c8e:	f101 0004 	add.w	r0, r1, #4
   15c92:	6028      	str	r0, [r5, #0]
   15c94:	d501      	bpl.n	15c9a <_printf_i+0xbe>
   15c96:	680d      	ldr	r5, [r1, #0]
   15c98:	e003      	b.n	15ca2 <_printf_i+0xc6>
   15c9a:	065e      	lsls	r6, r3, #25
   15c9c:	d5fb      	bpl.n	15c96 <_printf_i+0xba>
   15c9e:	f9b1 5000 	ldrsh.w	r5, [r1]
   15ca2:	2d00      	cmp	r5, #0
   15ca4:	6861      	ldr	r1, [r4, #4]
   15ca6:	da7a      	bge.n	15d9e <_printf_i+0x1c2>
   15ca8:	202d      	movs	r0, #45	; 0x2d
   15caa:	2900      	cmp	r1, #0
   15cac:	60a1      	str	r1, [r4, #8]
   15cae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   15cb2:	da2d      	bge.n	15d10 <_printf_i+0x134>
   15cb4:	426d      	negs	r5, r5
   15cb6:	485e      	ldr	r0, [pc, #376]	; (15e30 <_printf_i+0x254>)
   15cb8:	230a      	movs	r3, #10
   15cba:	4616      	mov	r6, r2
   15cbc:	fbb5 f1f3 	udiv	r1, r5, r3
   15cc0:	fb03 5711 	mls	r7, r3, r1, r5
   15cc4:	5dc7      	ldrb	r7, [r0, r7]
   15cc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
   15cca:	462f      	mov	r7, r5
   15ccc:	460d      	mov	r5, r1
   15cce:	42bb      	cmp	r3, r7
   15cd0:	d9f4      	bls.n	15cbc <_printf_i+0xe0>
   15cd2:	2b08      	cmp	r3, #8
   15cd4:	d10b      	bne.n	15cee <_printf_i+0x112>
   15cd6:	6823      	ldr	r3, [r4, #0]
   15cd8:	07df      	lsls	r7, r3, #31
   15cda:	d508      	bpl.n	15cee <_printf_i+0x112>
   15cdc:	6923      	ldr	r3, [r4, #16]
   15cde:	6861      	ldr	r1, [r4, #4]
   15ce0:	4299      	cmp	r1, r3
   15ce2:	bfde      	ittt	le
   15ce4:	2330      	movle	r3, #48	; 0x30
   15ce6:	f806 3c01 	strble.w	r3, [r6, #-1]
   15cea:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   15cee:	1b92      	subs	r2, r2, r6
   15cf0:	6122      	str	r2, [r4, #16]
   15cf2:	464b      	mov	r3, r9
   15cf4:	aa03      	add	r2, sp, #12
   15cf6:	4621      	mov	r1, r4
   15cf8:	4640      	mov	r0, r8
   15cfa:	f8cd a000 	str.w	sl, [sp]
   15cfe:	f002 faf1 	bl	182e4 <_printf_common>
   15d02:	3001      	adds	r0, #1
   15d04:	d171      	bne.n	15dea <_printf_i+0x20e>
   15d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d0a:	b004      	add	sp, #16
   15d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d10:	f023 0304 	bic.w	r3, r3, #4
   15d14:	6023      	str	r3, [r4, #0]
   15d16:	e7cd      	b.n	15cb4 <_printf_i+0xd8>
   15d18:	682b      	ldr	r3, [r5, #0]
   15d1a:	6820      	ldr	r0, [r4, #0]
   15d1c:	1d19      	adds	r1, r3, #4
   15d1e:	6029      	str	r1, [r5, #0]
   15d20:	0605      	lsls	r5, r0, #24
   15d22:	d501      	bpl.n	15d28 <_printf_i+0x14c>
   15d24:	681d      	ldr	r5, [r3, #0]
   15d26:	e002      	b.n	15d2e <_printf_i+0x152>
   15d28:	0641      	lsls	r1, r0, #25
   15d2a:	d5fb      	bpl.n	15d24 <_printf_i+0x148>
   15d2c:	881d      	ldrh	r5, [r3, #0]
   15d2e:	2f6f      	cmp	r7, #111	; 0x6f
   15d30:	483f      	ldr	r0, [pc, #252]	; (15e30 <_printf_i+0x254>)
   15d32:	bf14      	ite	ne
   15d34:	230a      	movne	r3, #10
   15d36:	2308      	moveq	r3, #8
   15d38:	2100      	movs	r1, #0
   15d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   15d3e:	6866      	ldr	r6, [r4, #4]
   15d40:	2e00      	cmp	r6, #0
   15d42:	60a6      	str	r6, [r4, #8]
   15d44:	dbb9      	blt.n	15cba <_printf_i+0xde>
   15d46:	6821      	ldr	r1, [r4, #0]
   15d48:	f021 0104 	bic.w	r1, r1, #4
   15d4c:	6021      	str	r1, [r4, #0]
   15d4e:	2d00      	cmp	r5, #0
   15d50:	d1b3      	bne.n	15cba <_printf_i+0xde>
   15d52:	2e00      	cmp	r6, #0
   15d54:	d1b1      	bne.n	15cba <_printf_i+0xde>
   15d56:	4616      	mov	r6, r2
   15d58:	e7bb      	b.n	15cd2 <_printf_i+0xf6>
   15d5a:	6823      	ldr	r3, [r4, #0]
   15d5c:	f043 0320 	orr.w	r3, r3, #32
   15d60:	6023      	str	r3, [r4, #0]
   15d62:	2778      	movs	r7, #120	; 0x78
   15d64:	4833      	ldr	r0, [pc, #204]	; (15e34 <_printf_i+0x258>)
   15d66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   15d6a:	6829      	ldr	r1, [r5, #0]
   15d6c:	6823      	ldr	r3, [r4, #0]
   15d6e:	1d0e      	adds	r6, r1, #4
   15d70:	602e      	str	r6, [r5, #0]
   15d72:	061e      	lsls	r6, r3, #24
   15d74:	d503      	bpl.n	15d7e <_printf_i+0x1a2>
   15d76:	680d      	ldr	r5, [r1, #0]
   15d78:	e004      	b.n	15d84 <_printf_i+0x1a8>
   15d7a:	482d      	ldr	r0, [pc, #180]	; (15e30 <_printf_i+0x254>)
   15d7c:	e7f3      	b.n	15d66 <_printf_i+0x18a>
   15d7e:	065d      	lsls	r5, r3, #25
   15d80:	d5f9      	bpl.n	15d76 <_printf_i+0x19a>
   15d82:	880d      	ldrh	r5, [r1, #0]
   15d84:	07d9      	lsls	r1, r3, #31
   15d86:	bf44      	itt	mi
   15d88:	f043 0320 	orrmi.w	r3, r3, #32
   15d8c:	6023      	strmi	r3, [r4, #0]
   15d8e:	b10d      	cbz	r5, 15d94 <_printf_i+0x1b8>
   15d90:	2310      	movs	r3, #16
   15d92:	e7d1      	b.n	15d38 <_printf_i+0x15c>
   15d94:	6823      	ldr	r3, [r4, #0]
   15d96:	f023 0320 	bic.w	r3, r3, #32
   15d9a:	6023      	str	r3, [r4, #0]
   15d9c:	e7f8      	b.n	15d90 <_printf_i+0x1b4>
   15d9e:	4824      	ldr	r0, [pc, #144]	; (15e30 <_printf_i+0x254>)
   15da0:	230a      	movs	r3, #10
   15da2:	e7cc      	b.n	15d3e <_printf_i+0x162>
   15da4:	682b      	ldr	r3, [r5, #0]
   15da6:	6826      	ldr	r6, [r4, #0]
   15da8:	1d18      	adds	r0, r3, #4
   15daa:	6961      	ldr	r1, [r4, #20]
   15dac:	6028      	str	r0, [r5, #0]
   15dae:	0635      	lsls	r5, r6, #24
   15db0:	681b      	ldr	r3, [r3, #0]
   15db2:	d501      	bpl.n	15db8 <_printf_i+0x1dc>
   15db4:	6019      	str	r1, [r3, #0]
   15db6:	e002      	b.n	15dbe <_printf_i+0x1e2>
   15db8:	0670      	lsls	r0, r6, #25
   15dba:	d5fb      	bpl.n	15db4 <_printf_i+0x1d8>
   15dbc:	8019      	strh	r1, [r3, #0]
   15dbe:	2300      	movs	r3, #0
   15dc0:	4616      	mov	r6, r2
   15dc2:	6123      	str	r3, [r4, #16]
   15dc4:	e795      	b.n	15cf2 <_printf_i+0x116>
   15dc6:	682b      	ldr	r3, [r5, #0]
   15dc8:	2100      	movs	r1, #0
   15dca:	1d1a      	adds	r2, r3, #4
   15dcc:	602a      	str	r2, [r5, #0]
   15dce:	681e      	ldr	r6, [r3, #0]
   15dd0:	6862      	ldr	r2, [r4, #4]
   15dd2:	4630      	mov	r0, r6
   15dd4:	f002 faf8 	bl	183c8 <memchr>
   15dd8:	b108      	cbz	r0, 15dde <_printf_i+0x202>
   15dda:	1b80      	subs	r0, r0, r6
   15ddc:	6060      	str	r0, [r4, #4]
   15dde:	6863      	ldr	r3, [r4, #4]
   15de0:	6123      	str	r3, [r4, #16]
   15de2:	2300      	movs	r3, #0
   15de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15de8:	e783      	b.n	15cf2 <_printf_i+0x116>
   15dea:	6923      	ldr	r3, [r4, #16]
   15dec:	4632      	mov	r2, r6
   15dee:	4649      	mov	r1, r9
   15df0:	4640      	mov	r0, r8
   15df2:	47d0      	blx	sl
   15df4:	3001      	adds	r0, #1
   15df6:	d086      	beq.n	15d06 <_printf_i+0x12a>
   15df8:	6823      	ldr	r3, [r4, #0]
   15dfa:	079b      	lsls	r3, r3, #30
   15dfc:	d414      	bmi.n	15e28 <_printf_i+0x24c>
   15dfe:	68e0      	ldr	r0, [r4, #12]
   15e00:	9b03      	ldr	r3, [sp, #12]
   15e02:	4298      	cmp	r0, r3
   15e04:	bfb8      	it	lt
   15e06:	4618      	movlt	r0, r3
   15e08:	e77f      	b.n	15d0a <_printf_i+0x12e>
   15e0a:	2301      	movs	r3, #1
   15e0c:	4632      	mov	r2, r6
   15e0e:	4649      	mov	r1, r9
   15e10:	4640      	mov	r0, r8
   15e12:	47d0      	blx	sl
   15e14:	3001      	adds	r0, #1
   15e16:	f43f af76 	beq.w	15d06 <_printf_i+0x12a>
   15e1a:	3501      	adds	r5, #1
   15e1c:	68e3      	ldr	r3, [r4, #12]
   15e1e:	9903      	ldr	r1, [sp, #12]
   15e20:	1a5b      	subs	r3, r3, r1
   15e22:	42ab      	cmp	r3, r5
   15e24:	dcf1      	bgt.n	15e0a <_printf_i+0x22e>
   15e26:	e7ea      	b.n	15dfe <_printf_i+0x222>
   15e28:	2500      	movs	r5, #0
   15e2a:	f104 0619 	add.w	r6, r4, #25
   15e2e:	e7f5      	b.n	15e1c <_printf_i+0x240>
   15e30:	00018e03 	.word	0x00018e03
   15e34:	00018e14 	.word	0x00018e14

00015e38 <z_impl_gpio_pin_configure>:
{
   15e38:	b538      	push	{r3, r4, r5, lr}
   15e3a:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   15e3c:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   15e3e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   15e40:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   15e44:	d007      	beq.n	15e56 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   15e46:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   15e4a:	d004      	beq.n	15e56 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   15e4c:	f012 0f01 	tst.w	r2, #1
   15e50:	d001      	beq.n	15e56 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   15e52:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   15e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   15e5a:	f013 0f01 	tst.w	r3, #1
   15e5e:	d00a      	beq.n	15e76 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   15e60:	6823      	ldr	r3, [r4, #0]
   15e62:	f04f 0c01 	mov.w	ip, #1
   15e66:	fa0c fc01 	lsl.w	ip, ip, r1
   15e6a:	ea43 030c 	orr.w	r3, r3, ip
   15e6e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   15e70:	682b      	ldr	r3, [r5, #0]
   15e72:	4798      	blx	r3
}
   15e74:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15e76:	6823      	ldr	r3, [r4, #0]
   15e78:	f04f 0c01 	mov.w	ip, #1
   15e7c:	fa0c fc01 	lsl.w	ip, ip, r1
   15e80:	ea23 030c 	bic.w	r3, r3, ip
   15e84:	6023      	str	r3, [r4, #0]
   15e86:	e7f3      	b.n	15e70 <z_impl_gpio_pin_configure+0x38>

00015e88 <gpio_pin_configure_dt>:
{
   15e88:	b508      	push	{r3, lr}
   15e8a:	4603      	mov	r3, r0
   15e8c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   15e8e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   15e90:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   15e92:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   15e94:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   15e98:	f7ff ffce 	bl	15e38 <z_impl_gpio_pin_configure>
}
   15e9c:	bd08      	pop	{r3, pc}

00015e9e <gpio_port_get>:
{
   15e9e:	b538      	push	{r3, r4, r5, lr}
   15ea0:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   15ea2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   15ea4:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   15ea6:	685b      	ldr	r3, [r3, #4]
   15ea8:	4798      	blx	r3
	if (ret == 0) {
   15eaa:	b918      	cbnz	r0, 15eb4 <gpio_port_get+0x16>
		*value ^= data->invert;
   15eac:	6823      	ldr	r3, [r4, #0]
   15eae:	682a      	ldr	r2, [r5, #0]
   15eb0:	4053      	eors	r3, r2
   15eb2:	6023      	str	r3, [r4, #0]
}
   15eb4:	bd38      	pop	{r3, r4, r5, pc}

00015eb6 <gpio_pin_get>:
{
   15eb6:	b510      	push	{r4, lr}
   15eb8:	b082      	sub	sp, #8
   15eba:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   15ebc:	a901      	add	r1, sp, #4
   15ebe:	f7ff ffee 	bl	15e9e <gpio_port_get>
	if (ret == 0) {
   15ec2:	b930      	cbnz	r0, 15ed2 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   15ec4:	2301      	movs	r3, #1
   15ec6:	40a3      	lsls	r3, r4
   15ec8:	9a01      	ldr	r2, [sp, #4]
   15eca:	4213      	tst	r3, r2
   15ecc:	bf14      	ite	ne
   15ece:	2001      	movne	r0, #1
   15ed0:	2000      	moveq	r0, #0
}
   15ed2:	b002      	add	sp, #8
   15ed4:	bd10      	pop	{r4, pc}

00015ed6 <gpio_pin_set_raw>:
{
   15ed6:	b508      	push	{r3, lr}
	if (value != 0)	{
   15ed8:	b132      	cbz	r2, 15ee8 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   15eda:	2301      	movs	r3, #1
   15edc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   15ee0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   15ee2:	68db      	ldr	r3, [r3, #12]
   15ee4:	4798      	blx	r3
}
   15ee6:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   15ee8:	2301      	movs	r3, #1
   15eea:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   15eee:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   15ef0:	691b      	ldr	r3, [r3, #16]
   15ef2:	4798      	blx	r3
	return ret;
   15ef4:	e7f7      	b.n	15ee6 <gpio_pin_set_raw+0x10>

00015ef6 <gpio_pin_set>:
{
   15ef6:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   15ef8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   15efa:	681c      	ldr	r4, [r3, #0]
   15efc:	2301      	movs	r3, #1
   15efe:	408b      	lsls	r3, r1
   15f00:	421c      	tst	r4, r3
   15f02:	d002      	beq.n	15f0a <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   15f04:	fab2 f282 	clz	r2, r2
   15f08:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   15f0a:	f7ff ffe4 	bl	15ed6 <gpio_pin_set_raw>
}
   15f0e:	bd10      	pop	{r4, pc}

00015f10 <k_msleep>:
{
   15f10:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   15f12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   15f16:	17c1      	asrs	r1, r0, #31
   15f18:	03c9      	lsls	r1, r1, #15
   15f1a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   15f1e:	03c0      	lsls	r0, r0, #15
   15f20:	f240 33e7 	movw	r3, #999	; 0x3e7
   15f24:	18c0      	adds	r0, r0, r3
   15f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15f2a:	f04f 0300 	mov.w	r3, #0
   15f2e:	f141 0100 	adc.w	r1, r1, #0
   15f32:	f7fa f907 	bl	10144 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   15f36:	f7ff fa49 	bl	153cc <z_impl_k_sleep>
}
   15f3a:	bd08      	pop	{r3, pc}

00015f3c <arch_printk_char_out>:
}
   15f3c:	2000      	movs	r0, #0
   15f3e:	4770      	bx	lr

00015f40 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   15f40:	b40f      	push	{r0, r1, r2, r3}
   15f42:	b500      	push	{lr}
   15f44:	b083      	sub	sp, #12
   15f46:	a904      	add	r1, sp, #16
   15f48:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   15f4c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   15f4e:	f7fa faa7 	bl	104a0 <vprintk>

	va_end(ap);
}
   15f52:	b003      	add	sp, #12
   15f54:	f85d eb04 	ldr.w	lr, [sp], #4
   15f58:	b004      	add	sp, #16
   15f5a:	4770      	bx	lr

00015f5c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   15f5c:	b508      	push	{r3, lr}
   15f5e:	4604      	mov	r4, r0
   15f60:	4608      	mov	r0, r1
   15f62:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   15f64:	461a      	mov	r2, r3
   15f66:	47a0      	blx	r4
	return z_impl_z_current_get();
   15f68:	f7ff fa5a 	bl	15420 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   15f6c:	f7fb fbaa 	bl	116c4 <z_impl_k_thread_abort>

00015f70 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   15f70:	00c9      	lsls	r1, r1, #3
   15f72:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   15f74:	4408      	add	r0, r1
   15f76:	4770      	bx	lr

00015f78 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15f78:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   15f7c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   15f80:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   15f82:	4299      	cmp	r1, r3
   15f84:	d00c      	beq.n	15fa0 <free_list_remove_bidx+0x28>
   15f86:	4484      	add	ip, r0
   15f88:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   15f8c:	3204      	adds	r2, #4
   15f8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15f92:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   15f94:	3206      	adds	r2, #6
   15f96:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   15f98:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   15f9a:	3304      	adds	r3, #4
   15f9c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   15f9e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   15fa0:	68c3      	ldr	r3, [r0, #12]
   15fa2:	2101      	movs	r1, #1
   15fa4:	4091      	lsls	r1, r2
   15fa6:	ea23 0301 	bic.w	r3, r3, r1
   15faa:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   15fac:	3204      	adds	r2, #4
   15fae:	2300      	movs	r3, #0
   15fb0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   15fb4:	4770      	bx	lr

00015fb6 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   15fb6:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   15fb8:	1d13      	adds	r3, r2, #4
   15fba:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   15fbe:	b974      	cbnz	r4, 15fde <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   15fc0:	68c3      	ldr	r3, [r0, #12]
   15fc2:	2401      	movs	r4, #1
   15fc4:	4094      	lsls	r4, r2
   15fc6:	4323      	orrs	r3, r4
   15fc8:	60c3      	str	r3, [r0, #12]
		b->next = c;
   15fca:	3204      	adds	r2, #4
   15fcc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   15fd0:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   15fd2:	1d1a      	adds	r2, r3, #4
   15fd4:	b289      	uxth	r1, r1
   15fd6:	5281      	strh	r1, [r0, r2]
   15fd8:	3306      	adds	r3, #6
   15fda:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   15fdc:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   15fde:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   15fe0:	3204      	adds	r2, #4
   15fe2:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   15fe4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   15fe8:	f10c 0e04 	add.w	lr, ip, #4
   15fec:	f820 300e 	strh.w	r3, [r0, lr]
   15ff0:	f10c 0c06 	add.w	ip, ip, #6
   15ff4:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   15ff8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   15ffa:	3306      	adds	r3, #6
   15ffc:	b289      	uxth	r1, r1
   15ffe:	52c1      	strh	r1, [r0, r3]
   16000:	5281      	strh	r1, [r0, r2]
   16002:	e7eb      	b.n	15fdc <free_list_add_bidx+0x26>

00016004 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   16004:	b500      	push	{lr}
	void *cmem = &buf[c];
   16006:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   16008:	3302      	adds	r3, #2
   1600a:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1600e:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   16012:	1a89      	subs	r1, r1, r2
   16014:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16018:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1601c:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16020:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   16024:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   16026:	3302      	adds	r3, #2
   16028:	f820 e003 	strh.w	lr, [r0, r3]
   1602c:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   16030:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   16032:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   16036:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1603a:	f85d fb04 	ldr.w	pc, [sp], #4

0001603e <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1603e:	b500      	push	{lr}
	void *cmem = &buf[c];
   16040:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   16042:	3102      	adds	r1, #2
   16044:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   16048:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   1604c:	f10c 0c02 	add.w	ip, ip, #2
   16050:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   16054:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16056:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1605a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1605e:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   16062:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   16066:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   1606a:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1606e:	f85d fb04 	ldr.w	pc, [sp], #4

00016072 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16072:	3904      	subs	r1, #4
   16074:	1a08      	subs	r0, r1, r0
}
   16076:	08c0      	lsrs	r0, r0, #3
   16078:	4770      	bx	lr

0001607a <free_list_remove>:
{
   1607a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1607c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   16080:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   16082:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   16084:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   16088:	f1c2 021f 	rsb	r2, r2, #31
   1608c:	f7ff ff74 	bl	15f78 <free_list_remove_bidx>
}
   16090:	bd08      	pop	{r3, pc}

00016092 <free_list_add>:
{
   16092:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   16094:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   16098:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1609a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   1609c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   160a0:	f1c2 021f 	rsb	r2, r2, #31
   160a4:	f7ff ff87 	bl	15fb6 <free_list_add_bidx>
}
   160a8:	bd08      	pop	{r3, pc}

000160aa <free_chunk>:
{
   160aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160ac:	4604      	mov	r4, r0
   160ae:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   160b0:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   160b2:	1cb7      	adds	r7, r6, #2
   160b4:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   160b6:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   160ba:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   160be:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   160c0:	f013 0f01 	tst.w	r3, #1
   160c4:	d00c      	beq.n	160e0 <free_chunk+0x36>
   160c6:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   160c8:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   160ca:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   160ce:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   160d0:	f013 0f01 	tst.w	r3, #1
   160d4:	d00e      	beq.n	160f4 <free_chunk+0x4a>
	free_list_add(h, c);
   160d6:	4629      	mov	r1, r5
   160d8:	4620      	mov	r0, r4
   160da:	f7ff ffda 	bl	16092 <free_list_add>
}
   160de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   160e0:	f7ff ffcb 	bl	1607a <free_list_remove>
   160e4:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   160e6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   160ea:	4629      	mov	r1, r5
   160ec:	4620      	mov	r0, r4
   160ee:	f7ff ffa6 	bl	1603e <merge_chunks>
   160f2:	e7e8      	b.n	160c6 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   160f4:	4620      	mov	r0, r4
   160f6:	f7ff ffc0 	bl	1607a <free_list_remove>
   160fa:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   160fc:	462a      	mov	r2, r5
   160fe:	1a69      	subs	r1, r5, r1
   16100:	4620      	mov	r0, r4
   16102:	f7ff ff9c 	bl	1603e <merge_chunks>
   16106:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   16108:	1aed      	subs	r5, r5, r3
   1610a:	e7e4      	b.n	160d6 <free_chunk+0x2c>

0001610c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1610c:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   1610e:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   16112:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   16116:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1611a:	b1cd      	cbz	r5, 16150 <alloc_chunk+0x44>
   1611c:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   16120:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   16124:	1d14      	adds	r4, r2, #4
   16126:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1612a:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   1612e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   16132:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   16134:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   16138:	d914      	bls.n	16164 <alloc_chunk+0x58>
   1613a:	4484      	add	ip, r0
   1613c:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   16140:	1d16      	adds	r6, r2, #4
   16142:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   16146:	f1be 0e01 	subs.w	lr, lr, #1
   1614a:	d001      	beq.n	16150 <alloc_chunk+0x44>
   1614c:	42a5      	cmp	r5, r4
   1614e:	d1e9      	bne.n	16124 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   16150:	68c4      	ldr	r4, [r0, #12]
   16152:	f1c3 0220 	rsb	r2, r3, #32
   16156:	2301      	movs	r3, #1
   16158:	4093      	lsls	r3, r2
   1615a:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1615c:	401c      	ands	r4, r3
   1615e:	d105      	bne.n	1616c <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   16160:	4620      	mov	r0, r4
   16162:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   16164:	4621      	mov	r1, r4
   16166:	f7ff ff07 	bl	15f78 <free_list_remove_bidx>
				return c;
   1616a:	e7f9      	b.n	16160 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1616c:	fa94 f2a4 	rbit	r2, r4
   16170:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   16174:	1d13      	adds	r3, r2, #4
   16176:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1617a:	4621      	mov	r1, r4
   1617c:	f7ff fefc 	bl	15f78 <free_list_remove_bidx>
		return c;
   16180:	e7ee      	b.n	16160 <alloc_chunk+0x54>

00016182 <sys_heap_free>:
	if (mem == NULL) {
   16182:	b179      	cbz	r1, 161a4 <sys_heap_free+0x22>
{
   16184:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   16186:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   16188:	4620      	mov	r0, r4
   1618a:	f7ff ff72 	bl	16072 <mem_to_chunkid>
   1618e:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   16190:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   16194:	8853      	ldrh	r3, [r2, #2]
   16196:	f023 0301 	bic.w	r3, r3, #1
   1619a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1619c:	4620      	mov	r0, r4
   1619e:	f7ff ff84 	bl	160aa <free_chunk>
}
   161a2:	bd10      	pop	{r4, pc}
   161a4:	4770      	bx	lr

000161a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   161a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   161a8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   161aa:	b341      	cbz	r1, 161fe <sys_heap_alloc+0x58>
   161ac:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   161ae:	68aa      	ldr	r2, [r5, #8]
   161b0:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   161b4:	d925      	bls.n	16202 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   161b6:	330b      	adds	r3, #11
   161b8:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   161ba:	4621      	mov	r1, r4
   161bc:	4628      	mov	r0, r5
   161be:	f7ff ffa5 	bl	1610c <alloc_chunk>
	if (c == 0U) {
   161c2:	4607      	mov	r7, r0
   161c4:	b1f8      	cbz	r0, 16206 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   161c6:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   161c8:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   161cc:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   161ce:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   161d2:	d309      	bcc.n	161e8 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   161d4:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   161d6:	885a      	ldrh	r2, [r3, #2]
   161d8:	f042 0201 	orr.w	r2, r2, #1
   161dc:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   161de:	4639      	mov	r1, r7
   161e0:	4628      	mov	r0, r5
   161e2:	f7ff fec5 	bl	15f70 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   161e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   161e8:	4404      	add	r4, r0
   161ea:	4622      	mov	r2, r4
   161ec:	4601      	mov	r1, r0
   161ee:	4628      	mov	r0, r5
   161f0:	f7ff ff08 	bl	16004 <split_chunks>
		free_list_add(h, c + chunk_sz);
   161f4:	4621      	mov	r1, r4
   161f6:	4628      	mov	r0, r5
   161f8:	f7ff ff4b 	bl	16092 <free_list_add>
   161fc:	e7ea      	b.n	161d4 <sys_heap_alloc+0x2e>
		return NULL;
   161fe:	2000      	movs	r0, #0
   16200:	e7f1      	b.n	161e6 <sys_heap_alloc+0x40>
   16202:	2000      	movs	r0, #0
   16204:	e7ef      	b.n	161e6 <sys_heap_alloc+0x40>
		return NULL;
   16206:	2000      	movs	r0, #0
   16208:	e7ed      	b.n	161e6 <sys_heap_alloc+0x40>

0001620a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1620a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1620e:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   16210:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   16212:	424b      	negs	r3, r1
   16214:	400b      	ands	r3, r1
	if (align != rew) {
   16216:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1621a:	ea19 0901 	ands.w	r9, r9, r1
   1621e:	d004      	beq.n	1622a <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   16220:	2b03      	cmp	r3, #3
   16222:	d847      	bhi.n	162b4 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   16224:	464c      	mov	r4, r9
	rew = align & -align;
   16226:	4699      	mov	r9, r3
   16228:	e003      	b.n	16232 <sys_heap_aligned_alloc+0x28>
   1622a:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   1622c:	2904      	cmp	r1, #4
   1622e:	d93c      	bls.n	162aa <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   16230:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16232:	2d00      	cmp	r5, #0
   16234:	d056      	beq.n	162e4 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   16236:	68b2      	ldr	r2, [r6, #8]
   16238:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   1623c:	d955      	bls.n	162ea <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1623e:	1961      	adds	r1, r4, r5
   16240:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16242:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16244:	08c9      	lsrs	r1, r1, #3
   16246:	4630      	mov	r0, r6
   16248:	f7ff ff60 	bl	1610c <alloc_chunk>

	if (c0 == 0) {
   1624c:	4607      	mov	r7, r0
   1624e:	2800      	cmp	r0, #0
   16250:	d04e      	beq.n	162f0 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   16252:	4601      	mov	r1, r0
   16254:	4630      	mov	r0, r6
   16256:	f7ff fe8b 	bl	15f70 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1625a:	eb00 0809 	add.w	r8, r0, r9
   1625e:	44a0      	add	r8, r4
   16260:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   16264:	4264      	negs	r4, r4
   16266:	ea08 0804 	and.w	r8, r8, r4
   1626a:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1626e:	eb08 0405 	add.w	r4, r8, r5
   16272:	3407      	adds	r4, #7
   16274:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   16278:	4641      	mov	r1, r8
   1627a:	4630      	mov	r0, r6
   1627c:	f7ff fef9 	bl	16072 <mem_to_chunkid>
   16280:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   16282:	1ba4      	subs	r4, r4, r6
   16284:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   16286:	4287      	cmp	r7, r0
   16288:	d318      	bcc.n	162bc <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   1628a:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   1628c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   16290:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   16292:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   16296:	429c      	cmp	r4, r3
   16298:	d31a      	bcc.n	162d0 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   1629a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1629c:	8873      	ldrh	r3, [r6, #2]
   1629e:	f043 0301 	orr.w	r3, r3, #1
   162a2:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   162a4:	4640      	mov	r0, r8
   162a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   162aa:	4611      	mov	r1, r2
   162ac:	f7ff ff7b 	bl	161a6 <sys_heap_alloc>
   162b0:	4680      	mov	r8, r0
   162b2:	e7f7      	b.n	162a4 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   162b4:	464c      	mov	r4, r9
	rew = align & -align;
   162b6:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   162b8:	2304      	movs	r3, #4
   162ba:	e7ba      	b.n	16232 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   162bc:	4602      	mov	r2, r0
   162be:	4639      	mov	r1, r7
   162c0:	4630      	mov	r0, r6
   162c2:	f7ff fe9f 	bl	16004 <split_chunks>
		free_list_add(h, c0);
   162c6:	4639      	mov	r1, r7
   162c8:	4630      	mov	r0, r6
   162ca:	f7ff fee2 	bl	16092 <free_list_add>
   162ce:	e7dc      	b.n	1628a <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   162d0:	4622      	mov	r2, r4
   162d2:	4629      	mov	r1, r5
   162d4:	4630      	mov	r0, r6
   162d6:	f7ff fe95 	bl	16004 <split_chunks>
		free_list_add(h, c_end);
   162da:	4621      	mov	r1, r4
   162dc:	4630      	mov	r0, r6
   162de:	f7ff fed8 	bl	16092 <free_list_add>
   162e2:	e7da      	b.n	1629a <sys_heap_aligned_alloc+0x90>
		return NULL;
   162e4:	f04f 0800 	mov.w	r8, #0
   162e8:	e7dc      	b.n	162a4 <sys_heap_aligned_alloc+0x9a>
   162ea:	f04f 0800 	mov.w	r8, #0
   162ee:	e7d9      	b.n	162a4 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   162f0:	f04f 0800 	mov.w	r8, #0
   162f4:	e7d6      	b.n	162a4 <sys_heap_aligned_alloc+0x9a>

000162f6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   162f6:	b570      	push	{r4, r5, r6, lr}
   162f8:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   162fa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   162fc:	1dc8      	adds	r0, r1, #7
   162fe:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16302:	440a      	add	r2, r1
   16304:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16308:	1a12      	subs	r2, r2, r0
   1630a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1630c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1630e:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   16310:	2300      	movs	r3, #0
   16312:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   16314:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16318:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1631c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   16320:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16322:	1dce      	adds	r6, r1, #7
   16324:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16326:	e005      	b.n	16334 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   16328:	f103 0c04 	add.w	ip, r3, #4
   1632c:	2400      	movs	r4, #0
   1632e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   16332:	3301      	adds	r3, #1
   16334:	4573      	cmp	r3, lr
   16336:	dbf7      	blt.n	16328 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16338:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   1633a:	b2a4      	uxth	r4, r4
   1633c:	8044      	strh	r4, [r0, #2]
   1633e:	f04f 0c00 	mov.w	ip, #0
   16342:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16346:	f044 0401 	orr.w	r4, r4, #1
   1634a:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1634c:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1634e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   16352:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   16356:	1ca5      	adds	r5, r4, #2
   16358:	f820 e005 	strh.w	lr, [r0, r5]
   1635c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1635e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   16362:	1c95      	adds	r5, r2, #2
   16364:	f820 c005 	strh.w	ip, [r0, r5]
   16368:	4402      	add	r2, r0
   1636a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1636c:	8853      	ldrh	r3, [r2, #2]
   1636e:	f043 0301 	orr.w	r3, r3, #1
   16372:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   16374:	f7ff fe8d 	bl	16092 <free_list_add>
}
   16378:	bd70      	pop	{r4, r5, r6, pc}

0001637a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1637a:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1637e:	8b03      	ldrh	r3, [r0, #24]
   16380:	f023 0307 	bic.w	r3, r3, #7
   16384:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   16386:	8303      	strh	r3, [r0, #24]
}
   16388:	4770      	bx	lr

0001638a <notify_monitors>:
{
   1638a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1638e:	4606      	mov	r6, r0
   16390:	460f      	mov	r7, r1
   16392:	4690      	mov	r8, r2
	return list->head;
   16394:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   16396:	b121      	cbz	r1, 163a2 <notify_monitors+0x18>
	return node->next;
   16398:	680c      	ldr	r4, [r1, #0]
   1639a:	b13c      	cbz	r4, 163ac <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1639c:	b931      	cbnz	r1, 163ac <notify_monitors+0x22>
   1639e:	460c      	mov	r4, r1
   163a0:	e004      	b.n	163ac <notify_monitors+0x22>
   163a2:	460c      	mov	r4, r1
   163a4:	e002      	b.n	163ac <notify_monitors+0x22>
   163a6:	4623      	mov	r3, r4
   163a8:	4621      	mov	r1, r4
   163aa:	461c      	mov	r4, r3
   163ac:	b169      	cbz	r1, 163ca <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   163ae:	684d      	ldr	r5, [r1, #4]
   163b0:	4643      	mov	r3, r8
   163b2:	463a      	mov	r2, r7
   163b4:	4630      	mov	r0, r6
   163b6:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   163b8:	2c00      	cmp	r4, #0
   163ba:	d0f4      	beq.n	163a6 <notify_monitors+0x1c>
	return node->next;
   163bc:	6823      	ldr	r3, [r4, #0]
   163be:	2b00      	cmp	r3, #0
   163c0:	d0f2      	beq.n	163a8 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   163c2:	2c00      	cmp	r4, #0
   163c4:	d1f0      	bne.n	163a8 <notify_monitors+0x1e>
   163c6:	4623      	mov	r3, r4
   163c8:	e7ee      	b.n	163a8 <notify_monitors+0x1e>
}
   163ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000163ce <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   163ce:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   163d0:	f013 0307 	ands.w	r3, r3, #7
   163d4:	d103      	bne.n	163de <process_recheck+0x10>
	return list->head;
   163d6:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   163d8:	b10a      	cbz	r2, 163de <process_recheck+0x10>
		evt = EVT_START;
   163da:	2003      	movs	r0, #3
   163dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   163de:	2b02      	cmp	r3, #2
   163e0:	d003      	beq.n	163ea <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   163e2:	2b01      	cmp	r3, #1
   163e4:	d006      	beq.n	163f4 <process_recheck+0x26>
	int evt = EVT_NOP;
   163e6:	2000      	movs	r0, #0
   163e8:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   163ea:	8b42      	ldrh	r2, [r0, #26]
   163ec:	2a00      	cmp	r2, #0
   163ee:	d1f8      	bne.n	163e2 <process_recheck+0x14>
		evt = EVT_STOP;
   163f0:	2004      	movs	r0, #4
   163f2:	4770      	bx	lr
   163f4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   163f6:	b10b      	cbz	r3, 163fc <process_recheck+0x2e>
		evt = EVT_RESET;
   163f8:	2005      	movs	r0, #5
}
   163fa:	4770      	bx	lr
	int evt = EVT_NOP;
   163fc:	2000      	movs	r0, #0
   163fe:	4770      	bx	lr

00016400 <process_complete>:
{
   16400:	b510      	push	{r4, lr}
   16402:	4604      	mov	r4, r0
   16404:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16406:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   16408:	2a00      	cmp	r2, #0
   1640a:	db07      	blt.n	1641c <process_complete+0x1c>
   1640c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   16410:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   16412:	2a01      	cmp	r2, #1
   16414:	d90e      	bls.n	16434 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   16416:	2b04      	cmp	r3, #4
   16418:	d036      	beq.n	16488 <process_complete+0x88>
}
   1641a:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1641c:	e9d0 0100 	ldrd	r0, r1, [r0]
   16420:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   16424:	2300      	movs	r3, #0
   16426:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   16428:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1642a:	2101      	movs	r1, #1
   1642c:	4620      	mov	r0, r4
   1642e:	f7ff ffa4 	bl	1637a <set_state>
   16432:	e7f2      	b.n	1641a <process_complete+0x1a>
		*clients = mgr->clients;
   16434:	e9d0 0100 	ldrd	r0, r1, [r0]
   16438:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1643c:	2200      	movs	r2, #0
   1643e:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   16440:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   16442:	2b06      	cmp	r3, #6
   16444:	d11b      	bne.n	1647e <process_complete+0x7e>
	return list->head;
   16446:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1644a:	b153      	cbz	r3, 16462 <process_complete+0x62>
				mgr->refs += 1U;
   1644c:	8b62      	ldrh	r2, [r4, #26]
   1644e:	3201      	adds	r2, #1
   16450:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   16452:	461a      	mov	r2, r3
	return node->next;
   16454:	681b      	ldr	r3, [r3, #0]
   16456:	2b00      	cmp	r3, #0
   16458:	d0f7      	beq.n	1644a <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1645a:	2a00      	cmp	r2, #0
   1645c:	d1f5      	bne.n	1644a <process_complete+0x4a>
   1645e:	4613      	mov	r3, r2
   16460:	e7f3      	b.n	1644a <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   16462:	2102      	movs	r1, #2
   16464:	4620      	mov	r0, r4
   16466:	f7ff ff88 	bl	1637a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1646a:	4620      	mov	r0, r4
   1646c:	f7ff ffaf 	bl	163ce <process_recheck>
   16470:	2800      	cmp	r0, #0
   16472:	d0d2      	beq.n	1641a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   16474:	8b23      	ldrh	r3, [r4, #24]
   16476:	f043 0320 	orr.w	r3, r3, #32
   1647a:	8323      	strh	r3, [r4, #24]
   1647c:	e7cd      	b.n	1641a <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1647e:	2100      	movs	r1, #0
   16480:	4620      	mov	r0, r4
   16482:	f7ff ff7a 	bl	1637a <set_state>
   16486:	e7f0      	b.n	1646a <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   16488:	2100      	movs	r1, #0
   1648a:	f7ff ff76 	bl	1637a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1648e:	4620      	mov	r0, r4
   16490:	f7ff ff9d 	bl	163ce <process_recheck>
   16494:	2800      	cmp	r0, #0
   16496:	d0c0      	beq.n	1641a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   16498:	8b23      	ldrh	r3, [r4, #24]
   1649a:	f043 0320 	orr.w	r3, r3, #32
   1649e:	8323      	strh	r3, [r4, #24]
}
   164a0:	e7bb      	b.n	1641a <process_complete+0x1a>

000164a2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   164a2:	b150      	cbz	r0, 164ba <validate_args+0x18>
{
   164a4:	b510      	push	{r4, lr}
   164a6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   164a8:	b151      	cbz	r1, 164c0 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   164aa:	1d08      	adds	r0, r1, #4
   164ac:	f000 f8c4 	bl	16638 <sys_notify_validate>
	if ((rv == 0)
   164b0:	b910      	cbnz	r0, 164b8 <validate_args+0x16>
	    && ((cli->notify.flags
   164b2:	68a3      	ldr	r3, [r4, #8]
   164b4:	2b03      	cmp	r3, #3
   164b6:	d806      	bhi.n	164c6 <validate_args+0x24>
}
   164b8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   164ba:	f06f 0015 	mvn.w	r0, #21
}
   164be:	4770      	bx	lr
		return -EINVAL;
   164c0:	f06f 0015 	mvn.w	r0, #21
   164c4:	e7f8      	b.n	164b8 <validate_args+0x16>
		rv = -EINVAL;
   164c6:	f06f 0015 	mvn.w	r0, #21
   164ca:	e7f5      	b.n	164b8 <validate_args+0x16>

000164cc <notify_one>:
{
   164cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164d0:	4607      	mov	r7, r0
   164d2:	460c      	mov	r4, r1
   164d4:	4616      	mov	r6, r2
   164d6:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   164d8:	4619      	mov	r1, r3
   164da:	1d20      	adds	r0, r4, #4
   164dc:	f000 f8c3 	bl	16666 <sys_notify_finalize>
	if (cb) {
   164e0:	b128      	cbz	r0, 164ee <notify_one+0x22>
   164e2:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   164e4:	462b      	mov	r3, r5
   164e6:	4632      	mov	r2, r6
   164e8:	4621      	mov	r1, r4
   164ea:	4638      	mov	r0, r7
   164ec:	47c0      	blx	r8
}
   164ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000164f2 <notify_all>:
{
   164f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164f6:	4680      	mov	r8, r0
   164f8:	460c      	mov	r4, r1
   164fa:	4617      	mov	r7, r2
   164fc:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   164fe:	e004      	b.n	1650a <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   16500:	4633      	mov	r3, r6
   16502:	463a      	mov	r2, r7
   16504:	4640      	mov	r0, r8
   16506:	f7ff ffe1 	bl	164cc <notify_one>
	return list->head;
   1650a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1650c:	b131      	cbz	r1, 1651c <notify_all+0x2a>
	return node->next;
   1650e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   16510:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16512:	6863      	ldr	r3, [r4, #4]
   16514:	428b      	cmp	r3, r1
   16516:	d1f3      	bne.n	16500 <notify_all+0xe>
	list->tail = node;
   16518:	6065      	str	r5, [r4, #4]
}
   1651a:	e7f1      	b.n	16500 <notify_all+0xe>
}
   1651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016520 <transition_complete>:
{
   16520:	b508      	push	{r3, lr}
	__asm__ volatile(
   16522:	f04f 0c20 	mov.w	ip, #32
   16526:	f3ef 8211 	mrs	r2, BASEPRI
   1652a:	f38c 8812 	msr	BASEPRI_MAX, ip
   1652e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   16532:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   16534:	2101      	movs	r1, #1
   16536:	f7f9 ffc1 	bl	104bc <process_event>
}
   1653a:	bd08      	pop	{r3, pc}

0001653c <onoff_manager_init>:
	if ((mgr == NULL)
   1653c:	4603      	mov	r3, r0
   1653e:	b170      	cbz	r0, 1655e <onoff_manager_init+0x22>
	    || (transitions == NULL)
   16540:	b181      	cbz	r1, 16564 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   16542:	680a      	ldr	r2, [r1, #0]
   16544:	b18a      	cbz	r2, 1656a <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   16546:	684a      	ldr	r2, [r1, #4]
   16548:	b192      	cbz	r2, 16570 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1654a:	2000      	movs	r0, #0
   1654c:	6018      	str	r0, [r3, #0]
   1654e:	6058      	str	r0, [r3, #4]
   16550:	6098      	str	r0, [r3, #8]
   16552:	60d8      	str	r0, [r3, #12]
   16554:	6118      	str	r0, [r3, #16]
   16556:	6158      	str	r0, [r3, #20]
   16558:	6198      	str	r0, [r3, #24]
   1655a:	6119      	str	r1, [r3, #16]
	return 0;
   1655c:	4770      	bx	lr
		return -EINVAL;
   1655e:	f06f 0015 	mvn.w	r0, #21
   16562:	4770      	bx	lr
   16564:	f06f 0015 	mvn.w	r0, #21
   16568:	4770      	bx	lr
   1656a:	f06f 0015 	mvn.w	r0, #21
   1656e:	4770      	bx	lr
   16570:	f06f 0015 	mvn.w	r0, #21
}
   16574:	4770      	bx	lr

00016576 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   16576:	b570      	push	{r4, r5, r6, lr}
   16578:	4605      	mov	r5, r0
   1657a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1657c:	f7ff ff91 	bl	164a2 <validate_args>

	if (rv < 0) {
   16580:	1e04      	subs	r4, r0, #0
   16582:	db30      	blt.n	165e6 <onoff_request+0x70>
   16584:	f04f 0320 	mov.w	r3, #32
   16588:	f3ef 8211 	mrs	r2, BASEPRI
   1658c:	f383 8812 	msr	BASEPRI_MAX, r3
   16590:	f3bf 8f6f 	isb	sy
   16594:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16596:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   1659a:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1659e:	8b6b      	ldrh	r3, [r5, #26]
   165a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   165a4:	428b      	cmp	r3, r1
   165a6:	d02c      	beq.n	16602 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   165a8:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   165aa:	f1bc 0f02 	cmp.w	ip, #2
   165ae:	d008      	beq.n	165c2 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   165b0:	f1bc 0f06 	cmp.w	ip, #6
   165b4:	d819      	bhi.n	165ea <onoff_request+0x74>
   165b6:	e8df f00c 	tbb	[pc, ip]
   165ba:	181e      	.short	0x181e
   165bc:	2a1e1818 	.word	0x2a1e1818
   165c0:	1e          	.byte	0x1e
   165c1:	00          	.byte	0x00
		mgr->refs += 1U;
   165c2:	3301      	adds	r3, #1
   165c4:	836b      	strh	r3, [r5, #26]
		notify = true;
   165c6:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   165c8:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   165ca:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   165cc:	b128      	cbz	r0, 165da <onoff_request+0x64>
	parent->next = child;
   165ce:	2000      	movs	r0, #0
   165d0:	6030      	str	r0, [r6, #0]
	return list->tail;
   165d2:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   165d4:	b308      	cbz	r0, 1661a <onoff_request+0xa4>
	parent->next = child;
   165d6:	6006      	str	r6, [r0, #0]
	list->tail = node;
   165d8:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   165da:	bb09      	cbnz	r1, 16620 <onoff_request+0xaa>
	__asm__ volatile(
   165dc:	f38e 8811 	msr	BASEPRI, lr
   165e0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   165e4:	bb0b      	cbnz	r3, 1662a <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   165e6:	4620      	mov	r0, r4
   165e8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   165ea:	f06f 0404 	mvn.w	r4, #4
   165ee:	2300      	movs	r3, #0
   165f0:	4619      	mov	r1, r3
   165f2:	4618      	mov	r0, r3
   165f4:	e7ea      	b.n	165cc <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   165f6:	fabc f18c 	clz	r1, ip
   165fa:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   165fc:	2300      	movs	r3, #0
		add_client = true;
   165fe:	2001      	movs	r0, #1
   16600:	e7e4      	b.n	165cc <onoff_request+0x56>
		rv = -EAGAIN;
   16602:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   16606:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   16608:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   1660a:	4618      	mov	r0, r3
   1660c:	e7de      	b.n	165cc <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   1660e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16612:	2300      	movs	r3, #0
   16614:	4619      	mov	r1, r3
   16616:	4618      	mov	r0, r3
   16618:	e7d8      	b.n	165cc <onoff_request+0x56>
   1661a:	606e      	str	r6, [r5, #4]
	list->head = node;
   1661c:	602e      	str	r6, [r5, #0]
}
   1661e:	e7dc      	b.n	165da <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   16620:	2102      	movs	r1, #2
   16622:	4628      	mov	r0, r5
   16624:	f7f9 ff4a 	bl	104bc <process_event>
   16628:	e7dd      	b.n	165e6 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   1662a:	2300      	movs	r3, #0
   1662c:	4662      	mov	r2, ip
   1662e:	4631      	mov	r1, r6
   16630:	4628      	mov	r0, r5
   16632:	f7ff ff4b 	bl	164cc <notify_one>
   16636:	e7d6      	b.n	165e6 <onoff_request+0x70>

00016638 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16638:	4602      	mov	r2, r0
   1663a:	b158      	cbz	r0, 16654 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1663c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1663e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16642:	2b01      	cmp	r3, #1
   16644:	d003      	beq.n	1664e <sys_notify_validate+0x16>
   16646:	2b03      	cmp	r3, #3
   16648:	d107      	bne.n	1665a <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1664a:	6803      	ldr	r3, [r0, #0]
   1664c:	b143      	cbz	r3, 16660 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1664e:	2000      	movs	r0, #0
   16650:	6090      	str	r0, [r2, #8]
   16652:	4770      	bx	lr
		return -EINVAL;
   16654:	f06f 0015 	mvn.w	r0, #21
   16658:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   1665a:	f06f 0015 	mvn.w	r0, #21
   1665e:	4770      	bx	lr
			rv = -EINVAL;
   16660:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   16664:	4770      	bx	lr

00016666 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   16666:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16668:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1666a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1666e:	6081      	str	r1, [r0, #8]
	switch (method) {
   16670:	2a03      	cmp	r2, #3
   16672:	d103      	bne.n	1667c <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   16674:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16676:	2200      	movs	r2, #0
   16678:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1667a:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   1667c:	2000      	movs	r0, #0
   1667e:	e7fa      	b.n	16676 <sys_notify_finalize+0x10>

00016680 <extract_width>:
{
   16680:	b530      	push	{r4, r5, lr}
   16682:	b083      	sub	sp, #12
   16684:	4604      	mov	r4, r0
   16686:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   16688:	7803      	ldrb	r3, [r0, #0]
   1668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1668e:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   16690:	460d      	mov	r5, r1
   16692:	780b      	ldrb	r3, [r1, #0]
   16694:	2b2a      	cmp	r3, #42	; 0x2a
   16696:	d018      	beq.n	166ca <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   16698:	a801      	add	r0, sp, #4
   1669a:	f7f9 ffc5 	bl	10628 <extract_decimal>
	if (sp != wp) {
   1669e:	9b01      	ldr	r3, [sp, #4]
   166a0:	429d      	cmp	r5, r3
   166a2:	d00f      	beq.n	166c4 <extract_width+0x44>
		conv->width_present = true;
   166a4:	7823      	ldrb	r3, [r4, #0]
   166a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   166aa:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   166ac:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   166ae:	b2db      	uxtb	r3, r3
   166b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   166b4:	2800      	cmp	r0, #0
   166b6:	db10      	blt.n	166da <extract_width+0x5a>
   166b8:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   166ba:	4313      	orrs	r3, r2
   166bc:	7822      	ldrb	r2, [r4, #0]
   166be:	f363 0241 	bfi	r2, r3, #1, #1
   166c2:	7022      	strb	r2, [r4, #0]
	return sp;
   166c4:	9801      	ldr	r0, [sp, #4]
}
   166c6:	b003      	add	sp, #12
   166c8:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   166ca:	7843      	ldrb	r3, [r0, #1]
   166cc:	f043 0301 	orr.w	r3, r3, #1
   166d0:	7043      	strb	r3, [r0, #1]
		return ++sp;
   166d2:	4608      	mov	r0, r1
   166d4:	3001      	adds	r0, #1
   166d6:	9001      	str	r0, [sp, #4]
   166d8:	e7f5      	b.n	166c6 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   166da:	2201      	movs	r2, #1
   166dc:	e7ed      	b.n	166ba <extract_width+0x3a>

000166de <extract_prec>:
{
   166de:	b510      	push	{r4, lr}
   166e0:	b082      	sub	sp, #8
   166e2:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   166e4:	780b      	ldrb	r3, [r1, #0]
   166e6:	2b2e      	cmp	r3, #46	; 0x2e
   166e8:	bf14      	ite	ne
   166ea:	2300      	movne	r3, #0
   166ec:	2301      	moveq	r3, #1
   166ee:	7842      	ldrb	r2, [r0, #1]
   166f0:	f363 0241 	bfi	r2, r3, #1, #1
   166f4:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   166f6:	b1c3      	cbz	r3, 1672a <extract_prec+0x4c>
   166f8:	4604      	mov	r4, r0
	++sp;
   166fa:	9b01      	ldr	r3, [sp, #4]
   166fc:	1c5a      	adds	r2, r3, #1
   166fe:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   16700:	785b      	ldrb	r3, [r3, #1]
   16702:	2b2a      	cmp	r3, #42	; 0x2a
   16704:	d013      	beq.n	1672e <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   16706:	a801      	add	r0, sp, #4
   16708:	f7f9 ff8e 	bl	10628 <extract_decimal>
	conv->prec_value = prec;
   1670c:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   1670e:	7823      	ldrb	r3, [r4, #0]
   16710:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   16714:	2800      	cmp	r0, #0
   16716:	db12      	blt.n	1673e <extract_prec+0x60>
   16718:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1671a:	4313      	orrs	r3, r2
   1671c:	7822      	ldrb	r2, [r4, #0]
   1671e:	f363 0241 	bfi	r2, r3, #1, #1
   16722:	7022      	strb	r2, [r4, #0]
	return sp;
   16724:	9801      	ldr	r0, [sp, #4]
}
   16726:	b002      	add	sp, #8
   16728:	bd10      	pop	{r4, pc}
		return sp;
   1672a:	4608      	mov	r0, r1
   1672c:	e7fb      	b.n	16726 <extract_prec+0x48>
		conv->prec_star = true;
   1672e:	7843      	ldrb	r3, [r0, #1]
   16730:	f043 0304 	orr.w	r3, r3, #4
   16734:	7043      	strb	r3, [r0, #1]
		return ++sp;
   16736:	4610      	mov	r0, r2
   16738:	3001      	adds	r0, #1
   1673a:	9001      	str	r0, [sp, #4]
   1673c:	e7f3      	b.n	16726 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   1673e:	2201      	movs	r2, #1
   16740:	e7eb      	b.n	1671a <extract_prec+0x3c>

00016742 <extract_length>:
{
   16742:	4602      	mov	r2, r0
	switch (*sp) {
   16744:	780b      	ldrb	r3, [r1, #0]
   16746:	3b4c      	subs	r3, #76	; 0x4c
   16748:	2b2e      	cmp	r3, #46	; 0x2e
   1674a:	d85b      	bhi.n	16804 <extract_length+0xc2>
   1674c:	e8df f003 	tbb	[pc, r3]
   16750:	5a5a5a4f 	.word	0x5a5a5a4f
   16754:	5a5a5a5a 	.word	0x5a5a5a5a
   16758:	5a5a5a5a 	.word	0x5a5a5a5a
   1675c:	5a5a5a5a 	.word	0x5a5a5a5a
   16760:	5a5a5a5a 	.word	0x5a5a5a5a
   16764:	5a5a5a5a 	.word	0x5a5a5a5a
   16768:	5a5a5a5a 	.word	0x5a5a5a5a
   1676c:	5a3a5a18 	.word	0x5a3a5a18
   16770:	5a5a5a29 	.word	0x5a5a5a29
   16774:	5a5a5a5a 	.word	0x5a5a5a5a
   16778:	5a5a5a48 	.word	0x5a5a5a48
   1677c:	5a5a      	.short	0x5a5a
   1677e:	41          	.byte	0x41
   1677f:	00          	.byte	0x00
		if (*++sp == 'h') {
   16780:	1c48      	adds	r0, r1, #1
   16782:	784b      	ldrb	r3, [r1, #1]
   16784:	2b68      	cmp	r3, #104	; 0x68
   16786:	d005      	beq.n	16794 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   16788:	7853      	ldrb	r3, [r2, #1]
   1678a:	2102      	movs	r1, #2
   1678c:	f361 03c6 	bfi	r3, r1, #3, #4
   16790:	7053      	strb	r3, [r2, #1]
   16792:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   16794:	7853      	ldrb	r3, [r2, #1]
   16796:	2001      	movs	r0, #1
   16798:	f360 03c6 	bfi	r3, r0, #3, #4
   1679c:	7053      	strb	r3, [r2, #1]
			++sp;
   1679e:	1c88      	adds	r0, r1, #2
   167a0:	4770      	bx	lr
		if (*++sp == 'l') {
   167a2:	1c48      	adds	r0, r1, #1
   167a4:	784b      	ldrb	r3, [r1, #1]
   167a6:	2b6c      	cmp	r3, #108	; 0x6c
   167a8:	d005      	beq.n	167b6 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   167aa:	7853      	ldrb	r3, [r2, #1]
   167ac:	2103      	movs	r1, #3
   167ae:	f361 03c6 	bfi	r3, r1, #3, #4
   167b2:	7053      	strb	r3, [r2, #1]
   167b4:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   167b6:	7853      	ldrb	r3, [r2, #1]
   167b8:	2004      	movs	r0, #4
   167ba:	f360 03c6 	bfi	r3, r0, #3, #4
   167be:	7053      	strb	r3, [r2, #1]
			++sp;
   167c0:	1c88      	adds	r0, r1, #2
   167c2:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   167c4:	7853      	ldrb	r3, [r2, #1]
   167c6:	2005      	movs	r0, #5
   167c8:	f360 03c6 	bfi	r3, r0, #3, #4
   167cc:	7053      	strb	r3, [r2, #1]
		++sp;
   167ce:	1c48      	adds	r0, r1, #1
		break;
   167d0:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   167d2:	7853      	ldrb	r3, [r2, #1]
   167d4:	2006      	movs	r0, #6
   167d6:	f360 03c6 	bfi	r3, r0, #3, #4
   167da:	7053      	strb	r3, [r2, #1]
		++sp;
   167dc:	1c48      	adds	r0, r1, #1
		break;
   167de:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   167e0:	7853      	ldrb	r3, [r2, #1]
   167e2:	2007      	movs	r0, #7
   167e4:	f360 03c6 	bfi	r3, r0, #3, #4
   167e8:	7053      	strb	r3, [r2, #1]
		++sp;
   167ea:	1c48      	adds	r0, r1, #1
		break;
   167ec:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   167ee:	7853      	ldrb	r3, [r2, #1]
   167f0:	2008      	movs	r0, #8
   167f2:	f360 03c6 	bfi	r3, r0, #3, #4
   167f6:	7053      	strb	r3, [r2, #1]
		++sp;
   167f8:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   167fa:	7813      	ldrb	r3, [r2, #0]
   167fc:	f043 0302 	orr.w	r3, r3, #2
   16800:	7013      	strb	r3, [r2, #0]
		break;
   16802:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   16804:	7853      	ldrb	r3, [r2, #1]
   16806:	f36f 03c6 	bfc	r3, #3, #4
   1680a:	7053      	strb	r3, [r2, #1]
		break;
   1680c:	4608      	mov	r0, r1
}
   1680e:	4770      	bx	lr

00016810 <extract_specifier>:
{
   16810:	b500      	push	{lr}
   16812:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   16814:	4608      	mov	r0, r1
   16816:	f810 3b01 	ldrb.w	r3, [r0], #1
   1681a:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   1681c:	2b78      	cmp	r3, #120	; 0x78
   1681e:	d817      	bhi.n	16850 <extract_specifier+0x40>
   16820:	2b6e      	cmp	r3, #110	; 0x6e
   16822:	d229      	bcs.n	16878 <extract_specifier+0x68>
   16824:	2b69      	cmp	r3, #105	; 0x69
   16826:	d813      	bhi.n	16850 <extract_specifier+0x40>
   16828:	2b58      	cmp	r3, #88	; 0x58
   1682a:	d317      	bcc.n	1685c <extract_specifier+0x4c>
   1682c:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   16830:	fa5f fc8c 	uxtb.w	ip, ip
   16834:	2101      	movs	r1, #1
   16836:	fa01 f10c 	lsl.w	r1, r1, ip
   1683a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1683e:	d114      	bne.n	1686a <extract_specifier+0x5a>
   16840:	f640 0c01 	movw	ip, #2049	; 0x801
   16844:	ea11 0f0c 	tst.w	r1, ip
   16848:	d155      	bne.n	168f6 <extract_specifier+0xe6>
   1684a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1684e:	d13a      	bne.n	168c6 <extract_specifier+0xb6>
		conv->invalid = true;
   16850:	7813      	ldrb	r3, [r2, #0]
   16852:	f043 0301 	orr.w	r3, r3, #1
   16856:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   16858:	2100      	movs	r1, #0
		break;
   1685a:	e042      	b.n	168e2 <extract_specifier+0xd2>
	switch (conv->specifier) {
   1685c:	2b41      	cmp	r3, #65	; 0x41
   1685e:	d004      	beq.n	1686a <extract_specifier+0x5a>
   16860:	d3f6      	bcc.n	16850 <extract_specifier+0x40>
   16862:	3b45      	subs	r3, #69	; 0x45
   16864:	b2db      	uxtb	r3, r3
   16866:	2b02      	cmp	r3, #2
   16868:	d8f2      	bhi.n	16850 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   1686a:	7893      	ldrb	r3, [r2, #2]
   1686c:	2104      	movs	r1, #4
   1686e:	f361 0302 	bfi	r3, r1, #0, #3
   16872:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   16874:	2101      	movs	r1, #1
			break;
   16876:	e034      	b.n	168e2 <extract_specifier+0xd2>
	switch (conv->specifier) {
   16878:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   1687c:	b2c9      	uxtb	r1, r1
   1687e:	f04f 0c01 	mov.w	ip, #1
   16882:	fa0c fc01 	lsl.w	ip, ip, r1
   16886:	f240 4182 	movw	r1, #1154	; 0x482
   1688a:	ea1c 0f01 	tst.w	ip, r1
   1688e:	bf14      	ite	ne
   16890:	f04f 0e01 	movne.w	lr, #1
   16894:	f04f 0e00 	moveq.w	lr, #0
   16898:	d12d      	bne.n	168f6 <extract_specifier+0xe6>
   1689a:	f01c 0f24 	tst.w	ip, #36	; 0x24
   1689e:	bf14      	ite	ne
   168a0:	2101      	movne	r1, #1
   168a2:	2100      	moveq	r1, #0
   168a4:	d139      	bne.n	1691a <extract_specifier+0x10a>
   168a6:	f01c 0c01 	ands.w	ip, ip, #1
   168aa:	d0d1      	beq.n	16850 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   168ac:	7893      	ldrb	r3, [r2, #2]
   168ae:	f04f 0e03 	mov.w	lr, #3
   168b2:	f36e 0302 	bfi	r3, lr, #0, #3
   168b6:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   168b8:	7853      	ldrb	r3, [r2, #1]
   168ba:	f003 0378 	and.w	r3, r3, #120	; 0x78
   168be:	2b40      	cmp	r3, #64	; 0x40
   168c0:	d10f      	bne.n	168e2 <extract_specifier+0xd2>
			unsupported = true;
   168c2:	4661      	mov	r1, ip
   168c4:	e00d      	b.n	168e2 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   168c6:	7891      	ldrb	r1, [r2, #2]
   168c8:	f04f 0c01 	mov.w	ip, #1
   168cc:	f36c 0102 	bfi	r1, ip, #0, #3
   168d0:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   168d2:	7851      	ldrb	r1, [r2, #1]
   168d4:	f001 0178 	and.w	r1, r1, #120	; 0x78
   168d8:	2940      	cmp	r1, #64	; 0x40
   168da:	d013      	beq.n	16904 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   168dc:	2b63      	cmp	r3, #99	; 0x63
   168de:	d018      	beq.n	16912 <extract_specifier+0x102>
	bool unsupported = false;
   168e0:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   168e2:	7813      	ldrb	r3, [r2, #0]
   168e4:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   168e8:	ea41 010c 	orr.w	r1, r1, ip
   168ec:	f361 0341 	bfi	r3, r1, #1, #1
   168f0:	7013      	strb	r3, [r2, #0]
}
   168f2:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   168f6:	7891      	ldrb	r1, [r2, #2]
   168f8:	f04f 0c02 	mov.w	ip, #2
   168fc:	f36c 0102 	bfi	r1, ip, #0, #3
   16900:	7091      	strb	r1, [r2, #2]
   16902:	e7e6      	b.n	168d2 <extract_specifier+0xc2>
			conv->invalid = true;
   16904:	f892 c000 	ldrb.w	ip, [r2]
   16908:	f04c 0c01 	orr.w	ip, ip, #1
   1690c:	f882 c000 	strb.w	ip, [r2]
   16910:	e7e4      	b.n	168dc <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   16912:	3900      	subs	r1, #0
   16914:	bf18      	it	ne
   16916:	2101      	movne	r1, #1
   16918:	e7e3      	b.n	168e2 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   1691a:	7893      	ldrb	r3, [r2, #2]
   1691c:	f04f 0c03 	mov.w	ip, #3
   16920:	f36c 0302 	bfi	r3, ip, #0, #3
   16924:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   16926:	7853      	ldrb	r3, [r2, #1]
   16928:	f013 0f78 	tst.w	r3, #120	; 0x78
   1692c:	d1d9      	bne.n	168e2 <extract_specifier+0xd2>
	bool unsupported = false;
   1692e:	4671      	mov	r1, lr
   16930:	e7d7      	b.n	168e2 <extract_specifier+0xd2>

00016932 <extract_conversion>:
{
   16932:	b510      	push	{r4, lr}
   16934:	4604      	mov	r4, r0
   16936:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   16938:	2300      	movs	r3, #0
   1693a:	6023      	str	r3, [r4, #0]
   1693c:	6063      	str	r3, [r4, #4]
   1693e:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   16940:	784b      	ldrb	r3, [r1, #1]
   16942:	2b25      	cmp	r3, #37	; 0x25
   16944:	d014      	beq.n	16970 <extract_conversion+0x3e>
   16946:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   16948:	4620      	mov	r0, r4
   1694a:	f7f9 fe83 	bl	10654 <extract_flags>
   1694e:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   16950:	4620      	mov	r0, r4
   16952:	f7ff fe95 	bl	16680 <extract_width>
   16956:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   16958:	4620      	mov	r0, r4
   1695a:	f7ff fec0 	bl	166de <extract_prec>
   1695e:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   16960:	4620      	mov	r0, r4
   16962:	f7ff feee 	bl	16742 <extract_length>
   16966:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   16968:	4620      	mov	r0, r4
   1696a:	f7ff ff51 	bl	16810 <extract_specifier>
}
   1696e:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   16970:	3002      	adds	r0, #2
   16972:	70e3      	strb	r3, [r4, #3]
		return sp;
   16974:	e7fb      	b.n	1696e <extract_conversion+0x3c>

00016976 <conversion_radix>:
	switch (specifier) {
   16976:	286f      	cmp	r0, #111	; 0x6f
   16978:	d00c      	beq.n	16994 <conversion_radix+0x1e>
   1697a:	d905      	bls.n	16988 <conversion_radix+0x12>
   1697c:	2870      	cmp	r0, #112	; 0x70
   1697e:	d00b      	beq.n	16998 <conversion_radix+0x22>
   16980:	2878      	cmp	r0, #120	; 0x78
   16982:	d10b      	bne.n	1699c <conversion_radix+0x26>
		return 16;
   16984:	2010      	movs	r0, #16
   16986:	4770      	bx	lr
	switch (specifier) {
   16988:	2858      	cmp	r0, #88	; 0x58
   1698a:	d001      	beq.n	16990 <conversion_radix+0x1a>
   1698c:	200a      	movs	r0, #10
   1698e:	4770      	bx	lr
		return 16;
   16990:	2010      	movs	r0, #16
   16992:	4770      	bx	lr
		return 8;
   16994:	2008      	movs	r0, #8
   16996:	4770      	bx	lr
		return 16;
   16998:	2010      	movs	r0, #16
   1699a:	4770      	bx	lr
	switch (specifier) {
   1699c:	200a      	movs	r0, #10
}
   1699e:	4770      	bx	lr

000169a0 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   169a0:	7843      	ldrb	r3, [r0, #1]
   169a2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   169a6:	2b07      	cmp	r3, #7
   169a8:	d818      	bhi.n	169dc <store_count+0x3c>
   169aa:	e8df f003 	tbb	[pc, r3]
   169ae:	0604      	.short	0x0604
   169b0:	100c0a08 	.word	0x100c0a08
   169b4:	1614      	.short	0x1614
		*(int *)dp = count;
   169b6:	600a      	str	r2, [r1, #0]
		break;
   169b8:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   169ba:	700a      	strb	r2, [r1, #0]
		break;
   169bc:	4770      	bx	lr
		*(short *)dp = (short)count;
   169be:	800a      	strh	r2, [r1, #0]
		break;
   169c0:	4770      	bx	lr
		*(long *)dp = (long)count;
   169c2:	600a      	str	r2, [r1, #0]
		break;
   169c4:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   169c6:	17d3      	asrs	r3, r2, #31
   169c8:	600a      	str	r2, [r1, #0]
   169ca:	604b      	str	r3, [r1, #4]
		break;
   169cc:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   169ce:	17d3      	asrs	r3, r2, #31
   169d0:	600a      	str	r2, [r1, #0]
   169d2:	604b      	str	r3, [r1, #4]
		break;
   169d4:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   169d6:	600a      	str	r2, [r1, #0]
		break;
   169d8:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   169da:	600a      	str	r2, [r1, #0]
}
   169dc:	4770      	bx	lr

000169de <outs>:
{
   169de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169e2:	4607      	mov	r7, r0
   169e4:	460e      	mov	r6, r1
   169e6:	4614      	mov	r4, r2
   169e8:	4698      	mov	r8, r3
	size_t count = 0;
   169ea:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   169ec:	e006      	b.n	169fc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   169ee:	4631      	mov	r1, r6
   169f0:	f814 0b01 	ldrb.w	r0, [r4], #1
   169f4:	47b8      	blx	r7
		if (rc < 0) {
   169f6:	2800      	cmp	r0, #0
   169f8:	db09      	blt.n	16a0e <outs+0x30>
		++count;
   169fa:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   169fc:	4544      	cmp	r4, r8
   169fe:	d3f6      	bcc.n	169ee <outs+0x10>
   16a00:	f1b8 0f00 	cmp.w	r8, #0
   16a04:	d102      	bne.n	16a0c <outs+0x2e>
   16a06:	7823      	ldrb	r3, [r4, #0]
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d1f0      	bne.n	169ee <outs+0x10>
	return (int)count;
   16a0c:	4628      	mov	r0, r5
}
   16a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016a12 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   16a12:	4770      	bx	lr

00016a14 <nrf_regulators_system_off>:
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   16a14:	2301      	movs	r3, #1
   16a16:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   16a1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   16a1e:	bf20      	wfe
    while (true)
   16a20:	e7fd      	b.n	16a1e <nrf_regulators_system_off+0xa>

00016a22 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   16a22:	2806      	cmp	r0, #6
   16a24:	d000      	beq.n	16a28 <pm_state_set+0x6>
   16a26:	4770      	bx	lr
{
   16a28:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   16a2a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   16a2e:	f7ff fff1 	bl	16a14 <nrf_regulators_system_off>

00016a32 <pm_state_exit_post_ops>:
   16a32:	2300      	movs	r3, #0
   16a34:	f383 8811 	msr	BASEPRI, r3
   16a38:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16a3c:	4770      	bx	lr

00016a3e <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   16a3e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   16a40:	f001 021f 	and.w	r2, r1, #31
   16a44:	2301      	movs	r3, #1
   16a46:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16a48:	0949      	lsrs	r1, r1, #5
   16a4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16a4e:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a50:	e8d0 2fef 	ldaex	r2, [r0]
   16a54:	ea02 0c01 	and.w	ip, r2, r1
   16a58:	e8c0 cfee 	stlex	lr, ip, [r0]
   16a5c:	f1be 0f00 	cmp.w	lr, #0
   16a60:	d1f6      	bne.n	16a50 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   16a62:	4213      	tst	r3, r2
}
   16a64:	bf14      	ite	ne
   16a66:	2001      	movne	r0, #1
   16a68:	2000      	moveq	r0, #0
   16a6a:	f85d fb04 	ldr.w	pc, [sp], #4

00016a6e <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16a6e:	f001 021f 	and.w	r2, r1, #31
   16a72:	2301      	movs	r3, #1
   16a74:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16a76:	0949      	lsrs	r1, r1, #5
   16a78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a7c:	e8d0 2fef 	ldaex	r2, [r0]
   16a80:	431a      	orrs	r2, r3
   16a82:	e8c0 2fe1 	stlex	r1, r2, [r0]
   16a86:	2900      	cmp	r1, #0
   16a88:	d1f8      	bne.n	16a7c <atomic_set_bit+0xe>
}
   16a8a:	4770      	bx	lr

00016a8c <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   16a8c:	2000      	movs	r0, #0
   16a8e:	4770      	bx	lr

00016a90 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16a90:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16a92:	f001 f88d 	bl	17bb0 <z_fatal_error>
}
   16a96:	bd08      	pop	{r3, pc}

00016a98 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   16a98:	b508      	push	{r3, lr}
   16a9a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   16a9c:	6800      	ldr	r0, [r0, #0]
   16a9e:	f7ff fff7 	bl	16a90 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   16aa2:	bd08      	pop	{r3, pc}

00016aa4 <arch_irq_enable>:
{
   16aa4:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   16aa6:	b240      	sxtb	r0, r0
   16aa8:	f7fa fad2 	bl	11050 <__NVIC_EnableIRQ>
}
   16aac:	bd08      	pop	{r3, pc}

00016aae <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   16aae:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   16ab0:	3101      	adds	r1, #1
   16ab2:	b240      	sxtb	r0, r0
   16ab4:	f7fa fada 	bl	1106c <__NVIC_SetPriority>
}
   16ab8:	bd08      	pop	{r3, pc}

00016aba <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   16aba:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   16abc:	2100      	movs	r1, #0
   16abe:	2001      	movs	r0, #1
   16ac0:	f7ff ffe6 	bl	16a90 <z_arm_fatal_error>
}
   16ac4:	bd08      	pop	{r3, pc}

00016ac6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   16ac6:	b508      	push	{r3, lr}
	handler();
   16ac8:	f7fa faf2 	bl	110b0 <z_SysNmiOnReset>
	z_arm_int_exit();
   16acc:	f7fa fbca 	bl	11264 <z_arm_exc_exit>
}
   16ad0:	bd08      	pop	{r3, pc}

00016ad2 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   16ad2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   16ad6:	f383 880b 	msr	PSPLIM, r3
}
   16ada:	4770      	bx	lr

00016adc <memory_fault_recoverable>:
}
   16adc:	2000      	movs	r0, #0
   16ade:	4770      	bx	lr

00016ae0 <debug_monitor>:
	*recoverable = false;
   16ae0:	2300      	movs	r3, #0
   16ae2:	700b      	strb	r3, [r1, #0]
}
   16ae4:	4770      	bx	lr

00016ae6 <fault_handle>:
{
   16ae6:	b508      	push	{r3, lr}
	*recoverable = false;
   16ae8:	2300      	movs	r3, #0
   16aea:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   16aec:	1ecb      	subs	r3, r1, #3
   16aee:	2b09      	cmp	r3, #9
   16af0:	d81a      	bhi.n	16b28 <fault_handle+0x42>
   16af2:	e8df f003 	tbb	[pc, r3]
   16af6:	0905      	.short	0x0905
   16af8:	1919110d 	.word	0x1919110d
   16afc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   16b00:	4611      	mov	r1, r2
   16b02:	f7fa fcab 	bl	1145c <hard_fault>
		break;
   16b06:	e010      	b.n	16b2a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   16b08:	2100      	movs	r1, #0
   16b0a:	f7fa fbb9 	bl	11280 <mem_manage_fault>
		break;
   16b0e:	e00c      	b.n	16b2a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   16b10:	2100      	movs	r1, #0
   16b12:	f7fa fc07 	bl	11324 <bus_fault>
		break;
   16b16:	e008      	b.n	16b2a <fault_handle+0x44>
		reason = usage_fault(esf);
   16b18:	f7fa fc4a 	bl	113b0 <usage_fault>
		break;
   16b1c:	e005      	b.n	16b2a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   16b1e:	4611      	mov	r1, r2
   16b20:	f7ff ffde 	bl	16ae0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16b24:	2000      	movs	r0, #0
		break;
   16b26:	e000      	b.n	16b2a <fault_handle+0x44>
	switch (fault) {
   16b28:	2000      	movs	r0, #0
}
   16b2a:	bd08      	pop	{r3, pc}

00016b2c <get_esf>:
{
   16b2c:	4684      	mov	ip, r0
	*nested_exc = false;
   16b2e:	2000      	movs	r0, #0
   16b30:	7018      	strb	r0, [r3, #0]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   16b32:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   16b36:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   16b3a:	d11c      	bne.n	16b76 <get_esf+0x4a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   16b3c:	f012 0f01 	tst.w	r2, #1
   16b40:	d11b      	bne.n	16b7a <get_esf+0x4e>
{
   16b42:	b410      	push	{r4}
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   16b44:	f012 0f40 	tst.w	r2, #64	; 0x40
   16b48:	d008      	beq.n	16b5c <get_esf+0x30>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   16b4a:	f012 0f04 	tst.w	r2, #4
   16b4e:	d002      	beq.n	16b56 <get_esf+0x2a>
			ptr_esf = (z_arch_esf_t *)psp;
   16b50:	4608      	mov	r0, r1
		alternative_state_exc = true;
   16b52:	2401      	movs	r4, #1
   16b54:	e004      	b.n	16b60 <get_esf+0x34>
			ptr_esf = (z_arch_esf_t *)msp;
   16b56:	4660      	mov	r0, ip
		alternative_state_exc = true;
   16b58:	2401      	movs	r4, #1
   16b5a:	e001      	b.n	16b60 <get_esf+0x34>
	z_arch_esf_t *ptr_esf = NULL;
   16b5c:	2000      	movs	r0, #0
	bool alternative_state_exc = false;
   16b5e:	4604      	mov	r4, r0
	if (!alternative_state_exc) {
   16b60:	b91c      	cbnz	r4, 16b6a <get_esf+0x3e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   16b62:	f012 0f08 	tst.w	r2, #8
   16b66:	d002      	beq.n	16b6e <get_esf+0x42>
			ptr_esf =  (z_arch_esf_t *)psp;
   16b68:	4608      	mov	r0, r1
}
   16b6a:	bc10      	pop	{r4}
   16b6c:	4770      	bx	lr
			ptr_esf = (z_arch_esf_t *)msp;
   16b6e:	4660      	mov	r0, ip
			*nested_exc = true;
   16b70:	2201      	movs	r2, #1
   16b72:	701a      	strb	r2, [r3, #0]
   16b74:	e7f9      	b.n	16b6a <get_esf+0x3e>
		return NULL;
   16b76:	2000      	movs	r0, #0
   16b78:	4770      	bx	lr
		return NULL;
   16b7a:	2000      	movs	r0, #0
}
   16b7c:	4770      	bx	lr

00016b7e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   16b7e:	4770      	bx	lr

00016b80 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   16b80:	4770      	bx	lr

00016b82 <sys_arch_reboot>:
{
   16b82:	b508      	push	{r3, lr}
	NVIC_SystemReset();
   16b84:	f7fa fd4e 	bl	11624 <__NVIC_SystemReset>

00016b88 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   16b88:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   16b8c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   16b90:	d001      	beq.n	16b96 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   16b92:	b2c0      	uxtb	r0, r0
   16b94:	4770      	bx	lr
	}

	return -EINVAL;
   16b96:	f06f 0015 	mvn.w	r0, #21
}
   16b9a:	4770      	bx	lr

00016b9c <region_init>:
{
   16b9c:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   16b9e:	680b      	ldr	r3, [r1, #0]
   16ba0:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   16ba4:	7a0b      	ldrb	r3, [r1, #8]
   16ba6:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   16baa:	68ca      	ldr	r2, [r1, #12]
   16bac:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   16bb0:	095b      	lsrs	r3, r3, #5
   16bb2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   16bb6:	f042 0201 	orr.w	r2, r2, #1
   16bba:	ea4c 010e 	orr.w	r1, ip, lr
   16bbe:	f7fa fdc5 	bl	1174c <mpu_set_region>
}
   16bc2:	bd08      	pop	{r3, pc}

00016bc4 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   16bc4:	6843      	ldr	r3, [r0, #4]
		&&
   16bc6:	2b1f      	cmp	r3, #31
   16bc8:	d908      	bls.n	16bdc <mpu_partition_is_valid+0x18>
		&&
   16bca:	f013 0f1f 	tst.w	r3, #31
   16bce:	d107      	bne.n	16be0 <mpu_partition_is_valid+0x1c>
		((part->start &
   16bd0:	6803      	ldr	r3, [r0, #0]
		&&
   16bd2:	f013 0f1f 	tst.w	r3, #31
   16bd6:	d005      	beq.n	16be4 <mpu_partition_is_valid+0x20>
   16bd8:	2000      	movs	r0, #0
   16bda:	4770      	bx	lr
   16bdc:	2000      	movs	r0, #0
   16bde:	4770      	bx	lr
   16be0:	2000      	movs	r0, #0
   16be2:	4770      	bx	lr
   16be4:	2001      	movs	r0, #1
}
   16be6:	4770      	bx	lr

00016be8 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   16be8:	280f      	cmp	r0, #15
   16bea:	d805      	bhi.n	16bf8 <region_allocate_and_init+0x10>
{
   16bec:	b510      	push	{r4, lr}
   16bee:	4604      	mov	r4, r0
	region_init(index, region_conf);
   16bf0:	f7ff ffd4 	bl	16b9c <region_init>
	return index;
   16bf4:	4620      	mov	r0, r4
}
   16bf6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   16bf8:	f06f 0015 	mvn.w	r0, #21
}
   16bfc:	4770      	bx	lr

00016bfe <mpu_configure_region>:
{
   16bfe:	b510      	push	{r4, lr}
   16c00:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   16c02:	680b      	ldr	r3, [r1, #0]
   16c04:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   16c06:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   16c08:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   16c0c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   16c10:	f36c 0204 	bfi	r2, ip, #0, #5
   16c14:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   16c18:	8949      	ldrh	r1, [r1, #10]
   16c1a:	b2d2      	uxtb	r2, r2
   16c1c:	f361 1247 	bfi	r2, r1, #5, #3
   16c20:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   16c24:	f023 031f 	bic.w	r3, r3, #31
   16c28:	4423      	add	r3, r4
   16c2a:	3b01      	subs	r3, #1
   16c2c:	f023 031f 	bic.w	r3, r3, #31
   16c30:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   16c32:	4669      	mov	r1, sp
   16c34:	f7ff ffd8 	bl	16be8 <region_allocate_and_init>
}
   16c38:	b004      	add	sp, #16
   16c3a:	bd10      	pop	{r4, pc}

00016c3c <get_region_index>:
{
   16c3c:	b570      	push	{r4, r5, r6, lr}
   16c3e:	4604      	mov	r4, r0
   16c40:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   16c42:	f7ff ffa1 	bl	16b88 <arm_cmse_mpu_region_get>
   16c46:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   16c48:	4434      	add	r4, r6
   16c4a:	1e60      	subs	r0, r4, #1
   16c4c:	f7ff ff9c 	bl	16b88 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   16c50:	4285      	cmp	r5, r0
   16c52:	d101      	bne.n	16c58 <get_region_index+0x1c>
}
   16c54:	4628      	mov	r0, r5
   16c56:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   16c58:	f06f 0515 	mvn.w	r5, #21
   16c5c:	e7fa      	b.n	16c54 <get_region_index+0x18>

00016c5e <arm_core_mpu_configure_static_mpu_regions>:
{
   16c5e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16c60:	f7fa fe62 	bl	11928 <mpu_configure_static_mpu_regions>
}
   16c64:	bd08      	pop	{r3, pc}

00016c66 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   16c66:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16c68:	f7fa fe68 	bl	1193c <mpu_mark_areas_for_dynamic_regions>
}
   16c6c:	bd08      	pop	{r3, pc}

00016c6e <malloc_prepare>:
}
   16c6e:	2000      	movs	r0, #0
   16c70:	4770      	bx	lr

00016c72 <_stdout_hook_default>:
}
   16c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c76:	4770      	bx	lr

00016c78 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   16c78:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   16c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c82:	f7fd ff39 	bl	14af8 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   16c86:	bd08      	pop	{r3, pc}

00016c88 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   16c88:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   16c8a:	f7fd ffb9 	bl	14c00 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   16c8e:	bd08      	pop	{r3, pc}

00016c90 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   16c90:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   16c92:	f7fd fcff 	bl	14694 <z_impl_z_errno>
	return z_errno();
}
   16c96:	bd08      	pop	{r3, pc}

00016c98 <nrf_clock_is_running>:
    switch (domain)
   16c98:	b119      	cbz	r1, 16ca2 <nrf_clock_is_running+0xa>
   16c9a:	2901      	cmp	r1, #1
   16c9c:	d00e      	beq.n	16cbc <nrf_clock_is_running+0x24>
   16c9e:	2000      	movs	r0, #0
   16ca0:	4770      	bx	lr
            if (p_clk_src != NULL)
   16ca2:	b122      	cbz	r2, 16cae <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16ca4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   16ca8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   16cac:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16cae:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   16cb2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16cb6:	d10e      	bne.n	16cd6 <nrf_clock_is_running+0x3e>
    return false;
   16cb8:	2000      	movs	r0, #0
   16cba:	4770      	bx	lr
            if (p_clk_src != NULL)
   16cbc:	b122      	cbz	r2, 16cc8 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16cbe:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   16cc2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   16cc6:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16cc8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   16ccc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16cd0:	d103      	bne.n	16cda <nrf_clock_is_running+0x42>
    return false;
   16cd2:	2000      	movs	r0, #0
   16cd4:	4770      	bx	lr
                return true;
   16cd6:	2001      	movs	r0, #1
   16cd8:	4770      	bx	lr
                return true;
   16cda:	2001      	movs	r0, #1
}
   16cdc:	4770      	bx	lr

00016cde <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   16cde:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   16ce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16ce4:	0089      	lsls	r1, r1, #2
   16ce6:	3138      	adds	r1, #56	; 0x38
}
   16ce8:	4408      	add	r0, r1
   16cea:	4770      	bx	lr

00016cec <get_sub_config>:
	const struct nrf_clock_control_config *config =
   16cec:	6840      	ldr	r0, [r0, #4]
}
   16cee:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16cf2:	4770      	bx	lr

00016cf4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   16cf4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   16cf6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   16cfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16cfe:	4770      	bx	lr

00016d00 <get_status>:
{
   16d00:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   16d02:	b2c9      	uxtb	r1, r1
   16d04:	f7ff ffeb 	bl	16cde <get_sub_data>
   16d08:	6880      	ldr	r0, [r0, #8]
}
   16d0a:	f000 0007 	and.w	r0, r0, #7
   16d0e:	bd08      	pop	{r3, pc}

00016d10 <set_off_state>:
	__asm__ volatile(
   16d10:	f04f 0320 	mov.w	r3, #32
   16d14:	f3ef 8211 	mrs	r2, BASEPRI
   16d18:	f383 8812 	msr	BASEPRI_MAX, r3
   16d1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16d20:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   16d22:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   16d26:	d001      	beq.n	16d2c <set_off_state+0x1c>
   16d28:	428b      	cmp	r3, r1
   16d2a:	d107      	bne.n	16d3c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16d2c:	2301      	movs	r3, #1
   16d2e:	6003      	str	r3, [r0, #0]
	int err = 0;
   16d30:	2000      	movs	r0, #0
	__asm__ volatile(
   16d32:	f382 8811 	msr	BASEPRI, r2
   16d36:	f3bf 8f6f 	isb	sy
}
   16d3a:	4770      	bx	lr
		err = -EPERM;
   16d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d40:	e7f7      	b.n	16d32 <set_off_state+0x22>

00016d42 <set_starting_state>:
	__asm__ volatile(
   16d42:	f04f 0320 	mov.w	r3, #32
   16d46:	f3ef 8211 	mrs	r2, BASEPRI
   16d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   16d4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16d52:	6803      	ldr	r3, [r0, #0]
   16d54:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   16d58:	f003 0307 	and.w	r3, r3, #7
   16d5c:	2b01      	cmp	r3, #1
   16d5e:	d008      	beq.n	16d72 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   16d60:	458c      	cmp	ip, r1
   16d62:	d009      	beq.n	16d78 <set_starting_state+0x36>
		err = -EPERM;
   16d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   16d68:	f382 8811 	msr	BASEPRI, r2
   16d6c:	f3bf 8f6f 	isb	sy
}
   16d70:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   16d72:	6001      	str	r1, [r0, #0]
	int err = 0;
   16d74:	2000      	movs	r0, #0
   16d76:	e7f7      	b.n	16d68 <set_starting_state+0x26>
		err = -EALREADY;
   16d78:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16d7c:	e7f4      	b.n	16d68 <set_starting_state+0x26>

00016d7e <set_on_state>:
	__asm__ volatile(
   16d7e:	f04f 0320 	mov.w	r3, #32
   16d82:	f3ef 8211 	mrs	r2, BASEPRI
   16d86:	f383 8812 	msr	BASEPRI_MAX, r3
   16d8a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   16d8e:	6803      	ldr	r3, [r0, #0]
   16d90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16d94:	f043 0302 	orr.w	r3, r3, #2
   16d98:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   16d9a:	f382 8811 	msr	BASEPRI, r2
   16d9e:	f3bf 8f6f 	isb	sy
}
   16da2:	4770      	bx	lr

00016da4 <clkstarted_handle>:
{
   16da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16da6:	4606      	mov	r6, r0
   16da8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   16daa:	f7ff ff98 	bl	16cde <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   16dae:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   16db0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   16db2:	2300      	movs	r3, #0
   16db4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   16db8:	f7ff ffe1 	bl	16d7e <set_on_state>
	if (callback) {
   16dbc:	b11d      	cbz	r5, 16dc6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16dbe:	463a      	mov	r2, r7
   16dc0:	4621      	mov	r1, r4
   16dc2:	4630      	mov	r0, r6
   16dc4:	47a8      	blx	r5
}
   16dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016dc8 <stop>:
{
   16dc8:	b570      	push	{r4, r5, r6, lr}
   16dca:	4606      	mov	r6, r0
   16dcc:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   16dce:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16dd0:	4621      	mov	r1, r4
   16dd2:	f7ff ff84 	bl	16cde <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   16dd6:	4629      	mov	r1, r5
   16dd8:	3008      	adds	r0, #8
   16dda:	f7ff ff99 	bl	16d10 <set_off_state>
	if (err < 0) {
   16dde:	2800      	cmp	r0, #0
   16de0:	db06      	blt.n	16df0 <stop+0x28>
	get_sub_config(dev, type)->stop();
   16de2:	4621      	mov	r1, r4
   16de4:	4630      	mov	r0, r6
   16de6:	f7ff ff81 	bl	16cec <get_sub_config>
   16dea:	6843      	ldr	r3, [r0, #4]
   16dec:	4798      	blx	r3
	return 0;
   16dee:	2000      	movs	r0, #0
}
   16df0:	bd70      	pop	{r4, r5, r6, pc}

00016df2 <api_stop>:
{
   16df2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   16df4:	2280      	movs	r2, #128	; 0x80
   16df6:	f7ff ffe7 	bl	16dc8 <stop>
}
   16dfa:	bd08      	pop	{r3, pc}

00016dfc <async_start>:
{
   16dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e00:	4606      	mov	r6, r0
   16e02:	4690      	mov	r8, r2
   16e04:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   16e06:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16e08:	4629      	mov	r1, r5
   16e0a:	f7ff ff68 	bl	16cde <get_sub_data>
   16e0e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   16e10:	9906      	ldr	r1, [sp, #24]
   16e12:	3008      	adds	r0, #8
   16e14:	f7ff ff95 	bl	16d42 <set_starting_state>
	if (err < 0) {
   16e18:	2800      	cmp	r0, #0
   16e1a:	db09      	blt.n	16e30 <async_start+0x34>
	subdata->cb = cb;
   16e1c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   16e20:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   16e22:	4629      	mov	r1, r5
   16e24:	4630      	mov	r0, r6
   16e26:	f7ff ff61 	bl	16cec <get_sub_config>
   16e2a:	6803      	ldr	r3, [r0, #0]
   16e2c:	4798      	blx	r3
	return 0;
   16e2e:	2000      	movs	r0, #0
}
   16e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016e34 <api_start>:
{
   16e34:	b510      	push	{r4, lr}
   16e36:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   16e38:	2480      	movs	r4, #128	; 0x80
   16e3a:	9400      	str	r4, [sp, #0]
   16e3c:	f7ff ffde 	bl	16dfc <async_start>
}
   16e40:	b002      	add	sp, #8
   16e42:	bd10      	pop	{r4, pc}

00016e44 <onoff_started_callback>:
{
   16e44:	b510      	push	{r4, lr}
   16e46:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   16e48:	b2c9      	uxtb	r1, r1
   16e4a:	f7ff ff53 	bl	16cf4 <get_onoff_manager>
	notify(mgr, 0);
   16e4e:	2100      	movs	r1, #0
   16e50:	47a0      	blx	r4
}
   16e52:	bd10      	pop	{r4, pc}

00016e54 <hfclk_start>:
{
   16e54:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   16e56:	2001      	movs	r0, #1
   16e58:	f7fb ff20 	bl	12c9c <nrfx_clock_start>
}
   16e5c:	bd08      	pop	{r3, pc}

00016e5e <lfclk_start>:
{
   16e5e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   16e60:	2000      	movs	r0, #0
   16e62:	f7fb ff1b 	bl	12c9c <nrfx_clock_start>
}
   16e66:	bd08      	pop	{r3, pc}

00016e68 <hfclk_stop>:
{
   16e68:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   16e6a:	2001      	movs	r0, #1
   16e6c:	f000 fc8f 	bl	1778e <nrfx_clock_stop>
}
   16e70:	bd08      	pop	{r3, pc}

00016e72 <lfclk_stop>:
{
   16e72:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   16e74:	2000      	movs	r0, #0
   16e76:	f000 fc8a 	bl	1778e <nrfx_clock_stop>
}
   16e7a:	bd08      	pop	{r3, pc}

00016e7c <k_msleep>:
{
   16e7c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   16e7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   16e82:	17c1      	asrs	r1, r0, #31
   16e84:	03c9      	lsls	r1, r1, #15
   16e86:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   16e8a:	03c0      	lsls	r0, r0, #15
   16e8c:	f240 33e7 	movw	r3, #999	; 0x3e7
   16e90:	18c0      	adds	r0, r0, r3
   16e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e96:	f04f 0300 	mov.w	r3, #0
   16e9a:	f141 0100 	adc.w	r1, r1, #0
   16e9e:	f7f9 f951 	bl	10144 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   16ea2:	f7fe fa93 	bl	153cc <z_impl_k_sleep>
}
   16ea6:	bd08      	pop	{r3, pc}

00016ea8 <blocking_start_callback>:
{
   16ea8:	b508      	push	{r3, lr}
   16eaa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   16eac:	f7fd fee6 	bl	14c7c <z_impl_k_sem_give>
}
   16eb0:	bd08      	pop	{r3, pc}

00016eb2 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   16eb2:	b508      	push	{r3, lr}
   16eb4:	4608      	mov	r0, r1
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   16eb6:	4611      	mov	r1, r2
   16eb8:	f7fb fe08 	bl	12acc <psa_generate_random>
	if (status != PSA_SUCCESS) {
   16ebc:	b900      	cbnz	r0, 16ec0 <entropy_psa_crypto_rng_get_entropy+0xe>
		return -EIO;
	}

	return 0;
}
   16ebe:	bd08      	pop	{r3, pc}
		return -EIO;
   16ec0:	f06f 0004 	mvn.w	r0, #4
   16ec4:	e7fb      	b.n	16ebe <entropy_psa_crypto_rng_get_entropy+0xc>

00016ec6 <entropy_psa_crypto_rng_init>:
{
   16ec6:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   16ec8:	f000 fc13 	bl	176f2 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   16ecc:	b900      	cbnz	r0, 16ed0 <entropy_psa_crypto_rng_init+0xa>
}
   16ece:	bd08      	pop	{r3, pc}
		return -EIO;
   16ed0:	f06f 0004 	mvn.w	r0, #4
   16ed4:	e7fb      	b.n	16ece <entropy_psa_crypto_rng_init+0x8>

00016ed6 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   16ed6:	460b      	mov	r3, r1
   16ed8:	b139      	cbz	r1, 16eea <sys_slist_remove+0x14>
	return node->next;
   16eda:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   16edc:	6019      	str	r1, [r3, #0]
	return list->tail;
   16ede:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   16ee0:	428a      	cmp	r2, r1
   16ee2:	d009      	beq.n	16ef8 <sys_slist_remove+0x22>
	parent->next = child;
   16ee4:	2300      	movs	r3, #0
   16ee6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16ee8:	4770      	bx	lr
	return node->next;
   16eea:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   16eec:	6003      	str	r3, [r0, #0]
	return list->tail;
   16eee:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   16ef0:	428a      	cmp	r2, r1
   16ef2:	d1f7      	bne.n	16ee4 <sys_slist_remove+0xe>
	list->tail = node;
   16ef4:	6043      	str	r3, [r0, #4]
}
   16ef6:	e7f5      	b.n	16ee4 <sys_slist_remove+0xe>
	list->tail = node;
   16ef8:	6043      	str	r3, [r0, #4]
}
   16efa:	e7f3      	b.n	16ee4 <sys_slist_remove+0xe>

00016efc <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16efc:	b508      	push	{r3, lr}
   16efe:	460a      	mov	r2, r1
	return list->head;
   16f00:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16f02:	2100      	movs	r1, #0
   16f04:	e001      	b.n	16f0a <sys_slist_find_and_remove+0xe>
   16f06:	4619      	mov	r1, r3
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	b12b      	cbz	r3, 16f18 <sys_slist_find_and_remove+0x1c>
   16f0c:	4293      	cmp	r3, r2
   16f0e:	d1fa      	bne.n	16f06 <sys_slist_find_and_remove+0xa>
   16f10:	f7ff ffe1 	bl	16ed6 <sys_slist_remove>
   16f14:	2001      	movs	r0, #1
   16f16:	e000      	b.n	16f1a <sys_slist_find_and_remove+0x1e>
   16f18:	2000      	movs	r0, #0
   16f1a:	bd08      	pop	{r3, pc}

00016f1c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   16f1c:	b570      	push	{r4, r5, r6, lr}
   16f1e:	4604      	mov	r4, r0
   16f20:	460d      	mov	r5, r1
   16f22:	4616      	mov	r6, r2
	return list->head;
   16f24:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   16f26:	b133      	cbz	r3, 16f36 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   16f28:	f7ff ffe8 	bl	16efc <sys_slist_find_and_remove>
   16f2c:	b970      	cbnz	r0, 16f4c <gpio_manage_callback+0x30>
			if (!set) {
   16f2e:	b91e      	cbnz	r6, 16f38 <gpio_manage_callback+0x1c>
				return -EINVAL;
   16f30:	f06f 0015 	mvn.w	r0, #21
   16f34:	e006      	b.n	16f44 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   16f36:	b132      	cbz	r2, 16f46 <gpio_manage_callback+0x2a>
   16f38:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   16f3a:	602b      	str	r3, [r5, #0]
	list->head = node;
   16f3c:	6025      	str	r5, [r4, #0]
	return list->tail;
   16f3e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   16f40:	b143      	cbz	r3, 16f54 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   16f42:	2000      	movs	r0, #0
}
   16f44:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   16f46:	f06f 0015 	mvn.w	r0, #21
   16f4a:	e7fb      	b.n	16f44 <gpio_manage_callback+0x28>
	if (set) {
   16f4c:	2e00      	cmp	r6, #0
   16f4e:	d1f3      	bne.n	16f38 <gpio_manage_callback+0x1c>
	return 0;
   16f50:	2000      	movs	r0, #0
   16f52:	e7f7      	b.n	16f44 <gpio_manage_callback+0x28>
	list->tail = node;
   16f54:	6065      	str	r5, [r4, #4]
   16f56:	2000      	movs	r0, #0
}
   16f58:	e7f4      	b.n	16f44 <gpio_manage_callback+0x28>

00016f5a <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   16f5a:	b570      	push	{r4, r5, r6, lr}
   16f5c:	460e      	mov	r6, r1
   16f5e:	4615      	mov	r5, r2
	return list->head;
   16f60:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16f62:	b121      	cbz	r1, 16f6e <gpio_fire_callbacks+0x14>
	return node->next;
   16f64:	680c      	ldr	r4, [r1, #0]
   16f66:	b13c      	cbz	r4, 16f78 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f68:	b931      	cbnz	r1, 16f78 <gpio_fire_callbacks+0x1e>
   16f6a:	460c      	mov	r4, r1
   16f6c:	e004      	b.n	16f78 <gpio_fire_callbacks+0x1e>
   16f6e:	460c      	mov	r4, r1
   16f70:	e002      	b.n	16f78 <gpio_fire_callbacks+0x1e>
   16f72:	4623      	mov	r3, r4
   16f74:	4621      	mov	r1, r4
   16f76:	461c      	mov	r4, r3
   16f78:	b171      	cbz	r1, 16f98 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   16f7a:	688a      	ldr	r2, [r1, #8]
   16f7c:	402a      	ands	r2, r5
   16f7e:	d002      	beq.n	16f86 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16f80:	684b      	ldr	r3, [r1, #4]
   16f82:	4630      	mov	r0, r6
   16f84:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16f86:	2c00      	cmp	r4, #0
   16f88:	d0f3      	beq.n	16f72 <gpio_fire_callbacks+0x18>
	return node->next;
   16f8a:	6823      	ldr	r3, [r4, #0]
   16f8c:	2b00      	cmp	r3, #0
   16f8e:	d0f1      	beq.n	16f74 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f90:	2c00      	cmp	r4, #0
   16f92:	d1ef      	bne.n	16f74 <gpio_fire_callbacks+0x1a>
   16f94:	4623      	mov	r3, r4
   16f96:	e7ed      	b.n	16f74 <gpio_fire_callbacks+0x1a>
		}
	}
}
   16f98:	bd70      	pop	{r4, r5, r6, pc}

00016f9a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16f9a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   16f9e:	0580      	lsls	r0, r0, #22
   16fa0:	0d80      	lsrs	r0, r0, #22
   16fa2:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   16fa6:	d033      	beq.n	17010 <get_drive+0x76>
   16fa8:	d816      	bhi.n	16fd8 <get_drive+0x3e>
   16faa:	2806      	cmp	r0, #6
   16fac:	d02c      	beq.n	17008 <get_drive+0x6e>
   16fae:	d906      	bls.n	16fbe <get_drive+0x24>
   16fb0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   16fb4:	d10d      	bne.n	16fd2 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   16fb6:	2301      	movs	r3, #1
   16fb8:	700b      	strb	r3, [r1, #0]
	return 0;
   16fba:	2000      	movs	r0, #0
		break;
   16fbc:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16fbe:	b300      	cbz	r0, 17002 <get_drive+0x68>
   16fc0:	2802      	cmp	r0, #2
   16fc2:	d103      	bne.n	16fcc <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   16fc4:	2304      	movs	r3, #4
   16fc6:	700b      	strb	r3, [r1, #0]
	return 0;
   16fc8:	2000      	movs	r0, #0
		break;
   16fca:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16fcc:	f06f 0015 	mvn.w	r0, #21
   16fd0:	4770      	bx	lr
   16fd2:	f06f 0015 	mvn.w	r0, #21
   16fd6:	4770      	bx	lr
   16fd8:	f240 2302 	movw	r3, #514	; 0x202
   16fdc:	4298      	cmp	r0, r3
   16fde:	d01b      	beq.n	17018 <get_drive+0x7e>
   16fe0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   16fe4:	d103      	bne.n	16fee <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   16fe6:	2303      	movs	r3, #3
   16fe8:	700b      	strb	r3, [r1, #0]
	return 0;
   16fea:	2000      	movs	r0, #0
		break;
   16fec:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16fee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   16ff2:	d103      	bne.n	16ffc <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   16ff4:	2302      	movs	r3, #2
   16ff6:	700b      	strb	r3, [r1, #0]
	return 0;
   16ff8:	2000      	movs	r0, #0
		break;
   16ffa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16ffc:	f06f 0015 	mvn.w	r0, #21
   17000:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   17002:	2000      	movs	r0, #0
   17004:	7008      	strb	r0, [r1, #0]
		break;
   17006:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   17008:	2306      	movs	r3, #6
   1700a:	700b      	strb	r3, [r1, #0]
	return 0;
   1700c:	2000      	movs	r0, #0
		break;
   1700e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   17010:	2307      	movs	r3, #7
   17012:	700b      	strb	r3, [r1, #0]
	return 0;
   17014:	2000      	movs	r0, #0
		break;
   17016:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   17018:	2305      	movs	r3, #5
   1701a:	700b      	strb	r3, [r1, #0]
	return 0;
   1701c:	2000      	movs	r0, #0
}
   1701e:	4770      	bx	lr

00017020 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   17020:	f010 0f10 	tst.w	r0, #16
   17024:	d104      	bne.n	17030 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   17026:	f010 0f20 	tst.w	r0, #32
   1702a:	d103      	bne.n	17034 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1702c:	2000      	movs	r0, #0
   1702e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   17030:	2003      	movs	r0, #3
   17032:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   17034:	2001      	movs	r0, #1
}
   17036:	4770      	bx	lr

00017038 <gpio_nrfx_port_get_raw>:
	return port->config;
   17038:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1703a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1703c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1703e:	600b      	str	r3, [r1, #0]
}
   17040:	2000      	movs	r0, #0
   17042:	4770      	bx	lr

00017044 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   17044:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17046:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   17048:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1704c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   17050:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   17052:	60d9      	str	r1, [r3, #12]
}
   17054:	2000      	movs	r0, #0
   17056:	4770      	bx	lr

00017058 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   17058:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1705a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1705c:	6099      	str	r1, [r3, #8]
}
   1705e:	2000      	movs	r0, #0
   17060:	4770      	bx	lr

00017062 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   17062:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17064:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   17066:	60d9      	str	r1, [r3, #12]
}
   17068:	2000      	movs	r0, #0
   1706a:	4770      	bx	lr

0001706c <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1706c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1706e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   17070:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   17072:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   17076:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   17078:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   1707a:	60d3      	str	r3, [r2, #12]
}
   1707c:	2000      	movs	r0, #0
   1707e:	4770      	bx	lr

00017080 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   17080:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   17084:	d007      	beq.n	17096 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17086:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1708a:	d00d      	beq.n	170a8 <get_trigger+0x28>
   1708c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   17090:	d008      	beq.n	170a4 <get_trigger+0x24>
   17092:	2001      	movs	r0, #1
}
   17094:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17096:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1709a:	d001      	beq.n	170a0 <get_trigger+0x20>
   1709c:	2005      	movs	r0, #5
   1709e:	4770      	bx	lr
   170a0:	2004      	movs	r0, #4
   170a2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   170a4:	2002      	movs	r0, #2
   170a6:	4770      	bx	lr
   170a8:	2003      	movs	r0, #3
   170aa:	4770      	bx	lr

000170ac <gpio_nrfx_manage_callback>:
{
   170ac:	b508      	push	{r3, lr}
	return port->data;
   170ae:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   170b0:	3004      	adds	r0, #4
   170b2:	f7ff ff33 	bl	16f1c <gpio_manage_callback>
}
   170b6:	bd08      	pop	{r3, pc}

000170b8 <nrfx_gpio_handler>:
{
   170b8:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   170ba:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   170be:	0940      	lsrs	r0, r0, #5
   170c0:	f7fa fe72 	bl	11da8 <get_dev>
	if (port == NULL) {
   170c4:	b130      	cbz	r0, 170d4 <nrfx_gpio_handler+0x1c>
   170c6:	4601      	mov	r1, r0
	return port->data;
   170c8:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   170ca:	2201      	movs	r2, #1
   170cc:	40a2      	lsls	r2, r4
   170ce:	3004      	adds	r0, #4
   170d0:	f7ff ff43 	bl	16f5a <gpio_fire_callbacks>
}
   170d4:	bd10      	pop	{r4, pc}

000170d6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   170d6:	b500      	push	{lr}
	*state = &config->states[0];
   170d8:	6843      	ldr	r3, [r0, #4]
   170da:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   170dc:	e001      	b.n	170e2 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   170de:	3308      	adds	r3, #8
   170e0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   170e2:	6813      	ldr	r3, [r2, #0]
   170e4:	f890 c008 	ldrb.w	ip, [r0, #8]
   170e8:	f8d0 e004 	ldr.w	lr, [r0, #4]
   170ec:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   170f0:	4563      	cmp	r3, ip
   170f2:	d205      	bcs.n	17100 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   170f4:	f893 c005 	ldrb.w	ip, [r3, #5]
   170f8:	458c      	cmp	ip, r1
   170fa:	d1f0      	bne.n	170de <pinctrl_lookup_state+0x8>
			return 0;
   170fc:	2000      	movs	r0, #0
   170fe:	e001      	b.n	17104 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   17100:	f06f 0001 	mvn.w	r0, #1
}
   17104:	f85d fb04 	ldr.w	pc, [sp], #4

00017108 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   17108:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1710a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1710c:	f04f 0120 	mov.w	r1, #32
   17110:	f3ef 8311 	mrs	r3, BASEPRI
   17114:	f381 8812 	msr	BASEPRI_MAX, r1
   17118:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1711c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   17120:	b131      	cbz	r1, 17130 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17122:	2100      	movs	r1, #0
   17124:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   17128:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1712c:	2101      	movs	r1, #1
   1712e:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   17130:	f383 8811 	msr	BASEPRI, r3
   17134:	f3bf 8f6f 	isb	sy
}
   17138:	4770      	bx	lr

0001713a <uarte_nrfx_isr_int>:
{
   1713a:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1713c:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   1713e:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   17140:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   17144:	f413 7f80 	tst.w	r3, #256	; 0x100
   17148:	d002      	beq.n	17150 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1714a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1714e:	b9d3      	cbnz	r3, 17186 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17150:	686b      	ldr	r3, [r5, #4]
   17152:	f013 0f10 	tst.w	r3, #16
   17156:	d015      	beq.n	17184 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   17158:	f04f 0220 	mov.w	r2, #32
   1715c:	f3ef 8311 	mrs	r3, BASEPRI
   17160:	f382 8812 	msr	BASEPRI_MAX, r2
   17164:	f3bf 8f6f 	isb	sy
   17168:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1716c:	b112      	cbz	r2, 17174 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1716e:	2200      	movs	r2, #0
   17170:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   17174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   17178:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1717c:	f383 8811 	msr	BASEPRI, r3
   17180:	f3bf 8f6f 	isb	sy
}
   17184:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   17186:	f7ff ffbf 	bl	17108 <endtx_isr>
   1718a:	e7e1      	b.n	17150 <uarte_nrfx_isr_int+0x16>

0001718c <uarte_nrfx_configure>:
{
   1718c:	b570      	push	{r4, r5, r6, lr}
   1718e:	b082      	sub	sp, #8
   17190:	4606      	mov	r6, r0
   17192:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   17194:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   17196:	794b      	ldrb	r3, [r1, #5]
   17198:	2b01      	cmp	r3, #1
   1719a:	d006      	beq.n	171aa <uarte_nrfx_configure+0x1e>
   1719c:	2b03      	cmp	r3, #3
   1719e:	d011      	beq.n	171c4 <uarte_nrfx_configure+0x38>
   171a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   171a4:	4618      	mov	r0, r3
   171a6:	b002      	add	sp, #8
   171a8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   171aa:	2300      	movs	r3, #0
   171ac:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   171b0:	79a3      	ldrb	r3, [r4, #6]
   171b2:	2b03      	cmp	r3, #3
   171b4:	d137      	bne.n	17226 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   171b6:	79e3      	ldrb	r3, [r4, #7]
   171b8:	b143      	cbz	r3, 171cc <uarte_nrfx_configure+0x40>
   171ba:	2b01      	cmp	r3, #1
   171bc:	d010      	beq.n	171e0 <uarte_nrfx_configure+0x54>
   171be:	f06f 0385 	mvn.w	r3, #133	; 0x85
   171c2:	e7ef      	b.n	171a4 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   171c4:	2310      	movs	r3, #16
   171c6:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   171ca:	e7f1      	b.n	171b0 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   171cc:	2300      	movs	r3, #0
   171ce:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   171d2:	7923      	ldrb	r3, [r4, #4]
   171d4:	b143      	cbz	r3, 171e8 <uarte_nrfx_configure+0x5c>
   171d6:	2b02      	cmp	r3, #2
   171d8:	d021      	beq.n	1721e <uarte_nrfx_configure+0x92>
   171da:	f06f 0385 	mvn.w	r3, #133	; 0x85
   171de:	e7e1      	b.n	171a4 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   171e0:	2301      	movs	r3, #1
   171e2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   171e6:	e7f4      	b.n	171d2 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   171e8:	2300      	movs	r3, #0
   171ea:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   171ee:	6821      	ldr	r1, [r4, #0]
   171f0:	4630      	mov	r0, r6
   171f2:	f7fa ffeb 	bl	121cc <baudrate_set>
   171f6:	4603      	mov	r3, r0
   171f8:	b9c0      	cbnz	r0, 1722c <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   171fa:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   171fc:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   171fe:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   17202:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   17206:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1720a:	4331      	orrs	r1, r6
   1720c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1720e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   17212:	3504      	adds	r5, #4
   17214:	e894 0003 	ldmia.w	r4, {r0, r1}
   17218:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   1721c:	e7c2      	b.n	171a4 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1721e:	230e      	movs	r3, #14
   17220:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   17224:	e7e3      	b.n	171ee <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   17226:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1722a:	e7bb      	b.n	171a4 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1722c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17230:	e7b8      	b.n	171a4 <uarte_nrfx_configure+0x18>

00017232 <uarte_nrfx_config_get>:
{
   17232:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   17234:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   17236:	3304      	adds	r3, #4
   17238:	e893 0003 	ldmia.w	r3, {r0, r1}
   1723c:	e882 0003 	stmia.w	r2, {r0, r1}
}
   17240:	2000      	movs	r0, #0
   17242:	4770      	bx	lr

00017244 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   17244:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17246:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   17248:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1724c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   17250:	4770      	bx	lr

00017252 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   17252:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   17254:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   17256:	685b      	ldr	r3, [r3, #4]
   17258:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1725c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   17260:	b929      	cbnz	r1, 1726e <is_tx_ready+0x1c>
   17262:	b933      	cbnz	r3, 17272 <is_tx_ready+0x20>
   17264:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   17268:	b92b      	cbnz	r3, 17276 <is_tx_ready+0x24>
   1726a:	2000      	movs	r0, #0
   1726c:	4770      	bx	lr
   1726e:	2001      	movs	r0, #1
   17270:	4770      	bx	lr
   17272:	2000      	movs	r0, #0
   17274:	4770      	bx	lr
   17276:	2001      	movs	r0, #1
}
   17278:	4770      	bx	lr

0001727a <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1727a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1727c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1727e:	2208      	movs	r2, #8
   17280:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   17284:	4770      	bx	lr

00017286 <tx_start>:
{
   17286:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   17288:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1728a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1728c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17290:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17294:	2200      	movs	r2, #0
   17296:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1729a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1729e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   172a2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   172a6:	685b      	ldr	r3, [r3, #4]
   172a8:	f013 0f10 	tst.w	r3, #16
   172ac:	d102      	bne.n	172b4 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172ae:	2301      	movs	r3, #1
   172b0:	60a3      	str	r3, [r4, #8]
}
   172b2:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   172b4:	2101      	movs	r1, #1
   172b6:	f7ff ffe0 	bl	1727a <uarte_enable>
    p_reg->INTENSET = mask;
   172ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   172be:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   172c2:	e7f4      	b.n	172ae <tx_start+0x28>

000172c4 <uarte_nrfx_poll_in>:
{
   172c4:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   172c6:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   172c8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   172ca:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   172cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   172d0:	b15a      	cbz	r2, 172ea <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   172d2:	6962      	ldr	r2, [r4, #20]
   172d4:	7812      	ldrb	r2, [r2, #0]
   172d6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   172d8:	2000      	movs	r0, #0
   172da:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   172de:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172e2:	2201      	movs	r2, #1
   172e4:	601a      	str	r2, [r3, #0]
}
   172e6:	bc10      	pop	{r4}
   172e8:	4770      	bx	lr
		return -1;
   172ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172ee:	e7fa      	b.n	172e6 <uarte_nrfx_poll_in+0x22>

000172f0 <k_msleep>:
{
   172f0:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   172f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   172f6:	17c1      	asrs	r1, r0, #31
   172f8:	03c9      	lsls	r1, r1, #15
   172fa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   172fe:	03c0      	lsls	r0, r0, #15
   17300:	f240 33e7 	movw	r3, #999	; 0x3e7
   17304:	18c0      	adds	r0, r0, r3
   17306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1730a:	f04f 0300 	mov.w	r3, #0
   1730e:	f141 0100 	adc.w	r1, r1, #0
   17312:	f7f8 ff17 	bl	10144 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   17316:	f7fe f859 	bl	153cc <z_impl_k_sleep>
}
   1731a:	bd08      	pop	{r3, pc}

0001731c <wait_tx_ready>:
{
   1731c:	b570      	push	{r4, r5, r6, lr}
   1731e:	4606      	mov	r6, r0
   17320:	e013      	b.n	1734a <wait_tx_ready+0x2e>
		if (res) {
   17322:	b17d      	cbz	r5, 17344 <wait_tx_ready+0x28>
	__asm__ volatile(
   17324:	f04f 0320 	mov.w	r3, #32
   17328:	f3ef 8411 	mrs	r4, BASEPRI
   1732c:	f383 8812 	msr	BASEPRI_MAX, r3
   17330:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17334:	4630      	mov	r0, r6
   17336:	f7ff ff8c 	bl	17252 <is_tx_ready>
   1733a:	b998      	cbnz	r0, 17364 <wait_tx_ready+0x48>
	__asm__ volatile(
   1733c:	f384 8811 	msr	BASEPRI, r4
   17340:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   17344:	2001      	movs	r0, #1
   17346:	f7ff ffd3 	bl	172f0 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1734a:	2464      	movs	r4, #100	; 0x64
   1734c:	4630      	mov	r0, r6
   1734e:	f7ff ff80 	bl	17252 <is_tx_ready>
   17352:	4605      	mov	r5, r0
   17354:	2800      	cmp	r0, #0
   17356:	d1e4      	bne.n	17322 <wait_tx_ready+0x6>
   17358:	2001      	movs	r0, #1
   1735a:	f000 f9d0 	bl	176fe <nrfx_busy_wait>
   1735e:	3c01      	subs	r4, #1
   17360:	d1f4      	bne.n	1734c <wait_tx_ready+0x30>
   17362:	e7de      	b.n	17322 <wait_tx_ready+0x6>
}
   17364:	4620      	mov	r0, r4
   17366:	bd70      	pop	{r4, r5, r6, pc}

00017368 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   17368:	b510      	push	{r4, lr}
   1736a:	b082      	sub	sp, #8
   1736c:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1736e:	aa01      	add	r2, sp, #4
   17370:	f7ff feb1 	bl	170d6 <pinctrl_lookup_state>
	if (ret < 0) {
   17374:	2800      	cmp	r0, #0
   17376:	db05      	blt.n	17384 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   17378:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1737a:	6822      	ldr	r2, [r4, #0]
   1737c:	7919      	ldrb	r1, [r3, #4]
   1737e:	6818      	ldr	r0, [r3, #0]
   17380:	f7fa fe1c 	bl	11fbc <pinctrl_configure_pins>
}
   17384:	b002      	add	sp, #8
   17386:	bd10      	pop	{r4, pc}

00017388 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   17388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1738c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1738e:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   17390:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   17392:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17396:	2100      	movs	r1, #0
   17398:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1739c:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   173a0:	68f8      	ldr	r0, [r7, #12]
   173a2:	f7ff ffe1 	bl	17368 <pinctrl_apply_state>
	if (err < 0) {
   173a6:	1e05      	subs	r5, r0, #0
   173a8:	db35      	blt.n	17416 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   173aa:	f108 0104 	add.w	r1, r8, #4
   173ae:	4620      	mov	r0, r4
   173b0:	f7ff feec 	bl	1718c <uarte_nrfx_configure>
	if (err) {
   173b4:	4605      	mov	r5, r0
   173b6:	bb70      	cbnz	r0, 17416 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   173b8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   173ba:	f013 0f02 	tst.w	r3, #2
   173be:	d12d      	bne.n	1741c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   173c0:	2308      	movs	r3, #8
   173c2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   173c6:	7a3b      	ldrb	r3, [r7, #8]
   173c8:	b95b      	cbnz	r3, 173e2 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ca:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   173ce:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   173d2:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   173d6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   173da:	2301      	movs	r3, #1
   173dc:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   173e0:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   173e2:	687b      	ldr	r3, [r7, #4]
   173e4:	f013 0f02 	tst.w	r3, #2
   173e8:	d103      	bne.n	173f2 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   173ea:	f44f 7380 	mov.w	r3, #256	; 0x100
   173ee:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   173f2:	687b      	ldr	r3, [r7, #4]
   173f4:	f013 0f10 	tst.w	r3, #16
   173f8:	d003      	beq.n	17402 <uarte_instance_init+0x7a>
   173fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   173fe:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   17402:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17406:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1740a:	2300      	movs	r3, #0
   1740c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17410:	2301      	movs	r3, #1
   17412:	60b3      	str	r3, [r6, #8]
   17414:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   17416:	4628      	mov	r0, r5
   17418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1741c:	4641      	mov	r1, r8
   1741e:	4630      	mov	r0, r6
   17420:	f7fa ffaa 	bl	12378 <endtx_stoptx_ppi_init>
		if (err < 0) {
   17424:	2800      	cmp	r0, #0
   17426:	dacb      	bge.n	173c0 <uarte_instance_init+0x38>
			return err;
   17428:	4605      	mov	r5, r0
   1742a:	e7f4      	b.n	17416 <uarte_instance_init+0x8e>

0001742c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1742c:	b510      	push	{r4, lr}
   1742e:	4604      	mov	r4, r0
   17430:	2200      	movs	r2, #0
   17432:	2101      	movs	r1, #1
   17434:	2008      	movs	r0, #8
   17436:	f7ff fb3a 	bl	16aae <z_arm_irq_priority_set>
   1743a:	2008      	movs	r0, #8
   1743c:	f7ff fb32 	bl	16aa4 <arch_irq_enable>
   17440:	2100      	movs	r1, #0
   17442:	4620      	mov	r0, r4
   17444:	f7ff ffa0 	bl	17388 <uarte_instance_init>
   17448:	bd10      	pop	{r4, pc}

0001744a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1744a:	4770      	bx	lr

0001744c <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1744c:	1a40      	subs	r0, r0, r1
}
   1744e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17452:	4770      	bx	lr

00017454 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17454:	f100 0350 	add.w	r3, r0, #80	; 0x50
   17458:	009b      	lsls	r3, r3, #2
   1745a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1745c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17460:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   17464:	6818      	ldr	r0, [r3, #0]
}
   17466:	3800      	subs	r0, #0
   17468:	bf18      	it	ne
   1746a:	2001      	movne	r0, #1
   1746c:	4770      	bx	lr

0001746e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1746e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   17472:	009b      	lsls	r3, r3, #2
   17474:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1747a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1747e:	2200      	movs	r2, #0
   17480:	601a      	str	r2, [r3, #0]
   17482:	681b      	ldr	r3, [r3, #0]
}
   17484:	4770      	bx	lr

00017486 <absolute_time_to_cc>:
}
   17486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1748a:	4770      	bx	lr

0001748c <full_int_lock>:
	__asm__ volatile(
   1748c:	f04f 0320 	mov.w	r3, #32
   17490:	f3ef 8011 	mrs	r0, BASEPRI
   17494:	f383 8812 	msr	BASEPRI_MAX, r3
   17498:	f3bf 8f6f 	isb	sy
}
   1749c:	4770      	bx	lr

0001749e <full_int_unlock>:
	__asm__ volatile(
   1749e:	f380 8811 	msr	BASEPRI, r0
   174a2:	f3bf 8f6f 	isb	sy
}
   174a6:	4770      	bx	lr

000174a8 <compare_set>:
{
   174a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   174aa:	b083      	sub	sp, #12
   174ac:	4604      	mov	r4, r0
   174ae:	4617      	mov	r7, r2
   174b0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   174b2:	f7fa ffe7 	bl	12484 <compare_int_lock>
   174b6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   174b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174ba:	9301      	str	r3, [sp, #4]
   174bc:	9b08      	ldr	r3, [sp, #32]
   174be:	9300      	str	r3, [sp, #0]
   174c0:	463a      	mov	r2, r7
   174c2:	462b      	mov	r3, r5
   174c4:	4620      	mov	r0, r4
   174c6:	f7fb f89b 	bl	12600 <compare_set_nolocks>
   174ca:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   174cc:	4631      	mov	r1, r6
   174ce:	4620      	mov	r0, r4
   174d0:	f7fb f826 	bl	12520 <compare_int_unlock>
}
   174d4:	4628      	mov	r0, r5
   174d6:	b003      	add	sp, #12
   174d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000174da <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   174da:	460b      	mov	r3, r1
   174dc:	b139      	cbz	r1, 174ee <sys_slist_remove+0x14>
	return node->next;
   174de:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   174e0:	6019      	str	r1, [r3, #0]
	return list->tail;
   174e2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   174e4:	428a      	cmp	r2, r1
   174e6:	d009      	beq.n	174fc <sys_slist_remove+0x22>
	parent->next = child;
   174e8:	2300      	movs	r3, #0
   174ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   174ec:	4770      	bx	lr
	return node->next;
   174ee:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   174f0:	6003      	str	r3, [r0, #0]
	return list->tail;
   174f2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   174f4:	428a      	cmp	r2, r1
   174f6:	d1f7      	bne.n	174e8 <sys_slist_remove+0xe>
	list->tail = node;
   174f8:	6043      	str	r3, [r0, #4]
}
   174fa:	e7f5      	b.n	174e8 <sys_slist_remove+0xe>
	list->tail = node;
   174fc:	6043      	str	r3, [r0, #4]
}
   174fe:	e7f3      	b.n	174e8 <sys_slist_remove+0xe>

00017500 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17500:	b508      	push	{r3, lr}
   17502:	460a      	mov	r2, r1
	return list->head;
   17504:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17506:	2100      	movs	r1, #0
   17508:	e001      	b.n	1750e <sys_slist_find_and_remove+0xe>
   1750a:	4619      	mov	r1, r3
   1750c:	681b      	ldr	r3, [r3, #0]
   1750e:	b12b      	cbz	r3, 1751c <sys_slist_find_and_remove+0x1c>
   17510:	4293      	cmp	r3, r2
   17512:	d1fa      	bne.n	1750a <sys_slist_find_and_remove+0xa>
   17514:	f7ff ffe1 	bl	174da <sys_slist_remove>
   17518:	2001      	movs	r0, #1
   1751a:	e000      	b.n	1751e <sys_slist_find_and_remove+0x1e>
   1751c:	2000      	movs	r0, #0
   1751e:	bd08      	pop	{r3, pc}

00017520 <k_uptime_delta>:
{
   17520:	b510      	push	{r4, lr}
   17522:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   17524:	f000 fdd6 	bl	180d4 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   17528:	468e      	mov	lr, r1
   1752a:	014a      	lsls	r2, r1, #5
   1752c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   17530:	0143      	lsls	r3, r0, #5
   17532:	1a1b      	subs	r3, r3, r0
   17534:	eb62 0201 	sbc.w	r2, r2, r1
   17538:	0092      	lsls	r2, r2, #2
   1753a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1753e:	009b      	lsls	r3, r3, #2
   17540:	181b      	adds	r3, r3, r0
   17542:	eb42 0101 	adc.w	r1, r2, r1
   17546:	00c9      	lsls	r1, r1, #3
   17548:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1754c:	f3c3 3310 	ubfx	r3, r3, #12, #17
   17550:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   17554:	0bc9      	lsrs	r1, r1, #15
	delta = uptime - *reftime;
   17556:	6820      	ldr	r0, [r4, #0]
   17558:	6862      	ldr	r2, [r4, #4]
   1755a:	1a18      	subs	r0, r3, r0
	*reftime = uptime;
   1755c:	6023      	str	r3, [r4, #0]
   1755e:	6061      	str	r1, [r4, #4]
}
   17560:	eb61 0102 	sbc.w	r1, r1, r2
   17564:	bd10      	pop	{r4, pc}

00017566 <sleeping_thread_init>:
{
   17566:	b538      	push	{r3, r4, r5, lr}
   17568:	4604      	mov	r4, r0
   1756a:	460d      	mov	r5, r1
	k_sem_init(&thread->sem, 0, 1);
   1756c:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   1756e:	2201      	movs	r2, #1
   17570:	2100      	movs	r1, #0
   17572:	f000 fc02 	bl	17d7a <z_impl_k_sem_init>
	thread->context = context;
   17576:	6165      	str	r5, [r4, #20]
}
   17578:	bd38      	pop	{r3, r4, r5, pc}

0001757a <nrf_modem_os_busywait>:
{
   1757a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1757c:	f000 fdae 	bl	180dc <z_impl_k_busy_wait>
}
   17580:	bd08      	pop	{r3, pc}

00017582 <nrf_modem_os_timedwait>:
{
   17582:	b570      	push	{r4, r5, r6, lr}
   17584:	b088      	sub	sp, #32
   17586:	4605      	mov	r5, r0
   17588:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   1758a:	f000 faff 	bl	17b8c <nrf_modem_is_initialized>
   1758e:	2800      	cmp	r0, #0
   17590:	d069      	beq.n	17666 <nrf_modem_os_timedwait+0xe4>
	return z_impl_k_uptime_ticks();
   17592:	f000 fd9f 	bl	180d4 <z_impl_k_uptime_ticks>
   17596:	014a      	lsls	r2, r1, #5
   17598:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1759c:	0143      	lsls	r3, r0, #5
   1759e:	1a1b      	subs	r3, r3, r0
   175a0:	eb62 0201 	sbc.w	r2, r2, r1
   175a4:	0092      	lsls	r2, r2, #2
   175a6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   175aa:	009b      	lsls	r3, r3, #2
   175ac:	181b      	adds	r3, r3, r0
   175ae:	eb42 0201 	adc.w	r2, r2, r1
   175b2:	00d2      	lsls	r2, r2, #3
   175b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   175b8:	f3c3 3310 	ubfx	r3, r3, #12, #17
   175bc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   175c0:	0bd2      	lsrs	r2, r2, #15
	start = k_uptime_get();
   175c2:	9300      	str	r3, [sp, #0]
   175c4:	9201      	str	r2, [sp, #4]
	if (*timeout == 0) {
   175c6:	6823      	ldr	r3, [r4, #0]
   175c8:	2b00      	cmp	r3, #0
   175ca:	d03d      	beq.n	17648 <nrf_modem_os_timedwait+0xc6>
	if (*timeout < 0) {
   175cc:	2b00      	cmp	r3, #0
   175ce:	db40      	blt.n	17652 <nrf_modem_os_timedwait+0xd0>
	sleeping_thread_init(&thread, context);
   175d0:	4629      	mov	r1, r5
   175d2:	a802      	add	r0, sp, #8
   175d4:	f7ff ffc7 	bl	17566 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   175d8:	a802      	add	r0, sp, #8
   175da:	f7fb f985 	bl	128e8 <sleeping_thread_add>
   175de:	2800      	cmp	r0, #0
   175e0:	d044      	beq.n	1766c <nrf_modem_os_timedwait+0xea>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   175e2:	6820      	ldr	r0, [r4, #0]
   175e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   175e8:	d037      	beq.n	1765a <nrf_modem_os_timedwait+0xd8>
   175ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   175ee:	17c1      	asrs	r1, r0, #31
   175f0:	03c9      	lsls	r1, r1, #15
   175f2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   175f6:	03c0      	lsls	r0, r0, #15
   175f8:	f240 33e7 	movw	r3, #999	; 0x3e7
   175fc:	18c0      	adds	r0, r0, r3
   175fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17602:	f04f 0300 	mov.w	r3, #0
   17606:	f141 0100 	adc.w	r1, r1, #0
   1760a:	f7f8 fd9b 	bl	10144 <__aeabi_uldivmod>
   1760e:	4602      	mov	r2, r0
   17610:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17612:	a803      	add	r0, sp, #12
   17614:	f7fd fb56 	bl	14cc4 <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   17618:	a802      	add	r0, sp, #8
   1761a:	f7fb f989 	bl	12930 <sleeping_thread_remove>
	if (!nrf_modem_is_initialized()) {
   1761e:	f000 fab5 	bl	17b8c <nrf_modem_is_initialized>
   17622:	b328      	cbz	r0, 17670 <nrf_modem_os_timedwait+0xee>
	if (*timeout == SYS_FOREVER_MS) {
   17624:	6825      	ldr	r5, [r4, #0]
   17626:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1762a:	d024      	beq.n	17676 <nrf_modem_os_timedwait+0xf4>
	remaining = *timeout - k_uptime_delta(&start);
   1762c:	17ee      	asrs	r6, r5, #31
   1762e:	4668      	mov	r0, sp
   17630:	f7ff ff76 	bl	17520 <k_uptime_delta>
   17634:	1a2d      	subs	r5, r5, r0
   17636:	eb66 0601 	sbc.w	r6, r6, r1
	*timeout = remaining > 0 ? remaining : 0;
   1763a:	2e00      	cmp	r6, #0
   1763c:	db11      	blt.n	17662 <nrf_modem_os_timedwait+0xe0>
   1763e:	6025      	str	r5, [r4, #0]
	if (*timeout == 0) {
   17640:	b1dd      	cbz	r5, 1767a <nrf_modem_os_timedwait+0xf8>
	return 0;
   17642:	2000      	movs	r0, #0
}
   17644:	b008      	add	sp, #32
   17646:	bd70      	pop	{r4, r5, r6, pc}
	z_impl_k_yield();
   17648:	f7fd fe2e 	bl	152a8 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1764c:	f06f 000a 	mvn.w	r0, #10
   17650:	e7f8      	b.n	17644 <nrf_modem_os_timedwait+0xc2>
		*timeout = SYS_FOREVER_MS;
   17652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17656:	6023      	str	r3, [r4, #0]
   17658:	e7ba      	b.n	175d0 <nrf_modem_os_timedwait+0x4e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1765a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1765e:	4613      	mov	r3, r2
   17660:	e7d7      	b.n	17612 <nrf_modem_os_timedwait+0x90>
	*timeout = remaining > 0 ? remaining : 0;
   17662:	2500      	movs	r5, #0
   17664:	e7eb      	b.n	1763e <nrf_modem_os_timedwait+0xbc>
		return -NRF_ESHUTDOWN;
   17666:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1766a:	e7eb      	b.n	17644 <nrf_modem_os_timedwait+0xc2>
		return 0;
   1766c:	2000      	movs	r0, #0
   1766e:	e7e9      	b.n	17644 <nrf_modem_os_timedwait+0xc2>
		return -NRF_ESHUTDOWN;
   17670:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   17674:	e7e6      	b.n	17644 <nrf_modem_os_timedwait+0xc2>
		return 0;
   17676:	2000      	movs	r0, #0
   17678:	e7e4      	b.n	17644 <nrf_modem_os_timedwait+0xc2>
		return -NRF_EAGAIN;
   1767a:	f06f 000a 	mvn.w	r0, #10
   1767e:	e7e1      	b.n	17644 <nrf_modem_os_timedwait+0xc2>

00017680 <nrf_modem_os_errno_set>:
{
   17680:	b510      	push	{r4, lr}
   17682:	4604      	mov	r4, r0
	errno = err_code;
   17684:	f7ff fb04 	bl	16c90 <__errno>
   17688:	6004      	str	r4, [r0, #0]
}
   1768a:	bd10      	pop	{r4, pc}

0001768c <nrf_modem_os_is_in_isr>:
{
   1768c:	b508      	push	{r3, lr}
	return k_is_in_isr();
   1768e:	f000 fb43 	bl	17d18 <k_is_in_isr>
}
   17692:	bd08      	pop	{r3, pc}

00017694 <nrf_modem_os_sem_give>:
{
   17694:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   17696:	f7fd faf1 	bl	14c7c <z_impl_k_sem_give>
}
   1769a:	bd08      	pop	{r3, pc}

0001769c <nrf_modem_os_sem_take>:
{
   1769c:	b510      	push	{r4, lr}
   1769e:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   176a0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   176a4:	d018      	beq.n	176d8 <nrf_modem_os_sem_take+0x3c>
   176a6:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   176aa:	17d9      	asrs	r1, r3, #31
   176ac:	03c9      	lsls	r1, r1, #15
   176ae:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   176b2:	03db      	lsls	r3, r3, #15
   176b4:	f240 32e7 	movw	r2, #999	; 0x3e7
   176b8:	1898      	adds	r0, r3, r2
   176ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   176be:	f04f 0300 	mov.w	r3, #0
   176c2:	f141 0100 	adc.w	r1, r1, #0
   176c6:	f7f8 fd3d 	bl	10144 <__aeabi_uldivmod>
   176ca:	4602      	mov	r2, r0
   176cc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   176ce:	4620      	mov	r0, r4
   176d0:	f7fd faf8 	bl	14cc4 <z_impl_k_sem_take>
	if (err) {
   176d4:	b920      	cbnz	r0, 176e0 <nrf_modem_os_sem_take+0x44>
}
   176d6:	bd10      	pop	{r4, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   176d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   176dc:	4613      	mov	r3, r2
   176de:	e7f6      	b.n	176ce <nrf_modem_os_sem_take+0x32>
		return -NRF_EAGAIN;
   176e0:	f06f 000a 	mvn.w	r0, #10
   176e4:	e7f7      	b.n	176d6 <nrf_modem_os_sem_take+0x3a>

000176e6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   176e6:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   176e8:	2000      	movs	r0, #0
   176ea:	f7ff fa4a 	bl	16b82 <sys_arch_reboot>

000176ee <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   176ee:	2000      	movs	r0, #0
   176f0:	4770      	bx	lr

000176f2 <psa_crypto_init>:
}
   176f2:	2000      	movs	r0, #0
   176f4:	4770      	bx	lr

000176f6 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   176f6:	4770      	bx	lr

000176f8 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   176f8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   176fa:	4780      	blx	r0
}
   176fc:	bd08      	pop	{r3, pc}

000176fe <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   176fe:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   17700:	f000 fcec 	bl	180dc <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   17704:	bd08      	pop	{r3, pc}

00017706 <nrf_clock_is_running>:
    switch (domain)
   17706:	b119      	cbz	r1, 17710 <nrf_clock_is_running+0xa>
   17708:	2901      	cmp	r1, #1
   1770a:	d00e      	beq.n	1772a <nrf_clock_is_running+0x24>
   1770c:	2000      	movs	r0, #0
   1770e:	4770      	bx	lr
            if (p_clk_src != NULL)
   17710:	b122      	cbz	r2, 1771c <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17712:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   17716:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1771a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1771c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   17720:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17724:	d10e      	bne.n	17744 <nrf_clock_is_running+0x3e>
    return false;
   17726:	2000      	movs	r0, #0
   17728:	4770      	bx	lr
            if (p_clk_src != NULL)
   1772a:	b122      	cbz	r2, 17736 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1772c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   17730:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   17734:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17736:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1773a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1773e:	d103      	bne.n	17748 <nrf_clock_is_running+0x42>
    return false;
   17740:	2000      	movs	r0, #0
   17742:	4770      	bx	lr
                return true;
   17744:	2001      	movs	r0, #1
   17746:	4770      	bx	lr
                return true;
   17748:	2001      	movs	r0, #1
}
   1774a:	4770      	bx	lr

0001774c <clock_initial_lfclksrc_get>:
}
   1774c:	2001      	movs	r0, #1
   1774e:	4770      	bx	lr

00017750 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   17750:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   17752:	2005      	movs	r0, #5
   17754:	f7f9 fc9e 	bl	11094 <arch_irq_is_enabled>
   17758:	b100      	cbz	r0, 1775c <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   1775a:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1775c:	2005      	movs	r0, #5
   1775e:	f7ff f9a1 	bl	16aa4 <arch_irq_enable>
}
   17762:	e7fa      	b.n	1775a <nrfx_power_clock_irq_init+0xa>

00017764 <clock_lfclksrc_tweak>:
{
   17764:	b538      	push	{r3, r4, r5, lr}
   17766:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   17768:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1776a:	2b02      	cmp	r3, #2
   1776c:	d006      	beq.n	1777c <clock_lfclksrc_tweak+0x18>
   1776e:	2b01      	cmp	r3, #1
   17770:	d000      	beq.n	17774 <clock_lfclksrc_tweak+0x10>
   17772:	2300      	movs	r3, #0
    if (!is_correct_clk)
   17774:	461d      	mov	r5, r3
   17776:	b11b      	cbz	r3, 17780 <clock_lfclksrc_tweak+0x1c>
}
   17778:	4628      	mov	r0, r5
   1777a:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1777c:	2301      	movs	r3, #1
   1777e:	e7f9      	b.n	17774 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   17780:	2000      	movs	r0, #0
   17782:	f7fb fa2d 	bl	12be0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   17786:	f7ff ffe1 	bl	1774c <clock_initial_lfclksrc_get>
   1778a:	7020      	strb	r0, [r4, #0]
   1778c:	e7f4      	b.n	17778 <clock_lfclksrc_tweak+0x14>

0001778e <nrfx_clock_stop>:
{
   1778e:	b508      	push	{r3, lr}
    clock_stop(domain);
   17790:	f7fb fa26 	bl	12be0 <clock_stop>
}
   17794:	bd08      	pop	{r3, pc}

00017796 <nrf_gpiote_event_configure>:
{
   17796:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17798:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1779c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   177a0:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   177a4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   177a8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177ac:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   177b0:	0212      	lsls	r2, r2, #8
   177b2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   177b6:	041b      	lsls	r3, r3, #16
   177b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177bc:	431a      	orrs	r2, r3
   177be:	4314      	orrs	r4, r2
   177c0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   177c4:	bc10      	pop	{r4}
   177c6:	4770      	bx	lr

000177c8 <nrf_gpiote_task_configure>:
{
   177c8:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   177ca:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   177ce:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   177d2:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   177d6:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   177da:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177de:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   177e2:	0212      	lsls	r2, r2, #8
   177e4:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   177e8:	041b      	lsls	r3, r3, #16
   177ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177ee:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   177f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   177f4:	051b      	lsls	r3, r3, #20
   177f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   177fa:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   177fc:	4314      	orrs	r4, r2
   177fe:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   17802:	bc10      	pop	{r4}
   17804:	4770      	bx	lr

00017806 <pin_is_task_output>:
{
   17806:	b510      	push	{r4, lr}
   17808:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1780a:	f7fb fb51 	bl	12eb0 <pin_is_output>
   1780e:	b128      	cbz	r0, 1781c <pin_is_task_output+0x16>
   17810:	4620      	mov	r0, r4
   17812:	f7fb fb37 	bl	12e84 <pin_in_use_by_te>
   17816:	b118      	cbz	r0, 17820 <pin_is_task_output+0x1a>
   17818:	2001      	movs	r0, #1
   1781a:	e000      	b.n	1781e <pin_is_task_output+0x18>
   1781c:	2000      	movs	r0, #0
}
   1781e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   17820:	2000      	movs	r0, #0
   17822:	e7fc      	b.n	1781e <pin_is_task_output+0x18>

00017824 <pin_is_input>:
{
   17824:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   17826:	f7fb fb43 	bl	12eb0 <pin_is_output>
   1782a:	f080 0001 	eor.w	r0, r0, #1
}
   1782e:	b2c0      	uxtb	r0, r0
   17830:	bd08      	pop	{r3, pc}

00017832 <gpiote_polarity_to_trigger>:
}
   17832:	4770      	bx	lr

00017834 <gpiote_trigger_to_polarity>:
}
   17834:	4770      	bx	lr

00017836 <is_level>:
}
   17836:	2803      	cmp	r0, #3
   17838:	bf94      	ite	ls
   1783a:	2000      	movls	r0, #0
   1783c:	2001      	movhi	r0, #1
   1783e:	4770      	bx	lr

00017840 <rpc_handle_ctrl_message>:
   17840:	2902      	cmp	r1, #2
   17842:	b510      	push	{r4, lr}
   17844:	4604      	mov	r4, r0
   17846:	d005      	beq.n	17854 <rpc_handle_ctrl_message+0x14>
   17848:	2904      	cmp	r1, #4
   1784a:	d001      	beq.n	17850 <rpc_handle_ctrl_message+0x10>
   1784c:	2901      	cmp	r1, #1
   1784e:	d107      	bne.n	17860 <rpc_handle_ctrl_message+0x20>
   17850:	2000      	movs	r0, #0
   17852:	bd10      	pop	{r4, pc}
   17854:	6880      	ldr	r0, [r0, #8]
   17856:	2800      	cmp	r0, #0
   17858:	d0fa      	beq.n	17850 <rpc_handle_ctrl_message+0x10>
   1785a:	f7fb f8ed 	bl	12a38 <nrf_modem_os_shm_tx_free>
   1785e:	e7f7      	b.n	17850 <rpc_handle_ctrl_message+0x10>
   17860:	6880      	ldr	r0, [r0, #8]
   17862:	b108      	cbz	r0, 17868 <rpc_handle_ctrl_message+0x28>
   17864:	f7fb f8e8 	bl	12a38 <nrf_modem_os_shm_tx_free>
   17868:	4620      	mov	r0, r4
   1786a:	f7fb ffc9 	bl	13800 <rpc_transport_msg_rx_free>
   1786e:	e7ef      	b.n	17850 <rpc_handle_ctrl_message+0x10>

00017870 <rpc_list_preambles_init>:
   17870:	2200      	movs	r2, #0
   17872:	b510      	push	{r4, lr}
   17874:	6804      	ldr	r4, [r0, #0]
   17876:	4294      	cmp	r4, r2
   17878:	d100      	bne.n	1787c <rpc_list_preambles_init+0xc>
   1787a:	bd10      	pop	{r4, pc}
   1787c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   17880:	684b      	ldr	r3, [r1, #4]
   17882:	3201      	adds	r2, #1
   17884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17888:	f043 0303 	orr.w	r3, r3, #3
   1788c:	604b      	str	r3, [r1, #4]
   1788e:	e7f2      	b.n	17876 <rpc_list_preambles_init+0x6>

00017890 <rpc_transport_ipc_data_rx_resume>:
   17890:	2004      	movs	r0, #4
   17892:	f7fb bf61 	b.w	13758 <nrfx_ipc_receive_event_enable>

00017896 <rpc_transport_ipc_data_rx_suspend>:
   17896:	2004      	movs	r0, #4
   17898:	f7fb bf66 	b.w	13768 <nrfx_ipc_receive_event_disable>

0001789c <rpc_transport_ipc_shutdown>:
   1789c:	f7fb bf36 	b.w	1370c <nrfx_ipc_uninit>

000178a0 <rpc_transport_ipc_msg_alloc>:
   178a0:	b538      	push	{r3, r4, r5, lr}
   178a2:	4604      	mov	r4, r0
   178a4:	2500      	movs	r5, #0
   178a6:	1d03      	adds	r3, r0, #4
   178a8:	6822      	ldr	r2, [r4, #0]
   178aa:	42aa      	cmp	r2, r5
   178ac:	d801      	bhi.n	178b2 <rpc_transport_ipc_msg_alloc+0x12>
   178ae:	2300      	movs	r3, #0
   178b0:	e019      	b.n	178e6 <rpc_transport_ipc_msg_alloc+0x46>
   178b2:	f04f 0200 	mov.w	r2, #0
   178b6:	e8d3 0fcf 	ldaexb	r0, [r3]
   178ba:	2803      	cmp	r0, #3
   178bc:	d104      	bne.n	178c8 <rpc_transport_ipc_msg_alloc+0x28>
   178be:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   178c2:	f1bc 0f00 	cmp.w	ip, #0
   178c6:	d1f6      	bne.n	178b6 <rpc_transport_ipc_msg_alloc+0x16>
   178c8:	d002      	beq.n	178d0 <rpc_transport_ipc_msg_alloc+0x30>
   178ca:	3308      	adds	r3, #8
   178cc:	3501      	adds	r5, #1
   178ce:	e7eb      	b.n	178a8 <rpc_transport_ipc_msg_alloc+0x8>
   178d0:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   178d4:	4618      	mov	r0, r3
   178d6:	2240      	movs	r2, #64	; 0x40
   178d8:	2100      	movs	r1, #0
   178da:	f000 fc40 	bl	1815e <memset>
   178de:	4603      	mov	r3, r0
   178e0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   178e4:	60a0      	str	r0, [r4, #8]
   178e6:	4618      	mov	r0, r3
   178e8:	bd38      	pop	{r3, r4, r5, pc}

000178ea <rpc_client_msg_from_rpc_msg_get>:
   178ea:	3008      	adds	r0, #8
   178ec:	4770      	bx	lr

000178ee <rpc_client_msg_alloc>:
   178ee:	b538      	push	{r3, r4, r5, lr}
   178f0:	4605      	mov	r5, r0
   178f2:	b920      	cbnz	r0, 178fe <rpc_client_msg_alloc+0x10>
   178f4:	f7fb ff7e 	bl	137f4 <rpc_transport_msg_alloc>
   178f8:	b980      	cbnz	r0, 1791c <rpc_client_msg_alloc+0x2e>
   178fa:	2000      	movs	r0, #0
   178fc:	bd38      	pop	{r3, r4, r5, pc}
   178fe:	f7fb f891 	bl	12a24 <nrf_modem_os_shm_tx_alloc>
   17902:	4604      	mov	r4, r0
   17904:	2800      	cmp	r0, #0
   17906:	d0f8      	beq.n	178fa <rpc_client_msg_alloc+0xc>
   17908:	f7fb ff74 	bl	137f4 <rpc_transport_msg_alloc>
   1790c:	b938      	cbnz	r0, 1791e <rpc_client_msg_alloc+0x30>
   1790e:	4620      	mov	r0, r4
   17910:	f7fb f892 	bl	12a38 <nrf_modem_os_shm_tx_free>
   17914:	2001      	movs	r0, #1
   17916:	f7fb f851 	bl	129bc <nrf_modem_os_event_notify>
   1791a:	e7ee      	b.n	178fa <rpc_client_msg_alloc+0xc>
   1791c:	462c      	mov	r4, r5
   1791e:	60c5      	str	r5, [r0, #12]
   17920:	f840 4f08 	str.w	r4, [r0, #8]!
   17924:	e7ea      	b.n	178fc <rpc_client_msg_alloc+0xe>

00017926 <rpc_client_msg_send>:
   17926:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1792a:	4610      	mov	r0, r2
   1792c:	f840 1d08 	str.w	r1, [r0, #-8]!
   17930:	f7fb bf72 	b.w	13818 <rpc_transport_msg_send>

00017934 <rpc_client_msg_rx_free>:
   17934:	3808      	subs	r0, #8
   17936:	f7fb bf63 	b.w	13800 <rpc_transport_msg_rx_free>

0001793a <rpc_client_msg_data_rx_free>:
   1793a:	f7fb bf67 	b.w	1380c <rpc_transport_msg_data_rx_free>

0001793e <rpc_client_msg_data_tx_alloc>:
   1793e:	f7fb b871 	b.w	12a24 <nrf_modem_os_shm_tx_alloc>

00017942 <rpc_client_msg_data_tx_free>:
   17942:	b508      	push	{r3, lr}
   17944:	f7fb f878 	bl	12a38 <nrf_modem_os_shm_tx_free>
   17948:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1794c:	2001      	movs	r0, #1
   1794e:	f7fb b835 	b.w	129bc <nrf_modem_os_event_notify>

00017952 <sockaddr_init>:
   17952:	2904      	cmp	r1, #4
   17954:	b570      	push	{r4, r5, r6, lr}
   17956:	4605      	mov	r5, r0
   17958:	4616      	mov	r6, r2
   1795a:	d003      	beq.n	17964 <sockaddr_init+0x12>
   1795c:	2910      	cmp	r1, #16
   1795e:	d015      	beq.n	1798c <sockaddr_init+0x3a>
   17960:	2400      	movs	r4, #0
   17962:	e011      	b.n	17988 <sockaddr_init+0x36>
   17964:	2010      	movs	r0, #16
   17966:	f7fb f84b 	bl	12a00 <nrf_modem_os_alloc>
   1796a:	4604      	mov	r4, r0
   1796c:	2800      	cmp	r0, #0
   1796e:	d0f7      	beq.n	17960 <sockaddr_init+0xe>
   17970:	220f      	movs	r2, #15
   17972:	2100      	movs	r1, #0
   17974:	3001      	adds	r0, #1
   17976:	f000 fbf2 	bl	1815e <memset>
   1797a:	2310      	movs	r3, #16
   1797c:	7023      	strb	r3, [r4, #0]
   1797e:	2301      	movs	r3, #1
   17980:	8126      	strh	r6, [r4, #8]
   17982:	6063      	str	r3, [r4, #4]
   17984:	682b      	ldr	r3, [r5, #0]
   17986:	60e3      	str	r3, [r4, #12]
   17988:	4620      	mov	r0, r4
   1798a:	bd70      	pop	{r4, r5, r6, pc}
   1798c:	2024      	movs	r0, #36	; 0x24
   1798e:	f7fb f837 	bl	12a00 <nrf_modem_os_alloc>
   17992:	4604      	mov	r4, r0
   17994:	2800      	cmp	r0, #0
   17996:	d0e3      	beq.n	17960 <sockaddr_init+0xe>
   17998:	2223      	movs	r2, #35	; 0x23
   1799a:	2100      	movs	r1, #0
   1799c:	3001      	adds	r0, #1
   1799e:	f000 fbde 	bl	1815e <memset>
   179a2:	2324      	movs	r3, #36	; 0x24
   179a4:	7023      	strb	r3, [r4, #0]
   179a6:	2302      	movs	r3, #2
   179a8:	4628      	mov	r0, r5
   179aa:	6063      	str	r3, [r4, #4]
   179ac:	8126      	strh	r6, [r4, #8]
   179ae:	f104 0310 	add.w	r3, r4, #16
   179b2:	f105 0210 	add.w	r2, r5, #16
   179b6:	f850 1b04 	ldr.w	r1, [r0], #4
   179ba:	4290      	cmp	r0, r2
   179bc:	f843 1b04 	str.w	r1, [r3], #4
   179c0:	d1f9      	bne.n	179b6 <sockaddr_init+0x64>
   179c2:	e7e1      	b.n	17988 <sockaddr_init+0x36>

000179c4 <sock_pollcb>:
   179c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   179c6:	2500      	movs	r5, #0
   179c8:	6803      	ldr	r3, [r0, #0]
   179ca:	4604      	mov	r4, r0
   179cc:	9300      	str	r3, [sp, #0]
   179ce:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   179d0:	4668      	mov	r0, sp
   179d2:	f8ad 5006 	strh.w	r5, [sp, #6]
   179d6:	f8ad 3004 	strh.w	r3, [sp, #4]
   179da:	f000 f87d 	bl	17ad8 <nrf_poll_one>
   179de:	b138      	cbz	r0, 179f0 <sock_pollcb+0x2c>
   179e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   179e2:	4668      	mov	r0, sp
   179e4:	4798      	blx	r3
   179e6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   179ea:	b10b      	cbz	r3, 179f0 <sock_pollcb+0x2c>
   179ec:	6365      	str	r5, [r4, #52]	; 0x34
   179ee:	63a5      	str	r5, [r4, #56]	; 0x38
   179f0:	b003      	add	sp, #12
   179f2:	bd30      	pop	{r4, r5, pc}

000179f4 <sock_pkt_append>:
   179f4:	2300      	movs	r3, #0
   179f6:	600b      	str	r3, [r1, #0]
   179f8:	6883      	ldr	r3, [r0, #8]
   179fa:	b913      	cbnz	r3, 17a02 <sock_pkt_append+0xe>
   179fc:	e9c0 1101 	strd	r1, r1, [r0, #4]
   17a00:	4770      	bx	lr
   17a02:	6019      	str	r1, [r3, #0]
   17a04:	6081      	str	r1, [r0, #8]
   17a06:	4770      	bx	lr

00017a08 <sock_is_stream>:
   17a08:	6900      	ldr	r0, [r0, #16]
   17a0a:	1e43      	subs	r3, r0, #1
   17a0c:	4258      	negs	r0, r3
   17a0e:	4158      	adcs	r0, r3
   17a10:	4770      	bx	lr

00017a12 <sock_is_datagram>:
   17a12:	6900      	ldr	r0, [r0, #16]
   17a14:	1e83      	subs	r3, r0, #2
   17a16:	4258      	negs	r0, r3
   17a18:	4158      	adcs	r0, r3
   17a1a:	4770      	bx	lr

00017a1c <sock_proto_is_secure>:
   17a1c:	6940      	ldr	r0, [r0, #20]
   17a1e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   17a22:	d005      	beq.n	17a30 <sock_proto_is_secure+0x14>
   17a24:	f240 1311 	movw	r3, #273	; 0x111
   17a28:	1ac3      	subs	r3, r0, r3
   17a2a:	4258      	negs	r0, r3
   17a2c:	4158      	adcs	r0, r3
   17a2e:	4770      	bx	lr
   17a30:	2001      	movs	r0, #1
   17a32:	4770      	bx	lr

00017a34 <sock_is_attaching>:
   17a34:	7f00      	ldrb	r0, [r0, #28]
   17a36:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17a3a:	4770      	bx	lr

00017a3c <sock_is_nonblock>:
   17a3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   17a3e:	f000 0001 	and.w	r0, r0, #1
   17a42:	4770      	bx	lr

00017a44 <sock_is_local_closed>:
   17a44:	7f00      	ldrb	r0, [r0, #28]
   17a46:	f3c0 0040 	ubfx	r0, r0, #1, #1
   17a4a:	4770      	bx	lr

00017a4c <sock_is_eof>:
   17a4c:	6903      	ldr	r3, [r0, #16]
   17a4e:	2b01      	cmp	r3, #1
   17a50:	d105      	bne.n	17a5e <sock_is_eof+0x12>
   17a52:	6980      	ldr	r0, [r0, #24]
   17a54:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   17a58:	4258      	negs	r0, r3
   17a5a:	4158      	adcs	r0, r3
   17a5c:	4770      	bx	lr
   17a5e:	2000      	movs	r0, #0
   17a60:	4770      	bx	lr

00017a62 <sock_has_stream_error>:
   17a62:	7f00      	ldrb	r0, [r0, #28]
   17a64:	09c0      	lsrs	r0, r0, #7
   17a66:	4770      	bx	lr

00017a68 <sock_has_error>:
   17a68:	6983      	ldr	r3, [r0, #24]
   17a6a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   17a6e:	bf14      	ite	ne
   17a70:	2001      	movne	r0, #1
   17a72:	2000      	moveq	r0, #0
   17a74:	4770      	bx	lr

00017a76 <sock_has_pollcb>:
   17a76:	6b40      	ldr	r0, [r0, #52]	; 0x34
   17a78:	3800      	subs	r0, #0
   17a7a:	bf18      	it	ne
   17a7c:	2001      	movne	r0, #1
   17a7e:	4770      	bx	lr

00017a80 <sock_can_read>:
   17a80:	6840      	ldr	r0, [r0, #4]
   17a82:	3800      	subs	r0, #0
   17a84:	bf18      	it	ne
   17a86:	2001      	movne	r0, #1
   17a88:	4770      	bx	lr

00017a8a <sock_can_accept>:
   17a8a:	7f40      	ldrb	r0, [r0, #29]
   17a8c:	3800      	subs	r0, #0
   17a8e:	bf18      	it	ne
   17a90:	2001      	movne	r0, #1
   17a92:	4770      	bx	lr

00017a94 <sock_can_send>:
   17a94:	b510      	push	{r4, lr}
   17a96:	4602      	mov	r2, r0
   17a98:	6904      	ldr	r4, [r0, #16]
   17a9a:	f7ff ffbf 	bl	17a1c <sock_proto_is_secure>
   17a9e:	2c01      	cmp	r4, #1
   17aa0:	4601      	mov	r1, r0
   17aa2:	7f13      	ldrb	r3, [r2, #28]
   17aa4:	d103      	bne.n	17aae <sock_can_send+0x1a>
   17aa6:	071c      	lsls	r4, r3, #28
   17aa8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   17aac:	d50b      	bpl.n	17ac6 <sock_can_send+0x32>
   17aae:	b931      	cbnz	r1, 17abe <sock_can_send+0x2a>
   17ab0:	07d9      	lsls	r1, r3, #31
   17ab2:	d40b      	bmi.n	17acc <sock_can_send+0x38>
   17ab4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17ab8:	f1c3 0001 	rsb	r0, r3, #1
   17abc:	e003      	b.n	17ac6 <sock_can_send+0x32>
   17abe:	069a      	lsls	r2, r3, #26
   17ac0:	f3c3 1040 	ubfx	r0, r3, #5, #1
   17ac4:	d4f4      	bmi.n	17ab0 <sock_can_send+0x1c>
   17ac6:	f000 0001 	and.w	r0, r0, #1
   17aca:	bd10      	pop	{r4, pc}
   17acc:	2000      	movs	r0, #0
   17ace:	e7fa      	b.n	17ac6 <sock_can_send+0x32>

00017ad0 <on_conf_dnssrv_res>:
   17ad0:	f000 b84d 	b.w	17b6e <res_forward>

00017ad4 <on_getifaddrs_res>:
   17ad4:	f000 b84b 	b.w	17b6e <res_forward>

00017ad8 <nrf_poll_one>:
   17ad8:	b538      	push	{r3, r4, r5, lr}
   17ada:	4604      	mov	r4, r0
   17adc:	6800      	ldr	r0, [r0, #0]
   17ade:	f7fc fa7f 	bl	13fe0 <sock_find>
   17ae2:	4605      	mov	r5, r0
   17ae4:	b928      	cbnz	r0, 17af2 <nrf_poll_one+0x1a>
   17ae6:	2001      	movs	r0, #1
   17ae8:	88e3      	ldrh	r3, [r4, #6]
   17aea:	f043 0320 	orr.w	r3, r3, #32
   17aee:	80e3      	strh	r3, [r4, #6]
   17af0:	bd38      	pop	{r3, r4, r5, pc}
   17af2:	f7ff ffa7 	bl	17a44 <sock_is_local_closed>
   17af6:	2800      	cmp	r0, #0
   17af8:	d1f5      	bne.n	17ae6 <nrf_poll_one+0xe>
   17afa:	4628      	mov	r0, r5
   17afc:	f7ff ffb4 	bl	17a68 <sock_has_error>
   17b00:	b1f8      	cbz	r0, 17b42 <nrf_poll_one+0x6a>
   17b02:	88e3      	ldrh	r3, [r4, #6]
   17b04:	f043 0308 	orr.w	r3, r3, #8
   17b08:	80e3      	strh	r3, [r4, #6]
   17b0a:	88a3      	ldrh	r3, [r4, #4]
   17b0c:	07da      	lsls	r2, r3, #31
   17b0e:	d507      	bpl.n	17b20 <nrf_poll_one+0x48>
   17b10:	4628      	mov	r0, r5
   17b12:	f7ff ffb5 	bl	17a80 <sock_can_read>
   17b16:	b1e8      	cbz	r0, 17b54 <nrf_poll_one+0x7c>
   17b18:	88e3      	ldrh	r3, [r4, #6]
   17b1a:	f043 0301 	orr.w	r3, r3, #1
   17b1e:	80e3      	strh	r3, [r4, #6]
   17b20:	88a3      	ldrh	r3, [r4, #4]
   17b22:	075b      	lsls	r3, r3, #29
   17b24:	d507      	bpl.n	17b36 <nrf_poll_one+0x5e>
   17b26:	4628      	mov	r0, r5
   17b28:	f7ff ffb4 	bl	17a94 <sock_can_send>
   17b2c:	b118      	cbz	r0, 17b36 <nrf_poll_one+0x5e>
   17b2e:	88e3      	ldrh	r3, [r4, #6]
   17b30:	f043 0304 	orr.w	r3, r3, #4
   17b34:	80e3      	strh	r3, [r4, #6]
   17b36:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   17b3a:	3800      	subs	r0, #0
   17b3c:	bf18      	it	ne
   17b3e:	2001      	movne	r0, #1
   17b40:	e7d6      	b.n	17af0 <nrf_poll_one+0x18>
   17b42:	4628      	mov	r0, r5
   17b44:	f7ff ff82 	bl	17a4c <sock_is_eof>
   17b48:	2800      	cmp	r0, #0
   17b4a:	d0de      	beq.n	17b0a <nrf_poll_one+0x32>
   17b4c:	88e3      	ldrh	r3, [r4, #6]
   17b4e:	f043 0310 	orr.w	r3, r3, #16
   17b52:	e7d9      	b.n	17b08 <nrf_poll_one+0x30>
   17b54:	4628      	mov	r0, r5
   17b56:	f7ff ff98 	bl	17a8a <sock_can_accept>
   17b5a:	2800      	cmp	r0, #0
   17b5c:	d1dc      	bne.n	17b18 <nrf_poll_one+0x40>
   17b5e:	4628      	mov	r0, r5
   17b60:	f7ff ff74 	bl	17a4c <sock_is_eof>
   17b64:	2800      	cmp	r0, #0
   17b66:	d1d7      	bne.n	17b18 <nrf_poll_one+0x40>
   17b68:	e7da      	b.n	17b20 <nrf_poll_one+0x48>

00017b6a <res_cookie_get>:
   17b6a:	68c0      	ldr	r0, [r0, #12]
   17b6c:	4770      	bx	lr

00017b6e <res_forward>:
   17b6e:	68c3      	ldr	r3, [r0, #12]
   17b70:	6018      	str	r0, [r3, #0]
   17b72:	2001      	movs	r0, #1
   17b74:	4770      	bx	lr

00017b76 <rpc_dfu_event_handler>:
   17b76:	b510      	push	{r4, lr}
   17b78:	4604      	mov	r4, r0
   17b7a:	6800      	ldr	r0, [r0, #0]
   17b7c:	b108      	cbz	r0, 17b82 <rpc_dfu_event_handler+0xc>
   17b7e:	f7ff fedc 	bl	1793a <rpc_client_msg_data_rx_free>
   17b82:	68e0      	ldr	r0, [r4, #12]
   17b84:	b108      	cbz	r0, 17b8a <rpc_dfu_event_handler+0x14>
   17b86:	6004      	str	r4, [r0, #0]
   17b88:	2001      	movs	r0, #1
   17b8a:	bd10      	pop	{r4, pc}

00017b8c <nrf_modem_is_initialized>:
   17b8c:	f7fc bcee 	b.w	1456c <nrf_modem_state_is_initialized>

00017b90 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   17b90:	b160      	cbz	r0, 17bac <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   17b92:	68c3      	ldr	r3, [r0, #12]
   17b94:	785a      	ldrb	r2, [r3, #1]
   17b96:	f012 0f01 	tst.w	r2, #1
   17b9a:	d003      	beq.n	17ba4 <z_device_is_ready+0x14>
   17b9c:	781b      	ldrb	r3, [r3, #0]
   17b9e:	b11b      	cbz	r3, 17ba8 <z_device_is_ready+0x18>
   17ba0:	2000      	movs	r0, #0
   17ba2:	4770      	bx	lr
   17ba4:	2000      	movs	r0, #0
   17ba6:	4770      	bx	lr
   17ba8:	2001      	movs	r0, #1
   17baa:	4770      	bx	lr
		return false;
   17bac:	2000      	movs	r0, #0
}
   17bae:	4770      	bx	lr

00017bb0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17bb2:	4605      	mov	r5, r0
   17bb4:	460e      	mov	r6, r1
	__asm__ volatile(
   17bb6:	f04f 0320 	mov.w	r3, #32
   17bba:	f3ef 8711 	mrs	r7, BASEPRI
   17bbe:	f383 8812 	msr	BASEPRI_MAX, r3
   17bc2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   17bc6:	f7fd fc2b 	bl	15420 <z_impl_z_current_get>
   17bca:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   17bcc:	4631      	mov	r1, r6
   17bce:	4628      	mov	r0, r5
   17bd0:	f7ff fd89 	bl	176e6 <k_sys_fatal_error_handler>
	__asm__ volatile(
   17bd4:	f387 8811 	msr	BASEPRI, r7
   17bd8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   17bdc:	4620      	mov	r0, r4
   17bde:	f7f9 fd71 	bl	116c4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   17be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017be4 <z_early_memset>:
{
   17be4:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   17be6:	f000 faba 	bl	1815e <memset>
}
   17bea:	bd08      	pop	{r3, pc}

00017bec <z_early_memcpy>:
{
   17bec:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17bee:	f000 faa9 	bl	18144 <memcpy>
}
   17bf2:	bd08      	pop	{r3, pc}

00017bf4 <k_heap_init>:
{
   17bf4:	b510      	push	{r4, lr}
   17bf6:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   17bfa:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   17bfc:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   17bfe:	f7fe fb7a 	bl	162f6 <sys_heap_init>
}
   17c02:	bd10      	pop	{r4, pc}

00017c04 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c08:	b085      	sub	sp, #20
   17c0a:	4607      	mov	r7, r0
   17c0c:	9103      	str	r1, [sp, #12]
   17c0e:	4692      	mov	sl, r2
   17c10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17c12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17c14:	4628      	mov	r0, r5
   17c16:	4621      	mov	r1, r4
   17c18:	f000 fa66 	bl	180e8 <sys_clock_timeout_end_calc>
   17c1c:	4606      	mov	r6, r0
   17c1e:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17c20:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17c24:	bf08      	it	eq
   17c26:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   17c2a:	d00d      	beq.n	17c48 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17c2c:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   17c30:	f04f 0320 	mov.w	r3, #32
   17c34:	f3ef 8511 	mrs	r5, BASEPRI
   17c38:	f383 8812 	msr	BASEPRI_MAX, r3
   17c3c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   17c40:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   17c44:	4644      	mov	r4, r8

	while (ret == NULL) {
   17c46:	e014      	b.n	17c72 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17c48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17c4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   17c50:	e7ec      	b.n	17c2c <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17c52:	9000      	str	r0, [sp, #0]
   17c54:	9101      	str	r1, [sp, #4]
   17c56:	f107 020c 	add.w	r2, r7, #12
   17c5a:	4629      	mov	r1, r5
   17c5c:	4658      	mov	r0, fp
   17c5e:	f7fd fa15 	bl	1508c <z_pend_curr>
   17c62:	f04f 0320 	mov.w	r3, #32
   17c66:	f3ef 8511 	mrs	r5, BASEPRI
   17c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   17c6e:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   17c72:	b9ac      	cbnz	r4, 17ca0 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17c74:	4652      	mov	r2, sl
   17c76:	9903      	ldr	r1, [sp, #12]
   17c78:	4638      	mov	r0, r7
   17c7a:	f7fe fac6 	bl	1620a <sys_heap_aligned_alloc>
   17c7e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   17c80:	f7fd fd2c 	bl	156dc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   17c84:	b964      	cbnz	r4, 17ca0 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   17c86:	1a30      	subs	r0, r6, r0
   17c88:	eb69 0101 	sbc.w	r1, r9, r1
   17c8c:	2801      	cmp	r0, #1
   17c8e:	f171 0300 	sbcs.w	r3, r1, #0
   17c92:	db05      	blt.n	17ca0 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   17c94:	f1b8 0f00 	cmp.w	r8, #0
   17c98:	d1db      	bne.n	17c52 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   17c9a:	f04f 0801 	mov.w	r8, #1
   17c9e:	e7d8      	b.n	17c52 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   17ca0:	f385 8811 	msr	BASEPRI, r5
   17ca4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17ca8:	4620      	mov	r0, r4
   17caa:	b005      	add	sp, #20
   17cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017cb0 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   17cb0:	b500      	push	{lr}
   17cb2:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   17cb4:	e9cd 2300 	strd	r2, r3, [sp]
   17cb8:	460a      	mov	r2, r1
   17cba:	2104      	movs	r1, #4
   17cbc:	f7ff ffa2 	bl	17c04 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   17cc0:	b003      	add	sp, #12
   17cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00017cc6 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cc8:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17cca:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   17cce:	f04f 0320 	mov.w	r3, #32
   17cd2:	f3ef 8511 	mrs	r5, BASEPRI
   17cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   17cda:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   17cde:	f7fe fa50 	bl	16182 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   17ce2:	f104 000c 	add.w	r0, r4, #12
   17ce6:	f000 f974 	bl	17fd2 <z_unpend_all>
   17cea:	b920      	cbnz	r0, 17cf6 <k_heap_free+0x30>
	__asm__ volatile(
   17cec:	f385 8811 	msr	BASEPRI, r5
   17cf0:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   17cf6:	4629      	mov	r1, r5
   17cf8:	4638      	mov	r0, r7
   17cfa:	f7fd f879 	bl	14df0 <z_reschedule>
   17cfe:	e7f9      	b.n	17cf4 <k_heap_free+0x2e>

00017d00 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17d00:	3207      	adds	r2, #7
   17d02:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   17d06:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   17d0a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   17d0e:	2300      	movs	r3, #0
   17d10:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   17d14:	1888      	adds	r0, r1, r2
   17d16:	4770      	bx	lr

00017d18 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17d18:	f3ef 8005 	mrs	r0, IPSR
}
   17d1c:	3800      	subs	r0, #0
   17d1e:	bf18      	it	ne
   17d20:	2001      	movne	r0, #1
   17d22:	4770      	bx	lr

00017d24 <z_impl_k_thread_start>:
{
   17d24:	b508      	push	{r3, lr}
	z_sched_start(thread);
   17d26:	f7fd f977 	bl	15018 <z_sched_start>
}
   17d2a:	bd08      	pop	{r3, pc}

00017d2c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   17d2c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   17d2e:	2400      	movs	r4, #0
   17d30:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   17d32:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17d34:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   17d36:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   17d38:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   17d3a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   17d3c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   17d3e:	bc10      	pop	{r4}
   17d40:	4770      	bx	lr

00017d42 <z_pm_save_idle_exit>:
{
   17d42:	b508      	push	{r3, lr}
	pm_system_resume();
   17d44:	f7f9 f86a 	bl	10e1c <pm_system_resume>
	sys_clock_idle_exit();
   17d48:	f7ff fb7f 	bl	1744a <sys_clock_idle_exit>
}
   17d4c:	bd08      	pop	{r3, pc}

00017d4e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   17d4e:	4288      	cmp	r0, r1
   17d50:	da00      	bge.n	17d54 <new_prio_for_inheritance+0x6>
   17d52:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   17d54:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   17d58:	db01      	blt.n	17d5e <new_prio_for_inheritance+0x10>
   17d5a:	4608      	mov	r0, r1
   17d5c:	4770      	bx	lr
   17d5e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   17d62:	4770      	bx	lr

00017d64 <adjust_owner_prio>:
{
   17d64:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   17d66:	6880      	ldr	r0, [r0, #8]
   17d68:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17d6c:	428b      	cmp	r3, r1
   17d6e:	d101      	bne.n	17d74 <adjust_owner_prio+0x10>
	return false;
   17d70:	2000      	movs	r0, #0
}
   17d72:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   17d74:	f7fd f9a6 	bl	150c4 <z_set_prio>
   17d78:	e7fb      	b.n	17d72 <adjust_owner_prio+0xe>

00017d7a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   17d7a:	b13a      	cbz	r2, 17d8c <z_impl_k_sem_init+0x12>
   17d7c:	428a      	cmp	r2, r1
   17d7e:	d308      	bcc.n	17d92 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   17d80:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   17d82:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   17d84:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   17d86:	6040      	str	r0, [r0, #4]
	return 0;
   17d88:	2000      	movs	r0, #0
   17d8a:	4770      	bx	lr
		return -EINVAL;
   17d8c:	f06f 0015 	mvn.w	r0, #21
   17d90:	4770      	bx	lr
   17d92:	f06f 0015 	mvn.w	r0, #21
}
   17d96:	4770      	bx	lr

00017d98 <thread_active_elsewhere>:
}
   17d98:	2000      	movs	r0, #0
   17d9a:	4770      	bx	lr

00017d9c <pended_on_thread>:
}
   17d9c:	6880      	ldr	r0, [r0, #8]
   17d9e:	4770      	bx	lr

00017da0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   17da0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   17da4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   17da8:	4283      	cmp	r3, r0
   17daa:	d001      	beq.n	17db0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   17dac:	1ac0      	subs	r0, r0, r3
   17dae:	4770      	bx	lr
	return 0;
   17db0:	2000      	movs	r0, #0
}
   17db2:	4770      	bx	lr

00017db4 <z_reschedule_irqlock>:
{
   17db4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17db6:	4603      	mov	r3, r0
   17db8:	b928      	cbnz	r0, 17dc6 <z_reschedule_irqlock+0x12>
   17dba:	f3ef 8205 	mrs	r2, IPSR
   17dbe:	b912      	cbnz	r2, 17dc6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   17dc0:	f7f9 f996 	bl	110f0 <arch_swap>
	return ret;
   17dc4:	e003      	b.n	17dce <z_reschedule_irqlock+0x1a>
   17dc6:	f383 8811 	msr	BASEPRI, r3
   17dca:	f3bf 8f6f 	isb	sy
}
   17dce:	bd08      	pop	{r3, pc}

00017dd0 <z_reschedule_unlocked>:
{
   17dd0:	b508      	push	{r3, lr}
	__asm__ volatile(
   17dd2:	f04f 0320 	mov.w	r3, #32
   17dd6:	f3ef 8011 	mrs	r0, BASEPRI
   17dda:	f383 8812 	msr	BASEPRI_MAX, r3
   17dde:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   17de2:	f7ff ffe7 	bl	17db4 <z_reschedule_irqlock>
}
   17de6:	bd08      	pop	{r3, pc}

00017de8 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   17de8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   17dea:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   17dec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   17dee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17df0:	2300      	movs	r3, #0
   17df2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   17df4:	604b      	str	r3, [r1, #4]
}
   17df6:	4770      	bx	lr

00017df8 <unpend_thread_no_timeout>:
{
   17df8:	b510      	push	{r4, lr}
   17dfa:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   17dfc:	f7ff ffce 	bl	17d9c <pended_on_thread>
   17e00:	4621      	mov	r1, r4
   17e02:	f7ff fff1 	bl	17de8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17e06:	7b63      	ldrb	r3, [r4, #13]
   17e08:	f023 0302 	bic.w	r3, r3, #2
   17e0c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   17e0e:	2300      	movs	r3, #0
   17e10:	60a3      	str	r3, [r4, #8]
}
   17e12:	bd10      	pop	{r4, pc}

00017e14 <z_unpend_thread>:
{
   17e14:	b538      	push	{r3, r4, r5, lr}
   17e16:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   17e18:	2300      	movs	r3, #0
   17e1a:	f04f 0220 	mov.w	r2, #32
   17e1e:	f3ef 8511 	mrs	r5, BASEPRI
   17e22:	f382 8812 	msr	BASEPRI_MAX, r2
   17e26:	f3bf 8f6f 	isb	sy
   17e2a:	e004      	b.n	17e36 <z_unpend_thread+0x22>
	__asm__ volatile(
   17e2c:	f385 8811 	msr	BASEPRI, r5
   17e30:	f3bf 8f6f 	isb	sy
   17e34:	2301      	movs	r3, #1
   17e36:	b933      	cbnz	r3, 17e46 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   17e38:	68a3      	ldr	r3, [r4, #8]
   17e3a:	2b00      	cmp	r3, #0
   17e3c:	d0f6      	beq.n	17e2c <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   17e3e:	4620      	mov	r0, r4
   17e40:	f7ff ffda 	bl	17df8 <unpend_thread_no_timeout>
   17e44:	e7f2      	b.n	17e2c <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   17e46:	f104 0018 	add.w	r0, r4, #24
   17e4a:	f000 f90a 	bl	18062 <z_abort_timeout>
}
   17e4e:	bd38      	pop	{r3, r4, r5, pc}

00017e50 <z_priq_dumb_best>:
{
   17e50:	4603      	mov	r3, r0
	return list->head == list;
   17e52:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e54:	4283      	cmp	r3, r0
   17e56:	d000      	beq.n	17e5a <z_priq_dumb_best+0xa>
}
   17e58:	4770      	bx	lr
	struct k_thread *thread = NULL;
   17e5a:	2000      	movs	r0, #0
	return thread;
   17e5c:	e7fc      	b.n	17e58 <z_priq_dumb_best+0x8>

00017e5e <z_ready_thread>:
{
   17e5e:	b538      	push	{r3, r4, r5, lr}
   17e60:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   17e62:	2300      	movs	r3, #0
	__asm__ volatile(
   17e64:	f04f 0220 	mov.w	r2, #32
   17e68:	f3ef 8511 	mrs	r5, BASEPRI
   17e6c:	f382 8812 	msr	BASEPRI_MAX, r2
   17e70:	f3bf 8f6f 	isb	sy
   17e74:	e004      	b.n	17e80 <z_ready_thread+0x22>
	__asm__ volatile(
   17e76:	f385 8811 	msr	BASEPRI, r5
   17e7a:	f3bf 8f6f 	isb	sy
   17e7e:	2301      	movs	r3, #1
   17e80:	b943      	cbnz	r3, 17e94 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   17e82:	4620      	mov	r0, r4
   17e84:	f7ff ff88 	bl	17d98 <thread_active_elsewhere>
   17e88:	2800      	cmp	r0, #0
   17e8a:	d1f4      	bne.n	17e76 <z_ready_thread+0x18>
			ready_thread(thread);
   17e8c:	4620      	mov	r0, r4
   17e8e:	f7fd f887 	bl	14fa0 <ready_thread>
   17e92:	e7f0      	b.n	17e76 <z_ready_thread+0x18>
}
   17e94:	bd38      	pop	{r3, r4, r5, pc}

00017e96 <z_sched_wake_thread>:
{
   17e96:	b570      	push	{r4, r5, r6, lr}
   17e98:	4604      	mov	r4, r0
   17e9a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   17e9c:	2300      	movs	r3, #0
	__asm__ volatile(
   17e9e:	f04f 0220 	mov.w	r2, #32
   17ea2:	f3ef 8511 	mrs	r5, BASEPRI
   17ea6:	f382 8812 	msr	BASEPRI_MAX, r2
   17eaa:	f3bf 8f6f 	isb	sy
   17eae:	e007      	b.n	17ec0 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   17eb0:	4620      	mov	r0, r4
   17eb2:	f7fd f875 	bl	14fa0 <ready_thread>
	__asm__ volatile(
   17eb6:	f385 8811 	msr	BASEPRI, r5
   17eba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17ebe:	2301      	movs	r3, #1
   17ec0:	b993      	cbnz	r3, 17ee8 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   17ec2:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   17ec4:	f013 0f28 	tst.w	r3, #40	; 0x28
   17ec8:	d1f5      	bne.n	17eb6 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   17eca:	68a3      	ldr	r3, [r4, #8]
   17ecc:	b113      	cbz	r3, 17ed4 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   17ece:	4620      	mov	r0, r4
   17ed0:	f7ff ff92 	bl	17df8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17ed4:	7b63      	ldrb	r3, [r4, #13]
   17ed6:	f023 0204 	bic.w	r2, r3, #4
   17eda:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   17edc:	2e00      	cmp	r6, #0
   17ede:	d0e7      	beq.n	17eb0 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17ee0:	f023 0314 	bic.w	r3, r3, #20
   17ee4:	7363      	strb	r3, [r4, #13]
}
   17ee6:	e7e3      	b.n	17eb0 <z_sched_wake_thread+0x1a>
}
   17ee8:	bd70      	pop	{r4, r5, r6, pc}

00017eea <z_thread_timeout>:
{
   17eea:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   17eec:	2101      	movs	r1, #1
   17eee:	3818      	subs	r0, #24
   17ef0:	f7ff ffd1 	bl	17e96 <z_sched_wake_thread>
}
   17ef4:	bd08      	pop	{r3, pc}

00017ef6 <unpend_all>:
{
   17ef6:	b538      	push	{r3, r4, r5, lr}
   17ef8:	4605      	mov	r5, r0
	return list->head == list;
   17efa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17efc:	42a5      	cmp	r5, r4
   17efe:	d00e      	beq.n	17f1e <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17f00:	b16c      	cbz	r4, 17f1e <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   17f02:	4620      	mov	r0, r4
   17f04:	f7ff ff78 	bl	17df8 <unpend_thread_no_timeout>
   17f08:	f104 0018 	add.w	r0, r4, #24
   17f0c:	f000 f8a9 	bl	18062 <z_abort_timeout>
   17f10:	2300      	movs	r3, #0
   17f12:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
   17f16:	4620      	mov	r0, r4
   17f18:	f7fd f842 	bl	14fa0 <ready_thread>
   17f1c:	e7ed      	b.n	17efa <unpend_all+0x4>
}
   17f1e:	bd38      	pop	{r3, r4, r5, pc}

00017f20 <add_to_waitq_locked>:
{
   17f20:	b570      	push	{r4, r5, r6, lr}
   17f22:	4605      	mov	r5, r0
   17f24:	460e      	mov	r6, r1
	unready_thread(thread);
   17f26:	f7fd f895 	bl	15054 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   17f2a:	7b6b      	ldrb	r3, [r5, #13]
   17f2c:	f043 0302 	orr.w	r3, r3, #2
   17f30:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   17f32:	b1fe      	cbz	r6, 17f74 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   17f34:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   17f36:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f38:	42a6      	cmp	r6, r4
   17f3a:	d108      	bne.n	17f4e <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17f3c:	2400      	movs	r4, #0
   17f3e:	e006      	b.n	17f4e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   17f40:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   17f42:	606b      	str	r3, [r5, #4]
	node->next = successor;
   17f44:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17f46:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17f48:	6065      	str	r5, [r4, #4]
}
   17f4a:	e013      	b.n	17f74 <add_to_waitq_locked+0x54>
   17f4c:	2400      	movs	r4, #0
   17f4e:	b164      	cbz	r4, 17f6a <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17f50:	4621      	mov	r1, r4
   17f52:	4628      	mov	r0, r5
   17f54:	f7ff ff24 	bl	17da0 <z_sched_prio_cmp>
   17f58:	2800      	cmp	r0, #0
   17f5a:	dcf1      	bgt.n	17f40 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17f5c:	2c00      	cmp	r4, #0
   17f5e:	d0f6      	beq.n	17f4e <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   17f60:	6873      	ldr	r3, [r6, #4]
   17f62:	429c      	cmp	r4, r3
   17f64:	d0f2      	beq.n	17f4c <add_to_waitq_locked+0x2c>
   17f66:	6824      	ldr	r4, [r4, #0]
   17f68:	e7f1      	b.n	17f4e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   17f6a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   17f6c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   17f6e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   17f70:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17f72:	6075      	str	r5, [r6, #4]
}
   17f74:	bd70      	pop	{r4, r5, r6, pc}

00017f76 <pend_locked>:
{
   17f76:	b570      	push	{r4, r5, r6, lr}
   17f78:	4604      	mov	r4, r0
   17f7a:	4616      	mov	r6, r2
   17f7c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   17f7e:	f7ff ffcf 	bl	17f20 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   17f82:	4632      	mov	r2, r6
   17f84:	462b      	mov	r3, r5
   17f86:	4620      	mov	r0, r4
   17f88:	f7fc fefa 	bl	14d80 <add_thread_timeout>
}
   17f8c:	bd70      	pop	{r4, r5, r6, pc}

00017f8e <z_unpend_first_thread>:
{
   17f8e:	b570      	push	{r4, r5, r6, lr}
   17f90:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   17f92:	2300      	movs	r3, #0
	__asm__ volatile(
   17f94:	f04f 0220 	mov.w	r2, #32
   17f98:	f3ef 8511 	mrs	r5, BASEPRI
   17f9c:	f382 8812 	msr	BASEPRI_MAX, r2
   17fa0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   17fa4:	461c      	mov	r4, r3
   17fa6:	e004      	b.n	17fb2 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   17fa8:	f385 8811 	msr	BASEPRI, r5
   17fac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17fb0:	2301      	movs	r3, #1
   17fb2:	b963      	cbnz	r3, 17fce <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   17fb4:	4630      	mov	r0, r6
   17fb6:	f7ff ff4b 	bl	17e50 <z_priq_dumb_best>
		if (thread != NULL) {
   17fba:	4604      	mov	r4, r0
   17fbc:	2800      	cmp	r0, #0
   17fbe:	d0f3      	beq.n	17fa8 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   17fc0:	f7ff ff1a 	bl	17df8 <unpend_thread_no_timeout>
   17fc4:	f104 0018 	add.w	r0, r4, #24
   17fc8:	f000 f84b 	bl	18062 <z_abort_timeout>
   17fcc:	e7ec      	b.n	17fa8 <z_unpend_first_thread+0x1a>
}
   17fce:	4620      	mov	r0, r4
   17fd0:	bd70      	pop	{r4, r5, r6, pc}

00017fd2 <z_unpend_all>:
{
   17fd2:	b538      	push	{r3, r4, r5, lr}
   17fd4:	4605      	mov	r5, r0
	int need_sched = 0;
   17fd6:	2000      	movs	r0, #0
	return list->head == list;
   17fd8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fda:	42a5      	cmp	r5, r4
   17fdc:	d008      	beq.n	17ff0 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17fde:	b13c      	cbz	r4, 17ff0 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   17fe0:	4620      	mov	r0, r4
   17fe2:	f7ff ff17 	bl	17e14 <z_unpend_thread>
		z_ready_thread(thread);
   17fe6:	4620      	mov	r0, r4
   17fe8:	f7ff ff39 	bl	17e5e <z_ready_thread>
		need_sched = 1;
   17fec:	2001      	movs	r0, #1
   17fee:	e7f3      	b.n	17fd8 <z_unpend_all+0x6>
}
   17ff0:	bd38      	pop	{r3, r4, r5, pc}

00017ff2 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   17ff2:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   17ff4:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   17ff6:	6083      	str	r3, [r0, #8]
}
   17ff8:	4770      	bx	lr

00017ffa <remove_timeout>:
{
   17ffa:	b510      	push	{r4, lr}
   17ffc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   17ffe:	f7fd fa71 	bl	154e4 <next>
   18002:	b148      	cbz	r0, 18018 <remove_timeout+0x1e>
   18004:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   18006:	6903      	ldr	r3, [r0, #16]
   18008:	6941      	ldr	r1, [r0, #20]
   1800a:	6920      	ldr	r0, [r4, #16]
   1800c:	181b      	adds	r3, r3, r0
   1800e:	6960      	ldr	r0, [r4, #20]
   18010:	eb41 0100 	adc.w	r1, r1, r0
   18014:	6113      	str	r3, [r2, #16]
   18016:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   18018:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1801a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1801c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1801e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18020:	2300      	movs	r3, #0
   18022:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   18024:	6063      	str	r3, [r4, #4]
}
   18026:	bd10      	pop	{r4, pc}

00018028 <next_timeout>:
{
   18028:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1802a:	f7fd fa51 	bl	154d0 <first>
   1802e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   18030:	f7fd fa64 	bl	154fc <elapsed>
	if ((to == NULL) ||
   18034:	b17c      	cbz	r4, 18056 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   18036:	6923      	ldr	r3, [r4, #16]
   18038:	6962      	ldr	r2, [r4, #20]
   1803a:	1a1b      	subs	r3, r3, r0
   1803c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   18040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18044:	f172 0100 	sbcs.w	r1, r2, #0
   18048:	da08      	bge.n	1805c <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1804a:	2a00      	cmp	r2, #0
   1804c:	db01      	blt.n	18052 <next_timeout+0x2a>
   1804e:	4618      	mov	r0, r3
}
   18050:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   18052:	2300      	movs	r3, #0
   18054:	e7fb      	b.n	1804e <next_timeout+0x26>
		ret = MAX_WAIT;
   18056:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1805a:	e7f9      	b.n	18050 <next_timeout+0x28>
   1805c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   18060:	e7f6      	b.n	18050 <next_timeout+0x28>

00018062 <z_abort_timeout>:
{
   18062:	b570      	push	{r4, r5, r6, lr}
   18064:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   18066:	2300      	movs	r3, #0
	__asm__ volatile(
   18068:	f04f 0220 	mov.w	r2, #32
   1806c:	f3ef 8611 	mrs	r6, BASEPRI
   18070:	f382 8812 	msr	BASEPRI_MAX, r2
   18074:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   18078:	f06f 0015 	mvn.w	r0, #21
   1807c:	e004      	b.n	18088 <z_abort_timeout+0x26>
	__asm__ volatile(
   1807e:	f386 8811 	msr	BASEPRI, r6
   18082:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18086:	2301      	movs	r3, #1
   18088:	461d      	mov	r5, r3
   1808a:	b93b      	cbnz	r3, 1809c <z_abort_timeout+0x3a>
	return node->next != NULL;
   1808c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1808e:	2b00      	cmp	r3, #0
   18090:	d0f5      	beq.n	1807e <z_abort_timeout+0x1c>
			remove_timeout(to);
   18092:	4620      	mov	r0, r4
   18094:	f7ff ffb1 	bl	17ffa <remove_timeout>
			ret = 0;
   18098:	4628      	mov	r0, r5
   1809a:	e7f0      	b.n	1807e <z_abort_timeout+0x1c>
}
   1809c:	bd70      	pop	{r4, r5, r6, pc}

0001809e <z_get_next_timeout_expiry>:
{
   1809e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   180a0:	2300      	movs	r3, #0
	__asm__ volatile(
   180a2:	f04f 0220 	mov.w	r2, #32
   180a6:	f3ef 8411 	mrs	r4, BASEPRI
   180aa:	f382 8812 	msr	BASEPRI_MAX, r2
   180ae:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   180b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180b6:	e006      	b.n	180c6 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   180b8:	f7ff ffb6 	bl	18028 <next_timeout>
	__asm__ volatile(
   180bc:	f384 8811 	msr	BASEPRI, r4
   180c0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   180c4:	2301      	movs	r3, #1
   180c6:	2b00      	cmp	r3, #0
   180c8:	d0f6      	beq.n	180b8 <z_get_next_timeout_expiry+0x1a>
}
   180ca:	bd10      	pop	{r4, pc}

000180cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   180cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   180ce:	f7fd fb05 	bl	156dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   180d2:	bd08      	pop	{r3, pc}

000180d4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   180d4:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   180d6:	f7fd fb01 	bl	156dc <sys_clock_tick_get>
}
   180da:	bd08      	pop	{r3, pc}

000180dc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   180dc:	b900      	cbnz	r0, 180e0 <z_impl_k_busy_wait+0x4>
   180de:	4770      	bx	lr
{
   180e0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   180e2:	f7f8 fe4f 	bl	10d84 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   180e6:	bd08      	pop	{r3, pc}

000180e8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   180e8:	b538      	push	{r3, r4, r5, lr}
   180ea:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   180ec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   180f0:	bf08      	it	eq
   180f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   180f6:	d020      	beq.n	1813a <sys_clock_timeout_end_calc+0x52>
   180f8:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   180fa:	ea51 0300 	orrs.w	r3, r1, r0
   180fe:	d009      	beq.n	18114 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   18100:	f06f 0301 	mvn.w	r3, #1
   18104:	1a18      	subs	r0, r3, r0
   18106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1810a:	eb63 0101 	sbc.w	r1, r3, r1
   1810e:	2900      	cmp	r1, #0
   18110:	db03      	blt.n	1811a <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   18112:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   18114:	f7fd fae2 	bl	156dc <sys_clock_tick_get>
   18118:	e7fb      	b.n	18112 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1811a:	f7fd fadf 	bl	156dc <sys_clock_tick_get>
   1811e:	4603      	mov	r3, r0
   18120:	462a      	mov	r2, r5
   18122:	46a4      	mov	ip, r4
   18124:	2d01      	cmp	r5, #1
   18126:	f174 0400 	sbcs.w	r4, r4, #0
   1812a:	da02      	bge.n	18132 <sys_clock_timeout_end_calc+0x4a>
   1812c:	2201      	movs	r2, #1
   1812e:	f04f 0c00 	mov.w	ip, #0
   18132:	1898      	adds	r0, r3, r2
   18134:	eb41 010c 	adc.w	r1, r1, ip
   18138:	e7eb      	b.n	18112 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1813a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1813e:	4601      	mov	r1, r0
   18140:	e7e7      	b.n	18112 <sys_clock_timeout_end_calc+0x2a>

00018142 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18142:	4770      	bx	lr

00018144 <memcpy>:
   18144:	440a      	add	r2, r1
   18146:	1e43      	subs	r3, r0, #1
   18148:	4291      	cmp	r1, r2
   1814a:	d100      	bne.n	1814e <memcpy+0xa>
   1814c:	4770      	bx	lr
   1814e:	b510      	push	{r4, lr}
   18150:	f811 4b01 	ldrb.w	r4, [r1], #1
   18154:	4291      	cmp	r1, r2
   18156:	f803 4f01 	strb.w	r4, [r3, #1]!
   1815a:	d1f9      	bne.n	18150 <memcpy+0xc>
   1815c:	bd10      	pop	{r4, pc}

0001815e <memset>:
   1815e:	4402      	add	r2, r0
   18160:	4603      	mov	r3, r0
   18162:	4293      	cmp	r3, r2
   18164:	d100      	bne.n	18168 <memset+0xa>
   18166:	4770      	bx	lr
   18168:	f803 1b01 	strb.w	r1, [r3], #1
   1816c:	e7f9      	b.n	18162 <memset+0x4>

0001816e <strncpy>:
   1816e:	3901      	subs	r1, #1
   18170:	4603      	mov	r3, r0
   18172:	b510      	push	{r4, lr}
   18174:	b132      	cbz	r2, 18184 <strncpy+0x16>
   18176:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1817a:	3a01      	subs	r2, #1
   1817c:	f803 4b01 	strb.w	r4, [r3], #1
   18180:	2c00      	cmp	r4, #0
   18182:	d1f7      	bne.n	18174 <strncpy+0x6>
   18184:	441a      	add	r2, r3
   18186:	2100      	movs	r1, #0
   18188:	4293      	cmp	r3, r2
   1818a:	d100      	bne.n	1818e <strncpy+0x20>
   1818c:	bd10      	pop	{r4, pc}
   1818e:	f803 1b01 	strb.w	r1, [r3], #1
   18192:	e7f9      	b.n	18188 <strncpy+0x1a>

00018194 <strnlen>:
   18194:	4602      	mov	r2, r0
   18196:	4401      	add	r1, r0
   18198:	b510      	push	{r4, lr}
   1819a:	428a      	cmp	r2, r1
   1819c:	4613      	mov	r3, r2
   1819e:	d003      	beq.n	181a8 <strnlen+0x14>
   181a0:	781c      	ldrb	r4, [r3, #0]
   181a2:	3201      	adds	r2, #1
   181a4:	2c00      	cmp	r4, #0
   181a6:	d1f8      	bne.n	1819a <strnlen+0x6>
   181a8:	1a18      	subs	r0, r3, r0
   181aa:	bd10      	pop	{r4, pc}

000181ac <strstr>:
   181ac:	780a      	ldrb	r2, [r1, #0]
   181ae:	b570      	push	{r4, r5, r6, lr}
   181b0:	b96a      	cbnz	r2, 181ce <strstr+0x22>
   181b2:	bd70      	pop	{r4, r5, r6, pc}
   181b4:	429a      	cmp	r2, r3
   181b6:	d109      	bne.n	181cc <strstr+0x20>
   181b8:	460c      	mov	r4, r1
   181ba:	4605      	mov	r5, r0
   181bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   181c0:	2b00      	cmp	r3, #0
   181c2:	d0f6      	beq.n	181b2 <strstr+0x6>
   181c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   181c8:	429e      	cmp	r6, r3
   181ca:	d0f7      	beq.n	181bc <strstr+0x10>
   181cc:	3001      	adds	r0, #1
   181ce:	7803      	ldrb	r3, [r0, #0]
   181d0:	2b00      	cmp	r3, #0
   181d2:	d1ef      	bne.n	181b4 <strstr+0x8>
   181d4:	4618      	mov	r0, r3
   181d6:	e7ec      	b.n	181b2 <strstr+0x6>

000181d8 <_vsniprintf_r>:
   181d8:	b530      	push	{r4, r5, lr}
   181da:	4614      	mov	r4, r2
   181dc:	b09b      	sub	sp, #108	; 0x6c
   181de:	4605      	mov	r5, r0
   181e0:	461a      	mov	r2, r3
   181e2:	2c00      	cmp	r4, #0
   181e4:	da05      	bge.n	181f2 <_vsniprintf_r+0x1a>
   181e6:	238b      	movs	r3, #139	; 0x8b
   181e8:	6003      	str	r3, [r0, #0]
   181ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   181ee:	b01b      	add	sp, #108	; 0x6c
   181f0:	bd30      	pop	{r4, r5, pc}
   181f2:	f44f 7302 	mov.w	r3, #520	; 0x208
   181f6:	9100      	str	r1, [sp, #0]
   181f8:	9104      	str	r1, [sp, #16]
   181fa:	4669      	mov	r1, sp
   181fc:	f8ad 300c 	strh.w	r3, [sp, #12]
   18200:	bf14      	ite	ne
   18202:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   18206:	4623      	moveq	r3, r4
   18208:	9302      	str	r3, [sp, #8]
   1820a:	9305      	str	r3, [sp, #20]
   1820c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18210:	f8ad 300e 	strh.w	r3, [sp, #14]
   18214:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   18216:	f7fd fbe5 	bl	159e4 <_svfiprintf_r>
   1821a:	1c43      	adds	r3, r0, #1
   1821c:	bfbc      	itt	lt
   1821e:	238b      	movlt	r3, #139	; 0x8b
   18220:	602b      	strlt	r3, [r5, #0]
   18222:	2c00      	cmp	r4, #0
   18224:	d0e3      	beq.n	181ee <_vsniprintf_r+0x16>
   18226:	9b00      	ldr	r3, [sp, #0]
   18228:	2200      	movs	r2, #0
   1822a:	701a      	strb	r2, [r3, #0]
   1822c:	e7df      	b.n	181ee <_vsniprintf_r+0x16>

0001822e <__ssputs_r>:
   1822e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18232:	461f      	mov	r7, r3
   18234:	688e      	ldr	r6, [r1, #8]
   18236:	4682      	mov	sl, r0
   18238:	460c      	mov	r4, r1
   1823a:	42be      	cmp	r6, r7
   1823c:	4690      	mov	r8, r2
   1823e:	680b      	ldr	r3, [r1, #0]
   18240:	d82d      	bhi.n	1829e <__ssputs_r+0x70>
   18242:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   18246:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1824a:	d026      	beq.n	1829a <__ssputs_r+0x6c>
   1824c:	6965      	ldr	r5, [r4, #20]
   1824e:	6909      	ldr	r1, [r1, #16]
   18250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18254:	eba3 0901 	sub.w	r9, r3, r1
   18258:	1c7b      	adds	r3, r7, #1
   1825a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1825e:	444b      	add	r3, r9
   18260:	106d      	asrs	r5, r5, #1
   18262:	429d      	cmp	r5, r3
   18264:	bf38      	it	cc
   18266:	461d      	movcc	r5, r3
   18268:	0553      	lsls	r3, r2, #21
   1826a:	d527      	bpl.n	182bc <__ssputs_r+0x8e>
   1826c:	4629      	mov	r1, r5
   1826e:	f7fd faad 	bl	157cc <_malloc_r>
   18272:	4606      	mov	r6, r0
   18274:	b360      	cbz	r0, 182d0 <__ssputs_r+0xa2>
   18276:	464a      	mov	r2, r9
   18278:	6921      	ldr	r1, [r4, #16]
   1827a:	f7ff ff63 	bl	18144 <memcpy>
   1827e:	89a3      	ldrh	r3, [r4, #12]
   18280:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   18284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18288:	81a3      	strh	r3, [r4, #12]
   1828a:	6126      	str	r6, [r4, #16]
   1828c:	444e      	add	r6, r9
   1828e:	6165      	str	r5, [r4, #20]
   18290:	eba5 0509 	sub.w	r5, r5, r9
   18294:	6026      	str	r6, [r4, #0]
   18296:	463e      	mov	r6, r7
   18298:	60a5      	str	r5, [r4, #8]
   1829a:	42be      	cmp	r6, r7
   1829c:	d900      	bls.n	182a0 <__ssputs_r+0x72>
   1829e:	463e      	mov	r6, r7
   182a0:	4632      	mov	r2, r6
   182a2:	4641      	mov	r1, r8
   182a4:	6820      	ldr	r0, [r4, #0]
   182a6:	f000 f89d 	bl	183e4 <memmove>
   182aa:	68a3      	ldr	r3, [r4, #8]
   182ac:	2000      	movs	r0, #0
   182ae:	1b9b      	subs	r3, r3, r6
   182b0:	60a3      	str	r3, [r4, #8]
   182b2:	6823      	ldr	r3, [r4, #0]
   182b4:	4433      	add	r3, r6
   182b6:	6023      	str	r3, [r4, #0]
   182b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   182bc:	462a      	mov	r2, r5
   182be:	f000 f8ab 	bl	18418 <_realloc_r>
   182c2:	4606      	mov	r6, r0
   182c4:	2800      	cmp	r0, #0
   182c6:	d1e0      	bne.n	1828a <__ssputs_r+0x5c>
   182c8:	6921      	ldr	r1, [r4, #16]
   182ca:	4650      	mov	r0, sl
   182cc:	f7fd fa34 	bl	15738 <_free_r>
   182d0:	230c      	movs	r3, #12
   182d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   182d6:	f8ca 3000 	str.w	r3, [sl]
   182da:	89a3      	ldrh	r3, [r4, #12]
   182dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   182e0:	81a3      	strh	r3, [r4, #12]
   182e2:	e7e9      	b.n	182b8 <__ssputs_r+0x8a>

000182e4 <_printf_common>:
   182e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   182e8:	4616      	mov	r6, r2
   182ea:	4698      	mov	r8, r3
   182ec:	688a      	ldr	r2, [r1, #8]
   182ee:	4607      	mov	r7, r0
   182f0:	690b      	ldr	r3, [r1, #16]
   182f2:	460c      	mov	r4, r1
   182f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   182f8:	4293      	cmp	r3, r2
   182fa:	bfb8      	it	lt
   182fc:	4613      	movlt	r3, r2
   182fe:	6033      	str	r3, [r6, #0]
   18300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   18304:	b10a      	cbz	r2, 1830a <_printf_common+0x26>
   18306:	3301      	adds	r3, #1
   18308:	6033      	str	r3, [r6, #0]
   1830a:	6823      	ldr	r3, [r4, #0]
   1830c:	0699      	lsls	r1, r3, #26
   1830e:	bf42      	ittt	mi
   18310:	6833      	ldrmi	r3, [r6, #0]
   18312:	3302      	addmi	r3, #2
   18314:	6033      	strmi	r3, [r6, #0]
   18316:	6825      	ldr	r5, [r4, #0]
   18318:	f015 0506 	ands.w	r5, r5, #6
   1831c:	d106      	bne.n	1832c <_printf_common+0x48>
   1831e:	f104 0a19 	add.w	sl, r4, #25
   18322:	68e3      	ldr	r3, [r4, #12]
   18324:	6832      	ldr	r2, [r6, #0]
   18326:	1a9b      	subs	r3, r3, r2
   18328:	42ab      	cmp	r3, r5
   1832a:	dc2b      	bgt.n	18384 <_printf_common+0xa0>
   1832c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   18330:	6822      	ldr	r2, [r4, #0]
   18332:	3b00      	subs	r3, #0
   18334:	bf18      	it	ne
   18336:	2301      	movne	r3, #1
   18338:	0692      	lsls	r2, r2, #26
   1833a:	d430      	bmi.n	1839e <_printf_common+0xba>
   1833c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   18340:	4641      	mov	r1, r8
   18342:	4638      	mov	r0, r7
   18344:	47c8      	blx	r9
   18346:	3001      	adds	r0, #1
   18348:	d023      	beq.n	18392 <_printf_common+0xae>
   1834a:	6823      	ldr	r3, [r4, #0]
   1834c:	341a      	adds	r4, #26
   1834e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   18352:	f003 0306 	and.w	r3, r3, #6
   18356:	2b04      	cmp	r3, #4
   18358:	bf0a      	itet	eq
   1835a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   1835e:	2500      	movne	r5, #0
   18360:	6833      	ldreq	r3, [r6, #0]
   18362:	f04f 0600 	mov.w	r6, #0
   18366:	bf08      	it	eq
   18368:	1aed      	subeq	r5, r5, r3
   1836a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   1836e:	bf08      	it	eq
   18370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   18374:	4293      	cmp	r3, r2
   18376:	bfc4      	itt	gt
   18378:	1a9b      	subgt	r3, r3, r2
   1837a:	18ed      	addgt	r5, r5, r3
   1837c:	42b5      	cmp	r5, r6
   1837e:	d11a      	bne.n	183b6 <_printf_common+0xd2>
   18380:	2000      	movs	r0, #0
   18382:	e008      	b.n	18396 <_printf_common+0xb2>
   18384:	2301      	movs	r3, #1
   18386:	4652      	mov	r2, sl
   18388:	4641      	mov	r1, r8
   1838a:	4638      	mov	r0, r7
   1838c:	47c8      	blx	r9
   1838e:	3001      	adds	r0, #1
   18390:	d103      	bne.n	1839a <_printf_common+0xb6>
   18392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1839a:	3501      	adds	r5, #1
   1839c:	e7c1      	b.n	18322 <_printf_common+0x3e>
   1839e:	18e1      	adds	r1, r4, r3
   183a0:	1c5a      	adds	r2, r3, #1
   183a2:	2030      	movs	r0, #48	; 0x30
   183a4:	3302      	adds	r3, #2
   183a6:	4422      	add	r2, r4
   183a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   183ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   183b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   183b4:	e7c2      	b.n	1833c <_printf_common+0x58>
   183b6:	2301      	movs	r3, #1
   183b8:	4622      	mov	r2, r4
   183ba:	4641      	mov	r1, r8
   183bc:	4638      	mov	r0, r7
   183be:	47c8      	blx	r9
   183c0:	3001      	adds	r0, #1
   183c2:	d0e6      	beq.n	18392 <_printf_common+0xae>
   183c4:	3601      	adds	r6, #1
   183c6:	e7d9      	b.n	1837c <_printf_common+0x98>

000183c8 <memchr>:
   183c8:	b2c9      	uxtb	r1, r1
   183ca:	4603      	mov	r3, r0
   183cc:	4402      	add	r2, r0
   183ce:	b510      	push	{r4, lr}
   183d0:	4293      	cmp	r3, r2
   183d2:	4618      	mov	r0, r3
   183d4:	d101      	bne.n	183da <memchr+0x12>
   183d6:	2000      	movs	r0, #0
   183d8:	e003      	b.n	183e2 <memchr+0x1a>
   183da:	7804      	ldrb	r4, [r0, #0]
   183dc:	3301      	adds	r3, #1
   183de:	428c      	cmp	r4, r1
   183e0:	d1f6      	bne.n	183d0 <memchr+0x8>
   183e2:	bd10      	pop	{r4, pc}

000183e4 <memmove>:
   183e4:	4288      	cmp	r0, r1
   183e6:	b510      	push	{r4, lr}
   183e8:	eb01 0402 	add.w	r4, r1, r2
   183ec:	d902      	bls.n	183f4 <memmove+0x10>
   183ee:	4284      	cmp	r4, r0
   183f0:	4623      	mov	r3, r4
   183f2:	d807      	bhi.n	18404 <memmove+0x20>
   183f4:	1e43      	subs	r3, r0, #1
   183f6:	42a1      	cmp	r1, r4
   183f8:	d008      	beq.n	1840c <memmove+0x28>
   183fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   183fe:	f803 2f01 	strb.w	r2, [r3, #1]!
   18402:	e7f8      	b.n	183f6 <memmove+0x12>
   18404:	4402      	add	r2, r0
   18406:	4601      	mov	r1, r0
   18408:	428a      	cmp	r2, r1
   1840a:	d100      	bne.n	1840e <memmove+0x2a>
   1840c:	bd10      	pop	{r4, pc}
   1840e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   18412:	f802 4d01 	strb.w	r4, [r2, #-1]!
   18416:	e7f7      	b.n	18408 <memmove+0x24>

00018418 <_realloc_r>:
   18418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1841a:	4607      	mov	r7, r0
   1841c:	4615      	mov	r5, r2
   1841e:	460c      	mov	r4, r1
   18420:	b921      	cbnz	r1, 1842c <_realloc_r+0x14>
   18422:	4611      	mov	r1, r2
   18424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18428:	f7fd b9d0 	b.w	157cc <_malloc_r>
   1842c:	b922      	cbnz	r2, 18438 <_realloc_r+0x20>
   1842e:	f7fd f983 	bl	15738 <_free_r>
   18432:	2400      	movs	r4, #0
   18434:	4620      	mov	r0, r4
   18436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18438:	f000 f813 	bl	18462 <_malloc_usable_size_r>
   1843c:	42a8      	cmp	r0, r5
   1843e:	d2f9      	bcs.n	18434 <_realloc_r+0x1c>
   18440:	4629      	mov	r1, r5
   18442:	4638      	mov	r0, r7
   18444:	f7fd f9c2 	bl	157cc <_malloc_r>
   18448:	4606      	mov	r6, r0
   1844a:	2800      	cmp	r0, #0
   1844c:	d0f1      	beq.n	18432 <_realloc_r+0x1a>
   1844e:	4621      	mov	r1, r4
   18450:	462a      	mov	r2, r5
   18452:	f7ff fe77 	bl	18144 <memcpy>
   18456:	4621      	mov	r1, r4
   18458:	4638      	mov	r0, r7
   1845a:	4634      	mov	r4, r6
   1845c:	f7fd f96c 	bl	15738 <_free_r>
   18460:	e7e8      	b.n	18434 <_realloc_r+0x1c>

00018462 <_malloc_usable_size_r>:
   18462:	f851 3c04 	ldr.w	r3, [r1, #-4]
   18466:	1f18      	subs	r0, r3, #4
   18468:	2b00      	cmp	r3, #0
   1846a:	bfbc      	itt	lt
   1846c:	580b      	ldrlt	r3, [r1, r0]
   1846e:	18c0      	addlt	r0, r0, r3
   18470:	4770      	bx	lr
	...
